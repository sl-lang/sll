(---
	"clib/_library.sll"
	"clib/_load_library.sll"
	"array.sll"
	"clib/types.sll"
	"string.sll"
	"sys.sll"
	"types.sll"
)



(= clib_function_type (&:
	(,,, data
		(@@ (<- string$format "<%s:%s @%#.16llx>" data$library$file_path data$name data$address))
	) @@string@@
	(~ string_type) name
	(~ int_type) address
	(~ clib_library_type) library
	array_type arguments
	clib:types$clib_type return
	int_type calling_convenction
))

(= clib_function_module_type (&:
	(~ type_type) clib_function_type
	(~ int_type) CALLING_CONVENCTION_MICROSOFT_X64
	(~ int_type) CALLING_CONVENCTION_SYSTEM_V_AMD64_ABI
	(~ func_type) call
	(~ func_type) declaration
))



(= CALLING_CONVENCTION_MICROSOFT_X64 0)
(= CALLING_CONVENCTION_SYSTEM_V_AMD64_ABI 1)



(= _prepare_data (,,, func
	(-> (= i 0) (< i ($ func$arguments))
		(= arg (:: (: func$arguments i) clib:types$clib_type))
		(? (=== arg clib:types$void){
			(:> "Invalid argument type: void\n")
			(<- thread$exit 1)
		})
		(= (: func$arguments i) arg)
		(++ i)
	)
	(? (! (|: [
		CALLING_CONVENCTION_MICROSOFT_X64
		CALLING_CONVENCTION_SYSTEM_V_AMD64_ABI
	] func$calling_convenction)) {
		(:> "Unknown calling convenction: " func$calling_convenction '\n')
		(<- thread$exit 1)
	})
))

(= call (,,, func @@call_args@@
	(? (! func) (@@ nil))
	(= func (:: func clib_function_type))
	(<- _prepare_data func)
	(= args ([> (= i 0) (< i ($ func$arguments))
		(= arg (: func$arguments i))
		(= value (?: (< i ($ @@call_args@@))
			(<- arg$_encode (: @@call_args@@ i) arg)
			(: arg$_default)
		))
		(++ i)
		value
	))
	(@@ (<- func$return$_decode (<- (... "clib:function_call")
		func$address
		(|
			(!! (& func$return$flags (| clib:types$FLAG_INTEGER clib:types$FLAG_POINTER)))
			(<< func$calling_convenction 1)
		)
		args
	) arg))
))

(= declaration (,,, func
	(? (! func) (@@ nil))
	(= func (:: func clib_function_type))
	(<- _prepare_data func)
	(@@ (+
		(:: func$return string_type)
		(* " __attribute__((ms_abi))" (&&
			(!== sys$PLATFORM "windows")
			(=== func$calling_convenction CALLING_CONVENCTION_MICROSOFT_X64)
		))
		' '
		func$name
		'('
		(?: func$arguments
			(<- string$join ',' func$arguments)
			"void"
		)
		')'
	))
))



(= clib:function (. clib_function_module_type
	clib_function_type
	CALLING_CONVENCTION_MICROSOFT_X64
	CALLING_CONVENCTION_SYSTEM_V_AMD64_ABI
	call
	declaration
))
(## clib:function)
