(---
	"clib/_library.sll"
	"clib/_load_library.sll"
	"clib/types.sll"
	"string.sll"
	"types.sll"
)



(= clib_function_type (&:
	(,,, dt
		(@@ (<- string$format "<%s:%s at %#.16llx>" dt$library$file_path dt$name dt$address))
	) @@string@@
	(~ string_type) name
	(~ int_type) address
	(~ clib_library_type) library
	array_type arguments
	clib_types$clib_type return
))

(= clib_function_module_type (&:
	(~ type_type) clib_function_type
	(~ func_type) call
	(~ func_type) declaration
))



(= _cast_arguments (,,, func
	(-> (= i 0) (< i ($ func$arguments))
		(= (: func$arguments i) (:: (: func$arguments i) clib_types$clib_type))
		(++ i)
	)
))

(= call (,,, func @@call_args@@
	(? (! func) (@@ nil))
	(= func (:: func clib_function_type))
	(<- _cast_arguments func)
	(@@ (<- func$return_value$_decode (<- (... "clib:call_function")
		func$address
		([> (= i 0) (< i ($ func$arguments))
			(= arg (: func$arguments i))
			(++ i)
			(?: (< i ($ @@call_args@@))
				(<- arg$_encode (: @@call_args@@ i))
				(: arg$_default)
			)
		)
	))
))

(= declaration (,,, func
	(? (! func) (@@ nil))
	(= func (:: func clib_function_type))
	(<- _cast_arguments func)
	(= out "")
	(@@ (+
		(:: func$return string_type)
		' '
		func$name
		'('
		(?: func$arguments
			(<- string$join func$arguments ',')
			"void"
		)
		')'
	))
))



(= clib_function (. clib_function_module_type
	clib_function_type
	call
	declaration
))
(## clib_function)
