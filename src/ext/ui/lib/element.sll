(---
	"array.sll"
	"string.sll"
	"types.sll"
	"ui/_ui_type.sll"
	"ui/_util.sll"
	"ui/layout.sll"
	"ui/position.sll"
)



(# update)



(= ui_element_callbacks_type (&:
	func_type deserialize
	func_type serialize
	func_type update
))

(= ui_element_data_type (&:
	string_type name
	ui_element_callbacks_type callbacks
))

(= ui_element_type (&:
	(,,, data
		(@@ (<- string$format "<ui:element position=%s z-index=%u children=%s>"
			(:: data$position string_type)
			data$z_index
			(<- string$str data$children)
		))
	) @@string@@
	(~ object_type) ui
	object_type parent
	ui:position$ui_position_type position
	int_type z_index
	array_type children
))

(= ui_element_module_type (&:
	(~ type_type) ui_element_callbacks_type
	(~ type_type) ui_element_type
	(~ func_type) create
	(~ func_type) delete
	(~ func_type) deserialize
	(~ func_type) is_valid_element
	(~ func_type) register_element
	(~ func_type) serialize
	(~ func_type) set_parent
	(~ func_type) update
))



(= _element_type_data <>)
(= _element_name_to_type <>)



(= create (,,, ui position_layout
	(= position_layout (:: position_layout array_type))
	(@@ (. ui_element_type
		ui
		nil
		[
			0
			0
			0
			0
			(: position_layout 0)
			(: position_layout 1)
			(: position_layout 2)
			(: position_layout 3)
		]
		0
		[]
	))
))

(= delete (,,, element
	(? (! element) (@@))
	(= element (:: element ui_element_type))
))

(= deserialize (,,, ui data parent
	(= data (:: data map_type))
	(= element_data (: _element_type_data (: _element_name_to_type data$type)))
	(= out (<- element_data$callbacks$deserialize
		ui
		(. ui_element_type
			ui
			nil
			[
				0
				0
				0
				0
				(<- ui:layout$deserialize (: data$layout 0))
				(<- ui:layout$deserialize (: data$layout 1))
				(<- ui:layout$deserialize (: data$layout 2))
				(<- ui:layout$deserialize (: data$layout 3))
			]
			0
			[]
		)
		parent
		data$data
	))
	(<- ui:position$update out$base$position out$base$parent$base)
	(-> (= i 0) (< i ($ data$children))
		(<- deserialize ui (: data$children i) out)
		(++ i)
	)
	(@@ out)
))

(= is_valid_element (,,, element
	(? (! (: _element_type_data (:? element))) {
		(:> "Invlid UI element: " element '\n')
		(@@ false)
	})
	(@@ true)
))

(= register_element (,,, element_type name callbacks
	(? (! element_type) (@@))
	(= element_type (:: element_type type_type))
	(= name (:: name string_type))
	(= callbacks (:: callbacks ui_element_callbacks_type))
	(? (&&
		(: _element_name_to_type name)
		(!== (: _element_name_to_type name) element_type)
	) {
		(:> "UI element '" name "' already exists!\n")
		(@@)
	})
	(= (: _element_type_data element_type) (. ui_element_data_type
		name
		callbacks
	))
	(= (: _element_name_to_type name) element_type)
))

(= serialize (,,, element
	(? (||
		(! element)
		(! (<- is_valid_element element))
	) (@@ nil))
	(= data (: _element_type_data (:? element)))
	(= out <
		"type" data$name
		"layout" [
			(<- ui:layout$serialize element$base$position$x_layout)
			(<- ui:layout$serialize element$base$position$y_layout)
			(<- ui:layout$serialize element$base$position$width_layout)
			(<- ui:layout$serialize element$base$position$height_layout)
		]
		"children" ([> (= i 0) (< i ($ element$base$children))
			(= child (: element$base$children i))
			(++ i)
			(<- serialize child)
		)
		"data" (<- data$callbacks$serialize element)
	>)
	(@@ out)
))

(= set_parent (,,, element parent
	(? (||
		(! element)
		(! (<- is_valid_element element))
		(&& (!== parent nil) (! (<- is_valid_element parent)))
		(!== (%% element$base$ui) (%% parent$base$ui))
	) (@@ false))
	(? element$base$parent (<- array$remove element$base$parent$base$children element))
	(= element$base$parent parent)
	(= element$base$z_index (+ parent$base$z_index 1))
	(? (> element$base$z_index element$base$ui$_max_z_index) {
		(= element$base$ui$_max_z_index element$base$z_index)
		(<- _update_ui_uniform_buffer element$base$ui)
	})
	(<- array$push parent$base$children element)
	(<- update element)
	(@@ true)
))

(= update (,,, element
	(? (||
		(! element)
		(! (<- is_valid_element element))
		(! (<- ui:position$update element$base$position element$base$parent$base))
	) (@@))
	(= data (: _element_type_data (:? element)))
	(<- data$callbacks$update element)
	(-> (= i 0) (< i ($ element$base$children))
		(<- update (: element$base$children i))
		(++ i)
	)
))



(= ui:element (. ui_element_module_type
	ui_element_callbacks_type
	ui_element_type
	create
	delete
	deserialize
	is_valid_element
	register_element
	serialize
	set_parent
	update
))
(## ui:element)
