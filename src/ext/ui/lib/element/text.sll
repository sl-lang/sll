(---
	"font/true_type.sll"
	"string.sll"
	"types.sll"
	"ui/_util.sll"
	"ui/core.sll"
	"ui/element.sll"
)



(# delete set_font set_text set_parent)



(= ui_text_element_type (&:
	(,,, data
		(@@ (<- string$format "<ui:element:text text=%s base=%s>"
			data$text
			(:: data$base string_type)
		))
	) @@string@@
	(,,, data
		(<- delete data)
	) @@delete@@
	(~ ui:element$ui_element_type) base
	string_type text
	object_type _font
	font:true_type$font_rendered_text_type _rendered_text
))

(= ui_element_text_module_type (&:
	(~ type_type) ui_text_element_type
	(~ func_type) create
	(~ func_type) delete
	(~ func_type) set_font
	(~ func_type) set_text
	(~ func_type) set_parent
))



(= _create_text (,,, ui base parent font text
	(= out (. ui_text_element_type
		base
		""
		nil
		(<- font:true_type$create_rendered_text ui$context)
	))
	(? font (<- set_font out font))
	(? text (<- set_text out text))
	(? parent (<- set_parent out parent))
	(<- ui:element$setup out)
	(@@ out)
))

(= _deseralize_data (,,, ui base parent data
	(@@ (<- _create_text ui base parent (: data 0) (: data 1)))
))

(= _render_text (,,, text
	(<- font:true_type$draw_rendered_text text$_rendered_text)
))

(= _seralize_data (,,, text
	(@@ [
		text$_font$font
		text$text
	])
))

(= create (,,, ui position_layout parent font text
	(= ui (?: ui (:: ui ui:core$ui_type) nil))
	(@@ (<- _create_text
		ui
		(<- ui:element$create ui position_layout)
		parent
		font
		text
	))
))

(= delete (,,, text
	(? (! text) (@@))
	(= text (:: text ui_text_element_type))
	(<- ui:element$delete text)
))

(= set_font (,,, text font
	(? (! text) (@@))
	(= text (:: text ui_text_element_type))
	(= font (:: font font:true_type$font_type))
	(= text$_font (<- font:true_type$add_font text$base$ui$_font_atlas font))
	(<- font:true_type$update_rendered_text_font text$_rendered_text text$_font)
))

(= set_text (,,, text content
	(? (! text) (@@))
	(= text (:: text ui_text_element_type))
	(= content (: (:: content string_type)))
	(= text$text content)
	(<- font:true_type$update_rendered_text text$_rendered_text content)
))

(= set_parent (,,, text parent
	(? (! text) (@@))
	(= text (:: text ui_text_element_type))
	(?
		(! (<- ui:element$set_parent text parent)) (@@ false)
		(! text$base$ui) (@@ true)
	)
	(@@ true)
))



(<- ui:element$register_element ui_text_element_type "ui:element:text" (. ui:element$ui_element_data_callbacks_type
	nil
	_deseralize_data
	nil
	nil
	_render_text
	_seralize_data
	nil
))



(= ui:element:text (. ui_element_text_module_type
	ui_text_element_type
	create
	delete
	set_text
	set_parent
))
(## ui:element:text)
