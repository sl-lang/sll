(---
	"string.sll"
	"types.sll"
	"ui/element.sll"
	"window_manager/window.sll"
)



(= ui_button_element_type (&:
	(,,, data
		(@@ (<- string$format "<ui:element:button base=%s>"
			(:: data$base string_type)
		))
	) @@string@@
	(~ ui:element$ui_element_type) base
	func_type callback
))

(= ui_button_element_module_type (&:
	(~ type_type) ui_button_element_type
	(~ func_type) create
	(~ func_type) delete
))



(= _handle_button_event (,,, button mouse_button state
	(= x button$base$ui$window$inputs$mouse$x)
	(= y button$base$ui$window$inputs$mouse$y)
	(? (||
		(!== mouse_button window_manager:window$FLAG_BUTTON_LEFT)
		(! state)
		(< x button$base$position$x)
		(< y button$base$position$y)
		(>= x (+ button$base$position$x button$base$position$width))
		(>= y (+ button$base$position$y button$base$position$height))
	) (@@))
	(<- button$callback mouse_button state)
))

(= create (,,, ui position_layout parent callback
	(= out (. ui_button_element_type
		(<- ui:element$create ui position_layout)
		callback
	))
	(? parent (<- ui:element$set_parent out parent))
	(<- ui:element$setup out)
	(@@ out)
))

(= delete (,,, button
	(? (! button) (@@))
	(= button (:: button ui_button_element_type))
	(<- ui:element$delete button)
))



(<- ui:element$register_element ui_button_element_type "ui:element:button" (. ui:element$ui_element_data_callbacks_type
	_handle_button_event
	nil
	nil
	nil
	nil
	nil
))



(= ui:element:button (. ui_button_element_module_type
	ui_button_element_type
	create
	delete
))
(## ui:element:button)
