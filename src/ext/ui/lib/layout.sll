(---
	"string.sll"
	"types.sll"
)



(= ui_layout_standard_type (&:
	float_type multiplier
	float_type bias
))

(= ui_layout_filter_type (&:
	int_type type
	array_type layouts
))

(= ui_layout_type (&:
	(~ int_type) type
	ui_layout_standard_type standard
	ui_layout_filter_type filter
))

(= ui_layout_module_type (&:
	(~ type_type) ui_layout_type
	(~ int_type) FILTER_AVERAGE
	(~ int_type) FILTER_HIGHEST
	(~ int_type) FILTER_LOWEST
	(~ int_type) TYPE_FILTER
	(~ int_type) TYPE_STANDARD
	(~ func_type) create_filter_layout
	(~ func_type) create_standard_layout
	(~ func_type) solve
))



(= TYPE_STANDARD 0)
(= TYPE_FILTER 1)

(= FILTER_LOWEST 0)
(= FILTER_HIGHEST 1)
(= FILTER_AVERAGE 2)



(= create_filter_layout (,,, type layouts
	(= type (:: type int_type))
	(= layouts (:: layouts array_type))
	(= out (. ui_layout_type
		TYPE_FILTER
	))
	(= out$filter (. ui_layout_filter_type
		type
		layouts
	))
	(@@ out)
))

(= create_standard_layout (,,, multiplier bias
	(= multiplier (:: multiplier float_type))
	(= bias (:: bias float_type))
	(= out (. ui_layout_type
		TYPE_STANDARD
	))
	(= out$standard (. ui_layout_standard_type
		multiplier
		bias
	))
	(@@ out)
))

(= solve (,,, layout offset size
	(?? layout$type
		TYPE_STANDARD (@@ (+ offset (* layout$standard$multiplier size) layout$standard$bias))
		TYPE_FILTER {
			(= out nil)
			(-> (= i 0) (< i ($ layout$filter$layouts))
				(= value (<- solve (: layout$filter$layouts i) offset size))
				(?
					(||
						(! i)
						(&& (=== layout$filter$type FILTER_LOWEST) (< value out))
						(&& (=== layout$filter$type FILTER_HIGHEST) (> value out))
					) (= out value)
					(=== layout$filter$type FILTER_AVERAGE) (= out (+ out value))
				)
				(++ i)
			)
			(? (&&
				(=== layout$filter$type FILTER_AVERAGE)
				layout$filter$layouts
			) (= out (/ out ($ layout$filter$layouts))))
			(@@ out)
		}
	)
	(:> "Unknown layout: " layout '\n')
	(@@ (+ offset (/ size 2)))
))



(= ui:layout (. ui_layout_module_type
	ui_layout_type
	FILTER_AVERAGE
	FILTER_HIGHEST
	FILTER_LOWEST
	TYPE_FILTER
	TYPE_STANDARD
	create_filter_layout
	create_standard_layout
	solve
))
(## ui:layout)
