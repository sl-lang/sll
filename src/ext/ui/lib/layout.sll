(---
	"string.sll"
	"types.sll"
)



(= ui_layout_standard_type (&:
	float_type multiplier
	float_type bias
))

(= ui_layout_filter_type (&:
	int_type type
	array_type layouts
))

(= ui_layout_range_type (&:
 	object_type min
 	object_type value
 	object_type max
))

(= ui_layout_type (&:
	(~ int_type) type
	ui_layout_standard_type standard
	ui_layout_filter_type filter
	ui_layout_range_type range
))

(= ui_layout_module_type (&:
	(~ type_type) ui_layout_type
	(~ int_type) FILTER_AVERAGE
	(~ int_type) FILTER_HIGHEST
	(~ int_type) FILTER_LOWEST
	(~ int_type) TYPE_FILTER
	(~ int_type) TYPE_RANGE
	(~ int_type) TYPE_STANDARD
	(~ func_type) create_filter_layout
	(~ func_type) create_range_layout
	(~ func_type) create_standard_layout
	(~ func_type) dump_to_json
	(~ func_type) solve
))



(= TYPE_STANDARD 0)
(= TYPE_FILTER 1)
(= TYPE_RANGE 2)

(= FILTER_LOWEST 0)
(= FILTER_HIGHEST 1)
(= FILTER_AVERAGE 2)

(= _type_to_string <
	TYPE_STANDARD "standard"
	TYPE_FILTER "filter"
	TYPE_RANGE "range"
>)

(= _filter_type_to_string <
	FILTER_LOWEST "lowest"
	FILTER_HIGHEST "highest"
	FILTER_AVERAGE "average"
>)



(= create_filter_layout (,,, type layouts
	(= type (:: type int_type))
	(= layouts (:: layouts array_type))
	(= out (. ui_layout_type
		TYPE_FILTER
	))
	(= out$filter (. ui_layout_filter_type
		type
		layouts
	))
	(@@ out)
))

(= create_range_layout (,,, min value max
	(= min (:: min ui_layout_type))
	(= value (:: value ui_layout_type))
	(= max (:: max ui_layout_type))
	(= out (. ui_layout_type
		TYPE_RANGE
	))
	(= out$range (. ui_layout_range_type
		min
		value
		max
	))
	(@@ out)
))

(= create_standard_layout (,,, multiplier bias
	(= multiplier (:: multiplier float_type))
	(= bias (:: bias float_type))
	(= out (. ui_layout_type
		TYPE_STANDARD
	))
	(= out$standard (. ui_layout_standard_type
		multiplier
		bias
	))
	(@@ out)
))

(= dump_to_json (,,, layout
	(? (! layout) (@@ nil))
	(= layout (:: layout ui_layout_type))
	(= out <
		"type" (: _type_to_string layout$type)
	>)
	(?? layout$type
		TYPE_STANDARD {
			(? layout$standard$multiplier (= out$multiplier layout$standard$multiplier))
			(? layout$standard$bias (= out$bias layout$standard$bias))
		}
		TYPE_FILTER {
			(= out$filter (: _filter_type_to_string layout$filter$type))
			(= out$values ([> (= i 0) (< i ($ layout$filter$layouts))
				(= value (: layout$filter$layouts i))
				(++ i)
				(<- dump_to_json value)
			))
		}
		TYPE_RANGE {
			(= out$min (<- dump_to_json layout$range$min))
			(= out$value (<- dump_to_json layout$range$value))
			(= out$max (<- dump_to_json layout$range$max))
		}
	)
	(@@ out)
))

(= solve (,,, layout offset size
	(?? layout$type
		TYPE_STANDARD (@@ (+ offset (* layout$standard$multiplier size) layout$standard$bias))
		TYPE_FILTER {
			(= out nil)
			(-> (= i 0) (< i ($ layout$filter$layouts))
				(= value (<- solve (: layout$filter$layouts i) offset size))
				(?
					(||
						(! i)
						(&& (=== layout$filter$type FILTER_LOWEST) (< value out))
						(&& (=== layout$filter$type FILTER_HIGHEST) (> value out))
					) (= out value)
					(=== layout$filter$type FILTER_AVERAGE) (= out (+ out value))
				)
				(++ i)
			)
			(? (&&
				(=== layout$filter$type FILTER_AVERAGE)
				layout$filter$layouts
			) (= out (/ out ($ layout$filter$layouts))))
			(@@ out)
		}
		TYPE_RANGE {
			(= min (<- solve (: layout$range$min) offset size))
			(= value (<- solve (: layout$range$value) offset size))
			(= max (<- solve (: layout$range$max) offset size))
			(? (< max min) {
				(= temp max)
				(= max min)
				(= min temp)
			})
			(? (< value min) (= value min))
			(? (> value max) (= value max))
			(@@ value)
		}
	)
	(:> "Unknown layout: " layout '\n')
	(@@ (+ offset (/ size 2)))
))



(= ui:layout (. ui_layout_module_type
	ui_layout_type
	FILTER_AVERAGE
	FILTER_HIGHEST
	FILTER_LOWEST
	TYPE_FILTER
	TYPE_RANGE
	TYPE_STANDARD
	create_filter_layout
	create_range_layout
	create_standard_layout
	dump_to_json
	solve
))
(## ui:layout)
