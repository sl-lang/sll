(---
	"gfx/buffer.sll"
	"gfx/color.sll"
	"gfx/context.sll"
	"gfx/data_type.sll"
	"gfx/pipeline.sll"
	"gfx/shader.sll"
	"gfx/stage.sll"
	"string.sll"
	"types.sll"
	"ui/_ui_type.sll"
	"ui/_util.sll"
	"ui/element.sll"
	"ui/element/container.sll"
	"ui/layout.sll"
	"ui/shader/_color_fragment_shader.sll"
	"ui/shader/_color_vertex_shader.sll"
	"weakref.sll"
	"window_manager/event.sll"
	"window_manager/window.sll"
)



(= ui_core_module_type (&:
	(~ type_type) ui_type
	(~ func_type) create
	(~ func_type) set_background
	(~ func_type) update
))



(= _window_to_ui <>)

(= MAX_TEXTURE_COUNT 4096)



(= _window_button_callback (,,, window button state
	(= ui (<- weakref$get_default (: _window_to_ui window$id)))
	(? (! ui) (@@))
	(-> (= i 0) (< i ($ ui$_event_targets$button))
		(= target (: ui$_event_targets$button i))
		(<- target$callback target$element button state)
		(++ i)
	)
))

(= _window_key_callback (,,, window key state
	(= ui (<- weakref$get_default (: _window_to_ui window$id)))
	(? (! ui) (@@))
	(-> (= i 0) (< i ($ ui$_event_targets$key))
		(= target (: ui$_event_targets$key i))
		(<- target$callback target$element key state)
		(++ i)
	)
))

(= _window_mouse_callback (,,, window x y
	(= ui (<- weakref$get_default (: _window_to_ui window$id)))
	(? (! ui) (@@))
	(-> (= i 0) (< i ($ ui$_event_targets$mouse))
		(= target (: ui$_event_targets$mouse i))
		(<- target$callback target$element x y)
		(++ i)
	)
))

(= _window_resize_callback (,,, window width height
	(= ui (<- weakref$get_default (: _window_to_ui window$id)))
	(? (! ui) (@@))
	(<- _update_ui_uniform_buffer ui)
	(= ui$root$base$position$width_layout$standard$bias width)
	(= ui$root$base$position$height_layout$standard$bias height)
	(<- ui:element$update ui$root)
))

(= create (,,, window
	(? (! window) (@@ nil))
	(= window (:: window window_manager:window$window_manager_window_type))
	(= ctx (<- gfx:context$create window true))
	(= vertex_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_VERTEX gfx:buffer$DATA_TYPE_FLOAT32))
	(<- gfx:buffer$hint_update_frequency vertex_buffer gfx:buffer$FREQUENCY_LOW)
	(= index_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_INDEX gfx:buffer$DATA_TYPE_UINT16))
	(<- gfx:buffer$hint_update_frequency index_buffer gfx:buffer$FREQUENCY_LOW)
	(= uniform_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_UNIFORM gfx:buffer$DATA_TYPE_FLOAT32 [
		1.0 0.0 0.0 -1.0
		0.0 1.0 0.0 -1.0
		0.0 0.0 1.0 1.0
		0.0 0.0 0.0 1.0
	] true))
	(<- gfx:buffer$hint_update_frequency uniform_buffer gfx:buffer$FREQUENCY_MEDIUM)
	(= pipeline (<- gfx:pipeline$create ctx (. gfx:pipeline$gfx_pipeline_config_type
		gfx:pipeline$TOPOLOGY_TRIANGLE_LIST
		[
			[
				[
					0
					0
					0
					(| gfx:data_type$SIZE_32BIT gfx:data_type$COUNT_3 gfx:data_type$TYPE_FLOAT)
				]
				[
					0
					1
					12
					(| gfx:data_type$SIZE_32BIT gfx:data_type$COUNT_3 gfx:data_type$TYPE_FLOAT)
				]
			]
			24
		]
		[
			[
				gfx:pipeline$DESCRIPTOR_TYPE_UNIFORM_BUFFER
				0
				gfx:stage$STAGE_VERTEX
				uniform_buffer
			]
			[
				gfx:pipeline$DESCRIPTOR_TYPE_SAMPLER
				1
				gfx:stage$STAGE_FRAGMENT
				MAX_TEXTURE_COUNT
			]
		]
		[
			gfx:pipeline$POLYGON_MODE_FILL
			gfx:pipeline$FRONT_FACE_COUNTER_CLOCKWISE
			gfx:pipeline$CULL_MODE_BACK
		]
		[
			(<- gfx:shader$create
				ctx
				_COLOR_VERTEX_SHADER
				gfx:stage$STAGE_VERTEX
				"main"
			)
			(<- gfx:shader$create
				ctx
				_COLOR_FRAGMENT_SHADER
				gfx:stage$STAGE_FRAGMENT
				"main"
			)
		]
	))
	(= out (. ui_type
		window
		nil
		ctx
		vertex_buffer
		index_buffer
		uniform_buffer
		0
		pipeline
		1
		[
			[]
			[]
			[]
		]
	))
	(= out$root (<- ui:element:container$create
		out
		[
			(<- ui:layout$create_standard_layout 0 0)
			(<- ui:layout$create_standard_layout 0 0)
			(<- ui:layout$create_standard_layout 0 window$layout$geometry$width)
			(<- ui:layout$create_standard_layout 0 window$layout$geometry$height)
		]
	))
	(= out$root$base$z_index 0)
	(<- ui:element$update out$root)
	(<- _update_ui_uniform_buffer out)
	(= window$callbacks$button _window_button_callback)
	(= window$callbacks$key _window_key_callback)
	(= window$callbacks$mouse _window_mouse_callback)
	(= window$callbacks$size _window_resize_callback)
	(= (: _window_to_ui window$id) (<- weakref$ref out))
	(@@ out)
))

(= set_background (,,, ui color
	(? (! ui) (@@))
	(= ui (:: ui ui_type))
	(<- gfx:color$set_clear_color ui$context color)
))

(= update (,,, ui blocking?
	(? (! ui) (@@))
	(= ui (:: ui ui_type))
	(? ui$_buffer_update_flags {
		(? (& ui$_buffer_update_flags UI_BUFFER_UPDATE_FLAG_VERTEX) (<- gfx:buffer$sync ui$_vertex_buffer))
		(? (& ui$_buffer_update_flags UI_BUFFER_UPDATE_FLAG_INDEX) (<- gfx:buffer$sync ui$_index_buffer))
		(? (& ui$_buffer_update_flags UI_BUFFER_UPDATE_FLAG_UNIFORM) (<- gfx:buffer$sync ui$_uniform_buffer))
		(= ui$_buffer_update_flags 0)
	})
	(<- gfx:pipeline$use ui$_pipeline)
	(<- gfx:buffer$use ui$_vertex_buffer)
	(<- gfx:buffer$use ui$_index_buffer)
	(<- gfx:buffer$draw ui$_index_buffer)
	(-> (= i 0) (< i ($ ui$_textures))
		(= texture (: ui$_textures i))
		(? texture$_buffer_update_flags {
			(? (& texture$_buffer_update_flags UI_BUFFER_UPDATE_FLAG_VERTEX) (<- gfx:buffer$sync texture$_vertex_buffer))
			(? (& texture$_buffer_update_flags UI_BUFFER_UPDATE_FLAG_INDEX) (<- gfx:buffer$sync texture$_index_buffer))
			(= texture$_buffer_update_flags 0)
		})
		(<- gfx:buffer$use texture$_vertex_buffer)
		(<- gfx:buffer$use texture$_index_buffer)
		(<- gfx:buffer$draw texture$_index_buffer)
		(++ i)
	)
	(<- gfx:context$render ui$context)
	(<- window_manager:event$poll (!! blocking?))
))



(= ui:core (. ui_core_module_type
	ui_type
	create
	set_background
	update
))
(## ui:core)
