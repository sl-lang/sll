(---
	"array.sll"
	"data_file.sll"
	"file.sll"
	"gfx/buffer.sll"
	"sys.sll"
	"types.sll"
	"ui/_element_types.sll"
	"ui/core.sll"
	"ui/layout.sll"
	"ui/texture.sll"
)



(= ui_serialize_module_type (&:
	(~ func_type) serialize
))



(= DATA_TYPE_INT 0)
(= DATA_TYPE_FLOAT 1)
(= DATA_TYPE_ARRAY 2)
(= DATA_TYPE_LAYOUT 3)
(= DATA_TYPE_TEXTURE 4)

(= _buffer_type_to_writer_function <
	gfx:buffer$DATA_TYPE_UINT8 data_file$write_byte
	gfx:buffer$DATA_TYPE_UINT16 data_file$write_word
	gfx:buffer$DATA_TYPE_FLOAT16 (,,, (:> "Unimplemented!\n"))
	gfx:buffer$DATA_TYPE_UINT32 data_file$write_dword
	gfx:buffer$DATA_TYPE_FLOAT32 data_file$write_float
	gfx:buffer$DATA_TYPE_UINT64 data_file$write_qword
	gfx:buffer$DATA_TYPE_FLOAT64 data_file$write_double
>)



(= _serialize_layout (,,, layout out
	(<- data_file$write_byte out layout$type)
	(?? layout$type
		ui:layout$TYPE_STANDARD {
			(<- data_file$write_float out layout$standard$multiplier)
			(<- data_file$write_float out layout$standard$bias)
		}
		ui:layout$TYPE_FILTER {
			(<- data_file$write_byte out layout$filter$type)
			(-> (= i 0) (< i ($ layout$filter$values))
				(<- _serialize_layout (: layout$filter$values i))
				(++ i)
			)
		}
		ui:layout$TYPE_RANGE {
			(<- _serialize_layout layout$range$min)
			(<- _serialize_layout layout$range$value)
			(<- _serialize_layout layout$range$max)
		}
	)
))

(= _serialize_data (,,, data used_textures out
	(?? (:? data)
		int_type {
			(<- data_file$write_byte out DATA_TYPE_INT)
			(<- data_file$write_sqword out data)
		}
		float_type {
			(<- data_file$write_byte out DATA_TYPE_FLOAT)
			(<- data_file$write_float out data)
		}
		array_type {
			(<- data_file$write_byte out DATA_TYPE_ARRAY)
			(? (> ($ data) 0xffff) (:> "Array too long to serialize!\n"))
			(<- data_file$write_word out ($ data))
			(-> (= i 0) (< i ($ data))
				(<- _serialize_data (: data i) used_textures out)
				(++ i)
			)
		}
		ui:layout$ui_layout_type {
			(<- data_file$write_byte out DATA_TYPE_LAYOUT)
			(<- _serialize_layout data out)
		}
		ui:texture$ui_texture_type {
			(<- data_file$write_byte out DATA_TYPE_TEXTURE)
			(= i 0)
			(-> nil (< i ($ used_textures))
				(? (=== (%% (: used_textures i)) (%% data)) (@))
				(++ i)
			)
			(? (=== i ($ used_textures)) (<- array$push used_textures data))
			(<- data_file$write_word out i)
		}
		(:> "Unable to serialize type: " (&:? (:? data)) '\n')
	)
))

(= _serialize_element (,,, element used_element_types used_textures out
	(= type_data (: _element_type_data (:? element)))
	(= type_idx (<- array$index used_element_types type_data$name))
	(? (=== type_idx -1) {
		(= type_idx ($ used_element_types))
		(<- array$push used_element_types type_data$name)
	})
	(<- data_file$write_word out type_idx)
	(<- _serialize_layout element$base$position$x_layout out)
	(<- _serialize_layout element$base$position$y_layout out)
	(<- _serialize_layout element$base$position$width_layout out)
	(<- _serialize_layout element$base$position$height_layout out)
	(= data (<- type_data$callbacks$serialize element))
	(? (!== data nil) (<- _serialize_data data used_textures out))
	(<- data_file$write_word out ($ element$base$children))
	(-> (= i 0) (< i ($ element$base$children))
		(<- _serialize_element (: element$base$children i) used_element_types used_textures out)
		(++ i)
	)
))

(= serialize (,,, ui
	(? (! ui) (@@ ""))
	(= ui (:: ui ui:core$ui_type))
	(= out (<- file$from_data "" file$FLAG_WRITE))
	(<- data_file$write_dword out (|
		(<< sys$VERSION$major 24)
		(<< sys$VERSION$minor 16)
		sys$VERSION$patch
	))
	(= title (: ui$window$layout$title 0 0xffff))
	(<- data_file$write_word out ($ title))
	(<- file$write out title)
	(= used_element_types [])
	(= used_textures [])
	(= data (<- file$from_data "" file$FLAG_WRITE))
	(<- _serialize_element ui$root used_element_types used_textures data)
	(<- data_file$write_word out ($ used_element_types))
	(-> (= i 0) (< i ($ used_element_types))
		(= element_type (: used_element_types i))
		(<- data_file$write_byte out ($ element_type))
		(<- file$write out element_type)
		(++ i)
	)
	(<- data_file$write_word out ($ used_textures))
	(-> (= i 0) (< i ($ used_textures))
		(= texture (: used_textures i))
		(<- data_file$write_word out (: texture$texture$size 0))
		(<- data_file$write_word out (: texture$texture$size 1))
		(<- data_file$write_byte out texture$texture$data_type)
		(<- data_file$write_byte out texture$texture$buffer$data_type)
		(<- data_file$write_dword out ($ texture$texture$buffer$data))
		(= write_fn (: _buffer_type_to_writer_function texture$texture$buffer$data_type))
		(-> (= j 0) (< j ($ texture$texture$buffer$data))
			(<- write_fn out (: texture$texture$buffer$data j))
			(++ j)
		)
		(<- file$write out texture$texture$buffer$data)
		(<- data_file$write_byte out texture$sampler$config$upscale_filter)
		(<- data_file$write_byte out texture$sampler$config$downscale_filter)
		(<- data_file$write_byte out texture$sampler$config$address_mode_x)
		(<- data_file$write_byte out texture$sampler$config$address_mode_y)
		(<- data_file$write_byte out texture$sampler$config$address_mode_z)
		(++ i)
	)
	(@@ (+
		(<- file$get_buffer out)
		(<- file$get_buffer data)
	))
))



(= ui:serialize (. ui_serialize_module_type
	serialize
))
(## ui:serialize)
