(---
	"array.sll"
	"data_file.sll"
	"file.sll"
	"gfx/buffer.sll"
	"gfx/sampler.sll"
	"gfx/texture.sll"
	"sys.sll"
	"types.sll"
	"ui/_element_types.sll"
	"ui/_util.sll"
	"ui/core.sll"
	"ui/element.sll"
	"ui/layout.sll"
	"ui/position.sll"
	"ui/rgb.sll"
	"ui/texture.sll"
	"weakref.sll"
	"window_manager/window.sll"
)



(= ui_serialize_module_type (&:
	(~ func_type) deserialize
	(~ func_type) serialize
))



(= DATA_TYPE_INT 0)
(= DATA_TYPE_INT_ZERO 1)
(= DATA_TYPE_INT_ONE 2)
(= DATA_TYPE_FLOAT 3)
(= DATA_TYPE_FLOAT_ZERO 4)
(= DATA_TYPE_ARRAY 5)
(= DATA_TYPE_LAYOUT 6)
(= DATA_TYPE_TEXTURE 7)
(= DATA_TYPE_RGB 8)
(= DATA_TYPE_POSITION 9)
(= DATA_TYPE_RGB_COMPRESSED 10)
(= DATA_TYPE_RGB_COMPRESSED_HIGH 11)

(= LAYOUT_TYPE_MASK 63)

(= LAYOUT_FLAG_MULITPLIER 64)
(= LAYOUT_FLAG_BIAS 128)

(= COLOR_COMPRESSION_LOW 0)
(= COLOR_COMPRESSION_MEDIUM 1)
(= COLOR_COMPRESSION_HIGH 2)

(= _buffer_type_to_writer_function <
	gfx:buffer$DATA_TYPE_UINT8 data_file$write_byte
	gfx:buffer$DATA_TYPE_UINT16 data_file$write_word
	gfx:buffer$DATA_TYPE_FLOAT16 (,,, (:> "Unimplemented!\n"))
	gfx:buffer$DATA_TYPE_UINT32 data_file$write_dword
	gfx:buffer$DATA_TYPE_FLOAT32 data_file$write_float
	gfx:buffer$DATA_TYPE_UINT64 data_file$write_qword
	gfx:buffer$DATA_TYPE_FLOAT64 data_file$write_double
>)

(= _buffer_type_to_reader_function <
	gfx:buffer$DATA_TYPE_UINT8 data_file$read_byte
	gfx:buffer$DATA_TYPE_UINT16 data_file$read_word
	gfx:buffer$DATA_TYPE_FLOAT16 (,,, (:> "Unimplemented!\n"))
	gfx:buffer$DATA_TYPE_UINT32 data_file$read_dword
	gfx:buffer$DATA_TYPE_FLOAT32 data_file$read_float
	gfx:buffer$DATA_TYPE_UINT64 data_file$read_qword
	gfx:buffer$DATA_TYPE_FLOAT64 data_file$read_double
>)

(= _ui_version (|
	(<< sys$VERSION$major 24)
	(<< sys$VERSION$minor 16)
	sys$VERSION$patch
))



(= _deserialize_layout (,,, stream
	(= type (<- data_file$read_byte stream))
	(= out (. ui:layout$ui_layout_type
		(& type LAYOUT_TYPE_MASK)
	))
	(?? out$type
		ui:layout$TYPE_STANDARD {
			(? (& type LAYOUT_FLAG_MULITPLIER) (= out$standard$multiplier (<- data_file$read_float stream)))
			(? (& type LAYOUT_FLAG_BIAS) (= out$standard$bias (<- data_file$read_float stream)))
		}
		ui:layout$TYPE_FILTER {
			(= out$filter$type (<- data_file$read_byte stream))
			(= out$filter$values (<- array$create (<- data_file$read_byte stream)))
			(-> (= i 0) (< i ($ out$filter$values))
				(= (: out$filter$values i) (<- _deserialize_layout stream))
				(++ i)
			)
		}
		ui:layout$TYPE_RANGE {
			(= out$range$min (<- _deserialize_layout stream))
			(= out$range$value (<- _deserialize_layout stream))
			(= out$range$max (<- _deserialize_layout stream))
		}
	)
	(@@ out)
))

(= _serialize_layout (,,, layout out
	(<- data_file$write_byte out (|
		layout$type
		(* LAYOUT_FLAG_MULITPLIER (!! (&& (=== layout$type ui:layout$TYPE_STANDARD) layout$standard$multiplier)))
		(* LAYOUT_FLAG_BIAS (!! (&& (=== layout$type ui:layout$TYPE_STANDARD) layout$standard$bias)))
	))
	(?? layout$type
		ui:layout$TYPE_STANDARD {
			(? layout$standard$multiplier (<- data_file$write_float out layout$standard$multiplier))
			(? layout$standard$bias (<- data_file$write_float out layout$standard$bias))
		}
		ui:layout$TYPE_FILTER {
			(<- data_file$write_byte out layout$filter$type)
			(<- data_file$write_byte out ($ layout$filter$values))
			(-> (= i 0) (< i ($ layout$filter$values))
				(<- _serialize_layout (: layout$filter$values i) out)
				(++ i)
			)
		}
		ui:layout$TYPE_RANGE {
			(<- _serialize_layout layout$range$min out)
			(<- _serialize_layout layout$range$value out)
			(<- _serialize_layout layout$range$max out)
		}
	)
))

(= _deserialize_data (,,, stream used_textures
	(= type (<- data_file$read_byte stream))
	(?? type
		DATA_TYPE_INT (@@ (<- data_file$read_sqword stream))
		DATA_TYPE_INT_ZERO (@@ 0)
		DATA_TYPE_INT_ONE (@@ 1)
		DATA_TYPE_FLOAT (@@ (<- data_file$read_float stream))
		DATA_TYPE_FLOAT_ZERO (@@ 0.0)
		DATA_TYPE_ARRAY {
			(= out (<- array$create (<- data_file$read_word stream)))
			(-> (= i 0) (< i ($ out))
				(= (: out i) (<- _deserialize_data stream used_textures))
				(++ i)
			)
			(@@ out)
		}
		DATA_TYPE_LAYOUT (@@ (<- _deserialize_layout stream))
		DATA_TYPE_TEXTURE (@@ (: used_textures (<- data_file$read_word stream)))
		DATA_TYPE_RGB (@@ (. ui:rgb$ui_rgb_type
			(<- data_file$read_float stream)
			(<- data_file$read_float stream)
			(<- data_file$read_float stream)
		))
		DATA_TYPE_POSITION (@@ (. ui:position$ui_position_type
			0
			0
			0
			0
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
		))
		DATA_TYPE_RGB_COMPRESSED (@@ (. ui:rgb$ui_rgb_type
			(/ (<- data_file$read_word stream) 65535)
			(/ (<- data_file$read_word stream) 65535)
			(/ (<- data_file$read_word stream) 65535)
		))
		DATA_TYPE_RGB_COMPRESSED_HIGH (@@ (. ui:rgb$ui_rgb_type
			(/ (<- data_file$read_byte stream) 255)
			(/ (<- data_file$read_byte stream) 255)
			(/ (<- data_file$read_byte stream) 255)
		))
	)
	(!@@ 1)
))

(= _serialize_data (,,, data used_textures color_compression_level out
	(<- file$write out " ")
	(?? (:? data)
		int_type {
			(?:
				(! data) (<- data_file$write_byte out DATA_TYPE_INT_ZERO)
				(=== data 1) (<- data_file$write_byte out DATA_TYPE_INT_ONE)
				{
					(<- data_file$write_byte out DATA_TYPE_INT)
					(<- data_file$write_sqword out data)
				}
			)
		}
		float_type {
			(? data {
				(<- data_file$write_byte out DATA_TYPE_FLOAT)
				(<- data_file$write_float out data)
			} (<- data_file$write_byte out DATA_TYPE_FLOAT_ZERO))
		}
		array_type {
			(<- data_file$write_byte out DATA_TYPE_ARRAY)
			(? (> ($ data) 0xffff) (:> "Array too long to serialize!\n"))
			(<- data_file$write_word out ($ data))
			(-> (= i 0) (< i ($ data))
				(<- _serialize_data (: data i) used_textures color_compression_level out)
				(++ i)
			)
		}
		ui:layout$ui_layout_type {
			(<- data_file$write_byte out DATA_TYPE_LAYOUT)
			(<- _serialize_layout data out)
		}
		ui:texture$ui_texture_type {
			(<- data_file$write_byte out DATA_TYPE_TEXTURE)
			(= i 0)
			(-> nil (< i ($ used_textures))
				(? (=== (%% (: used_textures i)) (%% data)) (@))
				(++ i)
			)
			(? (=== i ($ used_textures)) (<- array$push used_textures data))
			(<- data_file$write_word out i)
		}
		ui:rgb$ui_rgb_type {
			(?? color_compression_level
				COLOR_COMPRESSION_LOW {
					(<- data_file$write_byte out DATA_TYPE_RGB)
					(<- data_file$write_float out data$red)
					(<- data_file$write_float out data$green)
					(<- data_file$write_float out data$blue)
				}
				COLOR_COMPRESSION_MEDIUM{
					(<- data_file$write_byte out DATA_TYPE_RGB_COMPRESSED)
					(<- data_file$write_word out (:: (* data$red 65535) int_type))
					(<- data_file$write_word out (:: (* data$green 65535) int_type))
					(<- data_file$write_word out (:: (* data$blue 65535) int_type))
				}
				COLOR_COMPRESSION_HIGH {
					(<- data_file$write_byte out DATA_TYPE_RGB_COMPRESSED_HIGH)
					(<- data_file$write_byte out (:: (* data$red 255) int_type))
					(<- data_file$write_byte out (:: (* data$green 255) int_type))
					(<- data_file$write_byte out (:: (* data$blue 255) int_type))
				}
			)
		}
		ui:position$ui_position_type {
			(<- data_file$write_byte out DATA_TYPE_POSITION)
			(<- _serialize_layout data$x_layout out)
			(<- _serialize_layout data$y_layout out)
			(<- _serialize_layout data$width_layout out)
			(<- _serialize_layout data$height_layout out)
		}
		(:> "Unable to serialize type: " (&:? (:? data)) '\n')
	)
))

(= _deserialize_element (,,, stream ui parent used_element_types used_textures
	(= type (: used_element_types (<- data_file$read_word stream)))
	(= data (: _element_type_data type))
	(= base (. ui:element$ui_element_type
		ui
		(<- data_file$read_word stream)
		nil
		[
			0
			0
			0
			0
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
			(<- _deserialize_layout stream)
		]
		[]
		0
		[]
	))
	(= out (<- data$callbacks$deserialize ui base parent (<- _deserialize_data stream used_textures)))
	(? (! out) {
		(= out (. type base))
		(<- ui:element$set_parent out parent)
	})
	(? (<= ($ ui$_elements) base$id) (<- array$extend ui$_elements (<- array$create (- base$id ($ ui$_elements) -1))))
	(= (: ui$_elements base$id) (<- weakref$ref out))
	(<- _setup_element out)
	(= child_count (<- data_file$read_word stream))
	(-> (= i 0) (< i child_count)
		(<- _deserialize_element stream ui out used_element_types used_textures)
		(++ i)
	)
	(@@ out)
))

(= _serialize_element (,,, element used_element_types used_textures out
	(= type_data (: _element_type_data (:? element)))
	(= type_idx (<- array$index used_element_types type_data$name))
	(? (=== type_idx -1) {
		(= type_idx ($ used_element_types))
		(<- array$push used_element_types type_data$name)
	})
	(<- data_file$write_word out type_idx)
	(<- data_file$write_word out element$base$id)
	(<- _serialize_layout element$base$position$x_layout out)
	(<- _serialize_layout element$base$position$y_layout out)
	(<- _serialize_layout element$base$position$width_layout out)
	(<- _serialize_layout element$base$position$height_layout out)
	(<- _serialize_data (<- type_data$callbacks$serialize element) used_textures COLOR_COMPRESSION_HIGH out)
	(<- data_file$write_word out ($ element$base$children))
	(-> (= i 0) (< i ($ element$base$children))
		(<- _serialize_element (: element$base$children i) used_element_types used_textures out)
		(++ i)
	)
))

(= deserialize (,,, data
	(? (! data) (@@ nil))
	(= data (:: data string_type))
	(= stream (<- file$from_data data file$FLAG_READ))
	(? (!== (<- data_file$read_dword stream) _ui_version) (@@ nil))
	(= width (<- data_file$read_word stream))
	(= height (<- data_file$read_word stream))
	(= title (<- file$read stream (<- data_file$read_byte stream)))
	(= out (<- ui:core$create (<- window_manager:window$create [0 0 width height] nil title true)))
	(<- ui:core$set_background out [
		(<- data_file$read_float stream)
		(<- data_file$read_float stream)
		(<- data_file$read_float stream)
	])
	(= used_element_types (<- array$create (<- data_file$read_word stream)))
	(-> (= i 0) (< i ($ used_element_types))
		(= name (<- file$read stream (<- data_file$read_byte stream)))
		(= type (: _element_name_to_type name))
		(? (! type) (:> "Unknown element type: '" name "'\n"))
		(= (: used_element_types i) type)
		(++ i)
	)
	(= used_textures (<- array$create (<- data_file$read_word stream)))
	(-> (= i 0) (< i ($ used_textures))
		(= width (<- data_file$read_word stream))
		(= height (<- data_file$read_word stream))
		(= data_type (<- data_file$read_byte stream))
		(= buffer_data_type (<- data_file$read_byte stream))
		(= buffer_data (<- array$create (<- data_file$read_dword stream)))
		(= read_fn (: _buffer_type_to_reader_function buffer_data_type))
		(-> (= j 0) (< j ($ buffer_data))
			(= (: buffer_data j) (<- read_fn stream))
			(++ j)
		)
		(= texture (<- gfx:texture$create out$context [width height] data_type (<- gfx:buffer$create out$context gfx:buffer$TYPE_TEXTURE buffer_data_type buffer_data true)))
		(= sampler (<- gfx:sampler$create out$context (. gfx:sampler$gfx_sampler_config_type
			(<- data_file$read_byte stream)
			(<- data_file$read_byte stream)
			(<- data_file$read_byte stream)
			(<- data_file$read_byte stream)
			(<- data_file$read_byte stream)
		)))
		(= (: used_textures i) (<- ui:texture$create out texture sampler))
		(++ i)
	)
	(= name_count (<- data_file$read_word stream))
	(-> (= i 0) (< i name_count)
		(= name (<- file$read stream (<- data_file$read_byte stream)))
		(= id (<- data_file$read_byte stream))
		(= (: out$_element_to_name id) name)
		(++ i)
	)
	(= out$root (<- _deserialize_element stream out nil used_element_types used_textures))
	(= id_list (:: out$_element_to_name map_key_type))
	(-> (= i 0) (< i ($ id_list))
		(= id (: id_list i))
		(= (: out$_name_to_element (: out$_element_to_name id)) (: out$_elements id))
		(++ i)
	)
	(@@ out)
))

(= serialize (,,, ui
	(? (! ui) (@@ ""))
	(= ui (:: ui ui:core$ui_type))
	(= out (<- file$from_data "" file$FLAG_WRITE))
	(<- data_file$write_dword out _ui_version)
	(<- data_file$write_word out ui$window$layout$geometry$width)
	(<- data_file$write_word out ui$window$layout$geometry$height)
	(= title (: ui$window$layout$title 0 0xff))
	(<- data_file$write_byte out ($ title))
	(<- file$write out title)
	(<- data_file$write_float out ui$context$clear_color$red)
	(<- data_file$write_float out ui$context$clear_color$green)
	(<- data_file$write_float out ui$context$clear_color$blue)
	(= used_element_types [])
	(= used_textures [])
	(= data (<- file$from_data "" file$FLAG_WRITE))
	(<- _serialize_element ui$root used_element_types used_textures data)
	(= root (<- file$get_buffer data))
	(<- data_file$write_word out ($ used_element_types))
	(-> (= i 0) (< i ($ used_element_types))
		(= element_type (: used_element_types i))
		(<- data_file$write_byte out ($ element_type))
		(<- file$write out element_type)
		(++ i)
	)
	(<- data_file$write_word out ($ used_textures))
	(-> (= i 0) (< i ($ used_textures))
		(= texture (: used_textures i))
		(<- data_file$write_word out (: texture$texture$size 0))
		(<- data_file$write_word out (: texture$texture$size 1))
		(<- data_file$write_byte out texture$texture$data_type)
		(<- data_file$write_byte out texture$texture$buffer$data_type)
		(<- data_file$write_dword out ($ texture$texture$buffer$data))
		(= write_fn (: _buffer_type_to_writer_function texture$texture$buffer$data_type))
		(-> (= j 0) (< j ($ texture$texture$buffer$data))
			(<- write_fn out (: texture$texture$buffer$data j))
			(++ j)
		)
		(<- data_file$write_byte out texture$sampler$config$upscale_filter)
		(<- data_file$write_byte out texture$sampler$config$downscale_filter)
		(<- data_file$write_byte out texture$sampler$config$address_mode_x)
		(<- data_file$write_byte out texture$sampler$config$address_mode_y)
		(<- data_file$write_byte out texture$sampler$config$address_mode_z)
		(++ i)
	)
	(= names (:: ui$_name_to_element map_key_type))
	(<- data_file$write_word out ($ names))
	(-> (= i 0) (< i ($ names))
		(= name (: names i))
		(= element (<- weakref$get_default (: ui$_name_to_element name)))
		(? (! element) (<<<))
		(<- data_file$write_byte out ($ name))
		(<- file$write out name)
		(<- data_file$write_byte out element$base$id)
		(++ i)
	)
	(@@ (+
		(<- file$get_buffer out)
		root
	))
))



(= ui:serialize (. ui_serialize_module_type
	deserialize
	serialize
))
(## ui:serialize)
