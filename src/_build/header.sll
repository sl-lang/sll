(---
	"@build-script/config.sll"
	"@build-script/documentation.sll"
	"@build-script/util.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"path.sll"
	"string.sll"
	"sys.sll"
	"types.sll"
)



(= type_requirement_data_type (&:
	(~ object_type) symbol
	(~ array_type) requirements
	int_type added
))

(= resolved_type_list_type (&:
	(~ array_type) types
	(~ array_type) type_names
))

(= header_module_type (&:
	(~ func_type) generate_error_headers
	(~ func_type) generate_library_header
))



(= IDENTIFIER_CHARACTERS "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_")



(= _write_byte_array (,,, fh data
	(= data (:: data string_type))
	(-> (= i 0) (< i ($ data))
		(? i {
			(<- file$write fh ',')
			(? (! (% i config$BYTE_ARRAY_WRAP_SIZE)) (<- file$write fh "\n\t"))
		})
		(<- file$write fh (<- string$format "0x%.2x" (: data i)))
		(++ i)
	)
))

(= _format_type (,,, type name
	(= replace (:: config$TYPE_REPLACEMENTS array_type))
	(-> (= i 0) (< i ($ replace))
		(= type (<- string$replace
			type
			(: replace i)
			(: replace (+ i 1))
		))
		(= i (+ i 2))
	)
	(? (=== name nil) (@@ type))
	(= bracked_idx (<- string$index type '['))
	(@@ (?: (=== bracked_idx -1)
		(+
			type
			' '
			name
		)
		(+
			(: type 0 bracked_idx)
			' '
			name
			'['
			(: type (+ bracked_idx 1) -1)
			']'
		)
	))
))

(= _parse_requirements (,,, symbol struct_decl_list
	(= type_list (?: (& symbol$flags documentation$FLAG_VAR)
		[symbol$type$type]
		([> (= i 0) (< i ($ symbol$args))
			(= arg (: symbol$args i))
			(++ i)
			arg$type
		)
	))
	(? (& symbol$flags documentation$FLAG_FUNC) (<- array$push type_list symbol$return$type))
	(= out [])
	(-> (= i 0) (< i ($ type_list))
		(= type (<- string$replace
			(<- string$replace
				(: type_list i)
				"const"
				""
			)
			'*'
			""
		))
		(= bracked_idx (<- string$index type '['))
		(? (!== bracked_idx -1) (= type (: type 0 bracked_idx)))
		(= type (<- string$trim type))
		(? (<- string$starts type "struct ") {
			(? (! (|: struct_decl_list type)) (<- array$push struct_decl_list type))
		} {
			(? (&&
				(! (|: config$BUILTIN_TYPES type))
				(! (|: out type))
			) (<- array$push out type))
		})
		(++ i)
	)
	(@@ out)
))

(= _add_type (,,, out name types
	(? (|: out$type_names name) (@@))
	(= type (: types name))
	(? (! type) {
		(:> "Unknown type: " name '\n')
		(<- util$fail_and_exit)
	})
	(-> (= i 0) (< i ($ type$requirements))
		(<- _add_type out (: type$requirements i) types)
		(++ i)
	)
	(<- array$push out$types type$symbol)
	(<- array$push out$type_names name)
))

(= _resolve_requirements (,,, types
	(= out (. resolved_type_list_type
		[]
		[]
	))
	(= names (:: types map_key_type))
	(-> (= i 0) (< i ($ names))
		(= name (: names i))
		(= type (: types name))
		(? (! type$added) (<- _add_type out name types))
		(++ i)
	)
	(@@ out$types)
))

(= generate_error_headers (,,,
	(<- log$log "Generating " ($ config$ERROR_HEADERS) " error headers...")
	(-> (= i 0) (< i ($ config$ERROR_HEADERS))
		(= name (: config$ERROR_HEADERS i))
		(= src (+ config$ERROR_HEADER_SOURCE_DIRECTORY_PATH name))
		(= dst (+
			config$ERROR_HEADER_OUTPUT_DIRECTORY_PATH
			(: name 0 -4)
			".h"
		))
		(<- log$log "  Convering '" src "' to '" dst "' ...")
		(= data (<- string$split
			(<- string$replace
				(<- file$read
					(<- file$open src "r")
				)
				"\r\n"
				'\n'
			)
			"$$$"
		)
		(= fh (<- file$open dst "w"))
		(= name (<- string$upper_case (: name 0 (<- string$index name '.'))))
		(? (=== ($ data) 1) {
			(<- file$write fh
`#ifndef __SLL_GENERATED_` name `_H__
#define __SLL_GENERATED_` name `_H__ 1
#include <sll/types.h>



#define ` name `_SIZE ` ($ (: data 0)) `



static const sll_char_t ` name `[]={
	`)
			(<- _write_byte_array fh (: data 0))
		} {
			(<- file$write fh
`#ifndef __SLL_GENERATED_` name `_H__
#define __SLL_GENERATED_` name `_H__ 1
#include <sll/types.h>



#define ` name `_START_SIZE ` ($ (: data 0)) `
#define ` name `_END_SIZE ` ($ (: data 1)) `



static const sll_char_t ` name `_START[]={
	`)
			(<- _write_byte_array fh (: data 0))
			(<- file$write fh
`
};



static const sll_char_t ` name `_END[]={
	`)
			(<- _write_byte_array fh (: data 1))
		})
		(<- file$write fh
`
};



#endif
`)
		(<- file$close fh)
		(++ i)
	)
))

(= generate_library_header (,,, docs
	(<- log$log "Generating library header...")
	(<- log$log "  Listing symbols...")
	(= define_code_map <>)
	(= struct_decl_list [])
	(= types <>)
	(= variables [])
	(= functions [])
	(-> (= i 0) (< i ($ docs$data))
		(= symbol (: docs$data i))
		(?
			(& symbol$flags documentation$FLAG_MACRO) (= (: define_code_map symbol$name) nil)
			(& symbol$flags documentation$FLAG_TYPE) (= (: types symbol$name) (. type_requirement_data_type
				symbol
				(<- _parse_requirements symbol struct_decl_list)
				0
			))
			(& symbol$flags documentation$FLAG_VAR) (<- array$push variables symbol)
			(<- array$push functions symbol)
		)
		(++ i)
	)
	(<- log$log "    Found " ($ define_code_map) " preprocessor definitions, " ($ types) " types, " ($ variables) " variables and " ($ functions) " functions")
	(<- log$log "  Finding preprocessor definitions...")
	(<- log$log "    Listing header files...")
	(= header_files (<- path$list_dir config$INCLUDE_ROOT_DIRECTORY_PATH true))
	(<- log$log "      Found " ($ header_files) " files")
	(<- log$log "    Parsing header files...")
	(-> (= i 0) (< i ($ header_files))
		(= data (<- string$split
			(<- string$replace
				(<- file$read
					(<- file$open (: header_files i) "r")
				)
				"\r\n"
				'\n'
			)
			'\n'
		))
		(-> (= j 0) (< j ($ data))
			(= line (<- string$trim (: data j)))
			(++ j)
			(? (! (<- string$starts line "#define")) (<<<))
			(= name (<- string$trim (>> line 7)))
			(= name (: name 0 (<- string$index_list name IDENTIFIER_CHARACTERS true)))
			(? (! (|: define_code_map name)) (<<<))
			(= code line)
			(-> nil (=== (: code -1) '\\')
				(= code (+
					(<- string$trim (: code 0 -1))
					(<- string$trim (: data j))
				))
				(++ j)
			)
			(= (: define_code_map name) code)
		)
		(++ i)
	)
	(<- log$log "  Resolving type requirements...")
	(= types (<- _resolve_requirements types))
	(<- log$log "  Generating code in '" config$LIBRARY_HEADER_FILE_PATH "'...")
	(= fh (<- file$open config$LIBRARY_HEADER_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_H__
#define __SLL_H__ 1
#include <stdarg.h>
#include <stddef.h>
`)
	(? (=== sys$PLATFORM "windows") (<- file$write fh "#include <sal.h>\n"))
	(<- file$write fh
`#define __VERSION_STR_(x) #x
#define __VERSION_STR(x) __VERSION_STR_(x)
`)
	(= define_macros (:: define_code_map map_value_type))
	(<- log$log "    Generating preprocessor definitions...")
	(-> (= i 0) (< i ($ define_macros))
		(<- file$write fh (: define_macros i) '\n')
		(++ i)
	)
	(<- log$log "    Generating types...")
	(-> (= i 0) (< i ($ struct_decl_list))
		(<- file$write fh (: struct_decl_list i) ";\n")
		(++ i)
	)
	(-> (= i 0) (< i ($ types))
		(= symbol (: types i))
		(= str "")
		(?
			(& symbol$flags documentation$FLAG_VAR) (= str (<- _format_type symbol$type$type symbol$name))
			(& symbol$flags documentation$FLAG_FUNC) {
				(= str (+
					(<- _format_type symbol$return$type nil)
					" (*"
					symbol$name
					")("
				))
				(? symbol$args {
					(-> (= j 0) (< j ($ symbol$args))
						(= arg (: symbol$args j))
						(? j (= str (+ str ',')))
						(= str (+ str (<- _format_type arg$type arg$name)))
						(++ j)
					)
					(? (& symbol$flags documentation$FLAG_VAR_ARG) (= str (+ str ",...")))
				} {
					(= str (+ str "void"))
				})
				(= str (+ str ')'))
			}
			{
				(= str (+
					(?: (& symbol$flags documentation$FLAG_UNION) "union" "struct")
					" _"
					(: (<- string$upper_case symbol$name) 0 -2)
					'{'
				))
				(-> (= j 0) (< j ($ symbol$args))
					(= arg (: symbol$args j))
					(= str (+ str
						(<- _format_type arg$type arg$name)
						';'
					))
					(++ j)
				)
				(= str (+ str
					"} "
					symbol$name
				))
			}
		)
		(<- file$write fh "typedef "str ";\n")
		(++ i)
	)
	(<- log$log "    Generating variables...")
	(-> (= i 0) (< i ($ variables))
		(= symbol (: variables i))
		(<- file$write fh (: config$LIBRARY_HEADER_EXTERNAL sys$PLATFORM) "extern " symbol$type$type ' ' symbol$name ";\n")
		(++ i)
	)
	(<- log$log "    Generating functions...")
	(-> (= i 0) (< i ($ functions))
		(= symbol (: functions i))
		(= str "")
		(? symbol$api_fmt (= str (+ str (: config$LIBRARY_HEADER_API_CALL sys$PLATFORM))))
		(? (& symbol$flags documentation$FLAG_CHECK_OUTPUT) (= str (+ str (: config$LIBRARY_HEADER_CHECK_OUTPUT sys$PLATFORM))))
		(= str (+ str
			(: config$LIBRARY_HEADER_EXTERNAL sys$PLATFORM)
			(<- _format_type symbol$return$type symbol$name)
			'('
		))
		(? symbol$args {
			(-> (= j 0) (< j ($ symbol$args))
				(= arg (: symbol$args j))
				(? j (= str (+ str ',')))
				(= str (+ str (<- _format_type arg$type arg$name)))
				(++ j)
			)
		} {
			(= str (+ str "void"))
		})
		(<- file$write fh str ");\n")
		(++ i)
	)
	(<- file$write fh
`#endif
`)
	(<- file$close fh)
))



(= header (. header_module_type
	generate_error_headers
	generate_library_header
))
(## header)
