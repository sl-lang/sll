(---
	"@build-script/config.sll"
	"@build-script/documentation.sll"
	"@build-script/util.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"path.sll"
	"string.sll"
	"types.sll"
)



(= header_module_type (&:
	(~ func_type) generate_error_headers
	(~ func_type) generate_library_header
))



(= IDENTIFIER_CHARACTERS "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_")



(= _write_byte_array (,,, fh data
	(= data (:: data string_type))
	(-> (= i 0) (< i ($ data))
		(? i {
			(<- file$write fh ',')
			(? (! (% i config$BYTE_ARRAY_WRAP_SIZE)) (<- file$write fh "\n\t"))
		})
		(<- file$write fh (<- string$format "0x%.2x" (: data i)))
		(++ i)
	)
))

(= generate_error_headers (,,,
	(<- log$log "Generating " ($ config$ERROR_HEADERS) " error headers...")
	(-> (= i 0) (< i ($ config$ERROR_HEADERS))
		(= name (: config$ERROR_HEADERS i))
		(= src (+ config$ERROR_HEADER_SOURCE_DIRECTORY_PATH name))
		(= dst (+
			config$ERROR_HEADER_OUTPUT_DIRECTORY_PATH
			(: name 0 -4)
			".h"
		))
		(<- log$log "  Convering '" src "' to '" dst "' ...")
		(= data (<- string$split
			(<- string$replace
				(<- file$read
					(<- file$open src "r")
				)
				"\r\n"
				'\n'
			)
			"$$$"
		)
		(= fh (<- file$open dst "w"))
		(= name (<- string$upper_case (: name 0 (<- string$index name '.'))))
		(? (=== ($ data) 1) {
			(<- file$write fh
`#ifndef __SLL_GENERATED_` name `_H__
#define __SLL_GENERATED_` name `_H__ 1
#include <sll/types.h>



#define ` name `_SIZE ` ($ (: data 0)) `



static const sll_char_t ` name `[]={
	`)
			(<- _write_byte_array fh (: data 0))
		} {
			(<- file$write fh
`#ifndef __SLL_GENERATED_` name `_H__
#define __SLL_GENERATED_` name `_H__ 1
#include <sll/types.h>



#define ` name `_START_SIZE ` ($ (: data 0)) `
#define ` name `_END_SIZE ` ($ (: data 1)) `



static const sll_char_t ` name `_START[]={
	`)
			(<- _write_byte_array fh (: data 0))
			(<- file$write fh
`
};



static const sll_char_t ` name `_END[]={
	`)
			(<- _write_byte_array fh (: data 1))
		})
		(<- file$write fh
`
};



#endif
`)
		(<- file$close fh)
		(++ i)
	)
))

(= generate_library_header (,,, docs
	(<- log$log "Generating library header...")
	(<- log$log "  Listing symbols...")
	(= define_code_map <>)
	(= types [])
	(= variables [])
	(= functions [])
	(-> (= i 0) (< i ($ docs$data))
		(= symbol (: docs$data i))
		(?
			(& symbol$flags documentation$FLAG_MACRO) (= (: define_code_map symbol$name) nil)
			(& symbol$flags documentation$FLAG_TYPE) (<- array$push types symbol)
			(& symbol$flags documentation$FLAG_VAR) (<- array$push variables symbol)
			(<- array$push functions symbol)
		)
		(++ i)
	)
	(<- log$log "    Found " ($ define_code_map) " preprocessor definitions, " ($ types) " types, " ($ variables) " variables and " ($ functions) " functions")
	(<- log$log "  Finding preprocessor definitions...")
	(<- log$log "    Listing header files...")
	(= header_files (<- path$list_dir config$INCLUDE_ROOT_DIRECTORY_PATH true))
	(<- log$log "      Found " ($ header_files) " files")
	(<- log$log "    Parsing header files...")
	(-> (= i 0) (< i ($ header_files))
		(= data (<- string$split
			(<- string$replace
				(<- file$read
					(<- file$open (: header_files i) "r")
				)
				"\r\n"
				'\n'
			)
			'\n'
		))
		(-> (= j 0) (< j ($ data))
			(= line (<- string$trim (: data j)))
			(++ j)
			(? (! (<- string$starts line "#define")) (<<<))
			(= name (<- string$trim (>> line 7)))
			(= name (: name 0 (<- string$index_list name IDENTIFIER_CHARACTERS true)))
			(? (! (|: define_code_map name)) (<<<))
			(= code line)
			(-> nil (=== (: code -1) '\\')
				(= code (+
					(<- string$trim (: code 0 -1))
					(<- string$trim (: data j))
				))
				(++ j)
			)
			(= (: define_code_map name) code)
		)
		(++ i)
	)
	(<- log$log "  Generating code in '" config$LIBRARY_HEADER_FILE_PATH "'...")
	(= fh (<- file$open config$LIBRARY_HEADER_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_H__
#define __SLL_H__ 1
`)
	(= define_macros (:: define_code_map map_value_type))
	(<- log$log "    Generating " ($ define_macros) " preprocessor definitions...")
	(-> (= i 0) (< i ($ define_macros))
		(<- file$write fh (: define_macros i) '\n')
		(++ i)
	)
	(<- file$write fh
`#endif
`)
	(<- file$close fh)
	(--- "sys.sll")(<- util$execute [(?: (=== sys$PLATFORM "windows") "python.exe" "python3") "src/_build/header.py" config$BUILD_TIME config$OPTIONS$VERBOSE])
))



(= header (. header_module_type
	generate_error_headers
	generate_library_header
))
(## header)
