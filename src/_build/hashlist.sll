(---
	"@build-script/config.sll"
	"@build-script/util.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"map.sll"
	"path.sll"
	"string.sll"
	"types.sll"
)



(= file_state_type (&:
	string_type hash
	int_type state
))

(= hashlist_module_type (&:
	(~ func_type) check
	(~ func_type) fail
	(~ func_type) init
))



(= STATE_UNKNOWN 0)
(= STATE_UPDATE 1)
(= STATE_NO_UPDATE 2)

(= _hash_map <>)
(= _changed_file_list [])



(= _check_file_state (,,, file_path
	(= state (: _hash_map file_path))
	(? (! state) (@@ STATE_NO_UPDATE))
	(? (!== state$state STATE_UNKNOWN) (@@ state$state))
	(= src (<- util$get_source_file_path file_path))
	(= data (<- string$split
		(<- string$replace
			(<- file$read
				(<- file$open src "r")
			)
			"\r\n"
			'\n'
		)
		'\n'
	))
	(= include_prefix (?: (=== (>> src (<- string$index_reverse src '.')) ".asm")
		"%include"
		"#include"
	))
	(= base_include_file_path (?: (<- string$starts src config$EXTENSION_DIRECTORY_FILE_PATH)
		(<- string$replace
			config$EXTENSION_INCLUDE_FILE_PATH
			"<name>"
			(:
				(<- string$split
					(:
						(<- string$split
							(>> src ($ config$EXTENSION_DIRECTORY_FILE_PATH))
							'\\'
						)
						0
					)
					'/'
				)
				0
			)
		)
		config$INCLUDE_ROOT_DIRECTORY_PATH
	))
	(-> (= i 0) (< i ($ data))
		(= line (<- string$trim (: data i)))
		(? (<- string$starts line include_prefix) {
			(= line (>> (<- string$trim (: line 9 -1)) 1))
			(= include_file_path (+ (?:
				(=== line "sll.h") "build/"
				base_include_file_path
			) line))
			(? (&&
				(<- path$exists include_file_path)
				(=== (<- _check_file_state (<- util$get_output_file_path include_file_path)) STATE_UPDATE)
			) {
				(= state$state STATE_UPDATE)
				(@@ STATE_UPDATE)
			})
		})
		(++ i)
	)
	(= state$state STATE_NO_UPDATE)
	(@@ STATE_NO_UPDATE)
))

(= _write_hash_list (,,,
	(= fh (<- file$open config$HASHLIST_FILE_PATH "w"))
	(= files (:: _hash_map map_key_type))
	(-> (= i 0) (< i ($ files))
		(= file_path (: files i))
		(= state (: _hash_map file_path))
		(<- file$write fh (+ file_path state$hash '\n'))
		(++ i)
	)
	(<- file$close fh)
))

(= check (,,, file_path
	(@@ (|: _changed_file_list file_path))
))

(= fail (,,, file_path
	(<- map$remove _hash_map file_path)
	(<- _write_hash_list)
))

(= init (,,,
	(? _hash_map {
		(:> "Function 'hashlist$init` called twice!\n")
		(<- util$fail_and_exit)
	})
	(<- log$log "Initializing hash list...")
	(<- log$log "  Loading previous hash list...")
	(= fh (<- file$open config$HASHLIST_FILE_PATH "r"))
	(? (=== (:? fh) file$file_type) {
		(= data (<- string$split (<- file$read fh) '\n'))
		(-> (= i 0) (< i ($ data))
			(= line (<- string$trim (: data i)))
			(? line {
				(= key (: line 0 -64))
				(= (: _hash_map key) (. file_state_type
					(>> line ($ key))
					STATE_UNKNOWN
				))
			})
			(++ i)
		)
		(<- file$close fh)
	})
	(<- log$log "    Loaded " ($ _hash_map) " hashes")
	(<- log$log "  Checking for file changes...")
	(= files [])
	(-> (= i 0) (< i ($ config$HASHLIST_ROOT_SOURCE_FILE_PATH))
		(<- array$extend files (<- path$list_dir (: config$HASHLIST_ROOT_SOURCE_FILE_PATH i) true))
		(++ i)
	)
	(= current_file_list [])
	(-> (= i 0) (< i ($ files))
		(= file_path (: files i))
		(++ i)
		(= ext (>> file_path (<- string$index_reverse file_path '.')))
		(? (! (|: config$HASHLIST_FILE_EXTENSIONS ext)) (<<<))
		(= new_hash (<- util$hash_file file_path))
		(= file_path (<- util$get_output_file_path file_path))
		(<- array$push current_file_list file_path)
		(= state (: _hash_map file_path))
		(? (! state) {
			(= state (. file_state_type
				""
				STATE_UNKNOWN
			))
			(= (: _hash_map file_path) state)
		})
		(? (||
			(!== state$hash new_hash)
			(&& (! (|: config$HASHLIST_INCLUDE_FILE_EXTENSIONS ext)) (! (<- path$exists file_path)))
		) (= state$state STATE_UPDATE))
		(= state$hash new_hash)
	)
	(<- _write_hash_list)
	(-> (= i 0) (< i ($ current_file_list))
		(= file_path (: current_file_list i))
		(<- _check_file_state file_path)
		(? (=== (: (: _hash_map file_path) "state") STATE_UPDATE) (<- array$push _changed_file_list file_path))
		(++ i)
	)
))



(= hashlist (. hashlist_module_type
	check
	fail
	init
))
(## hashlist)
