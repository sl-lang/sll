(---
	"@build-script/config.sll"
	"array.sll"
	"base64.sll"
	"file.sll"
	"hash.sll"
	"log.sll"
	"path.sll"
	"process.sll"
	"sort.sll"
	"string.sll"
	"sys.sll"
	"thread.sll"
	"types.sll"
)



(= util_module_type (&:
	(~ func_type) create_output_dir
	(~ func_type) execute
	(~ func_type) execute_debug_fuzzer
	(~ func_type) execute_fuzzer
	(~ func_type) fail_and_exit
	(~ func_type) get_output_file_path
	(~ func_type) get_source_file_path
	(~ func_type) hash_file
	(~ func_type) index_with_scope
	(~ func_type) split_with_scope
))



(= _obj_file_prefix (+
	"build/objects/"
	sys$PLATFORM
	(?: config$OPTIONS$RELEASE "_release" "")
	(?: (|| config$OPTIONS$DEBUG (! config$OPTIONS$RELEASE)) "_debug" "")
	(?: config$OPTIONS$CLANG "_clang" "")
	(?: config$OPTIONS$FUZZER "_fuzzer" "")
	'_'
))



(= create_output_dir (,,,
	(<- log$log "Generating build directory...")
	(-> (= i 0) (< i config$BUILD_CLEAR_FOLDERS)
		(= root (+ (<- path$absolute (: config$BUILD_CLEAR_FOLDERS i)) path$SEPARATOR))
		(++ i)
		(= files (<- path$list_dir root true))
		(? (!== (:? files) array_type) (<<<))
		(= directory_list [])
		(-> (= j 0) (< j ($ files))
			(= file_path (: files j))
			(= dir (: (<- path$split file_path) 0))
			(? (! (|: directory_list dir)) (<- array$push directory_list dir))
			(<- file$delete file_path)
			(++ j)
		)
		(<- sort$sort directory_list true true)
		(-> (= j 0) (< j ($ directory_list))
			(= dir (: directory_list j))
			(++ j)
			(? (=== dir root) (<<<))
			(<- file$delete dir)
		)
	)
	(-> (= i 0) (< i ($ config$BUILD_CREATE_FOLDERS))
		(<- path$mkdir (: config$BUILD_CREATE_FOLDERS i))
		(++ i)
	)
))

(= execute (,,, args
	(@@ (!! (: (<- process$start (?: (=== (:? args) string_type)
		[args]
		(:: args array_type)
	)) "return_code"))
))

(= execute_debug_fuzzer (,,,
	(= file_path nil)
	(-> (= i 1) (< i ($ sys$ARGV))
		(= arg (: sys$ARGV i))
		(? (!== (: arg 0 2) "--") {
			(= file_path arg)
			(@)
		})
		(++ i)
	)
	(? (||
		(! file_path)
		(! (<- path$exists file_path))
	) (@@))
	(= data (<- string$split
		(<- file$read
			(<- file$open file_path "r")
		)
		'\n'
	))
	(= args ["build/sll_debug_fuzzer"])
	(-> (= i 0) (< i ($ data))
		(= line (: data i))
		(++ i)
		(? (!== (: line 0 5) "$$$$$") (<<<))
		(<- array$push args (<- base64$decode
			(<- string$trim
				(:
					(<- string$split
						line
						':'
					)
					1
				)
			)
		))
	)
	(<- execute (+ (: config$DEBUGGER_COMMAND sys$PLATFORM) args))
))

(= execute_fuzzer (,,,
	(<- path$mkdir "build/fuzzer_data")
	(<- path$mkdir "build/fuzzer_output")
	(? (||
		(<- execute config$FUZZER_COMPILATION_COMMAND)
		(<- execute config$FUZZER_DEBUGGER_COMPILATION_COMMAND)
	) (<- thread$exit 1))
	(<- execute config$FUZZER_EXECUTION_COMMAND)
	(= files (<- path$list_dir "build/fuzzer_output"))
	(-> (= i 0) (< i ($ files))
		(= file_path (+
			"build/fuzzer_output/"
			(: files i)
		))
		(? (! (|:
			(<- file$read
				(<- file$open
					file_path
					"r"
				)
			)
			config$FUZZER_ASAN_ERROR_MARKER
		)) {
			(<- file$delete file_path)
		})
		(++ i)
	)
))

(= fail_and_exit (,,,
	(<- thread$exit 1)
))

(= get_output_file_path (,,, file_path
	(@@ (+
		_obj_file_prefix
		(<- string$replace
			(<- string$replace
				(<- string$replace
					(<- path$relative
						(:: file_path string_type)
					)
					'\\'
					'/'
				)
				'/'
				'$'
			)
			':'
			'@'
		)
		".o"
	))
))

(= get_source_file_path (,,, file_path
	(@@ (<- string$replace
		(<- string$replace
			(: file_path ($ _obj_file_prefix) -2)
			'@'
			':'
		)
		'$'
		'/'
	))
))

(= hash_file (,,, file_path
	(= file_path (:: file_path string_type))
	(@@ (<- hash$hexdigest
		(<- hash$sha256$process
			(<- file$read
				(<- file$open file_path "r")
			)
		)
	))
))

(= index_with_scope (,,, str infix
	(= i 0)
	(-> nil (<= i (- ($ str) ($ infix)))
		(?
			(<- string$starts (>> str i) infix) {
				(@@ i)
			}
			(=== (: str i) '"') {
				(>- nil (!== (: str i) '"')
					(++ i)
				)
			}
		)
		(++ i)
	)
	(@@ -1)
))

(= split_with_scope (,,, str infix
	(= out [])
	(= i 0)
	(= j 0)
	(-> nil (<= j (- ($ str) ($ infix)))
		(?
			(<- string$starts (>> str j) infix) {
				(<- array$push out (: str i j))
				(= j (+ j ($ infix)))
				(= i j)
				(<<<)
			}
			(=== (: str j) '"') {
				(>- nil (!== (: str j) '"')
					(++ j)
				)
			}
		)
		(++ j)
	)
	(<- array$push out (>> str i))
	(@@ out)
))



(= util (. util_module_type
	create_output_dir
	execute
	execute_debug_fuzzer
	execute_fuzzer
	fail_and_exit
	get_output_file_path
	get_source_file_path
	hash_file
	index_with_scope
	split_with_scope
))
(## util)
