(---
	"array.sll"
	"file.sll"
	"hash.sll"
	"log.sll"
	"path.sll"
	"process.sll"
	"sort.sll"
	"string.sll"
	"sys.sll"
	"thread.sll"
	"types.sll"
)
(--- "config.sll")



(= util_module_type (&:
	(~ func_type) create_output_dir
	(~ func_type) execute
	(~ func_type) fail_and_exit
	(~ func_type) get_output_file_path
	(~ func_type) hash_file
))



(= _obj_file_prefix (+
	"build/objects/"
	sys$PLATFORM
	(?: config$options$RELEASE "_release" "")
	(?: (|| config$options$DEBUG (! config$options$RELEASE)) "_debug" "")
	'_'
))



(= create_output_dir (,,,
	(<- log$log "Generating build directory...")
	(-> (= i 0) (< i config$BUILD_CLEAR_FOLDERS)
		(= root (+ (<- path$absolute (: config$BUILD_CLEAR_FOLDERS i)) path$SEPARATOR))
		(++ i)
		(= files (<- path$list_dir root true))
		(? (!== (:? files) array_type) (<<<))
		(= directory_list [])
		(-> (= j 0) (< j ($ files))
			(= file_path (: files j))
			(= dir (: (<- path$split file_path) 0))
			(? (! (|: directory_list dir)) (<- array$push directory_list dir))
			(<- file$delete file_path)
			(++ j)
		)
		(<- sort$sort directory_list true true)
		(-> (= j 0) (< j ($ directory_list))
			(= dir (: directory_list j))
			(++ j)
			(? (=== dir root) (<<<))
			(<- file$delete dir)
		)
	)
	(-> (= i 0) (< i ($ config$BUILD_CREATE_FOLDERS))
		(<- path$mkdir (: config$BUILD_CREATE_FOLDERS i))
		(++ i)
	)
))

(= execute (,,, args
	(<- log$log args)
	(@@ (!! (: (<- process$start (:: args array_type)) "return_code"))
))

(= fail_and_exit (,,,
	(<- thread$exit 1)
))

(= get_output_file_path (,,, file_path
	(@@ (+
		_obj_file_prefix
		(<- string$replace
			(<- string$replace
				(:: file_path string_type)
				'\\'
				'/'
			)
			'/'
			'$'
		)
		".o"
	))
))

(= hash_file (,,, file_path
	(= file_path (:: file_path string_type))
	(@@ (<- hash$hexdigest
		(<- hash$sha256$process
			(<- file$read
				(<- file$open file_path "r")
			)
		)
	))
))



(= util (. util_module_type
	create_output_dir
	execute
	fail_and_exit
	get_output_file_path
	hash_file
))
(## util)
