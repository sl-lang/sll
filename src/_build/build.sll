(---
	"@build-script/config.sll"
	"@build-script/hashlist.sll"
	"@build-script/util.sll"
	"array.sll"
	"error.sll"
	"file.sll"
	"json.sll"
	"log.sll"
	"path.sll"
	"process.sll"
	"sort.sll"
	"string.sll"
	"sys.sll"
	"types.sll"
)



(= extension_data_type (&:
	array_type required_extensions
	string_type platform_file_path
	array_type extra_options
	array_type extra_link_options
))

(= build_module_type (&:
	(~ func_type) build_extensions
	(~ func_type) build_modules
	(~ func_type) build_sll
	(~ func_type) build_sll_cli
))



(= _replace_marker (,,, args marker value
	(-> (= i 0) (< i ($ args))
		(? (=== (: args i) marker) {
			(? (=== (:? value) string_type) {
				(= (: args i) value)
			} {
				(= args (+
					(: args 0 i)
					value
					(>> args (+ i 1))
				))
			})
		})
		(++ i)
	)
	(@@ args)
))

(= _execute_command (,,, args input output options include_file_path name
	(? (! args) (@@))
	(= args (+ (<- _replace_marker
		(<- _replace_marker
			(<- _replace_marker
				(<- _replace_marker
					(: args)
					config$COMMAND_MARKER_NAME
					name
				)
				config$COMMAND_MARKER_INCLUDE
				include_file_path
			)
			config$COMMAND_MARKER_INPUT
			input
		)
		config$COMMAND_MARKER_OUTPUT
		output
	) (|| options [])))
	(@@ (<- util$execute args))
))

(= _read_extension_data (,,, name
	(= out (. extension_data_type
		[]
		(<- string$replace
			(: config$EXTENSION_PLATFORM_SOURCE_FILE_PATH sys$PLATFORM)
			"<name>"
			name
		)
		[]
		[]
	))
	(= fh (<- file$open
		(<- string$replace
			config$EXTENSION_EXTRA_DATA_FILE_PATH
			"<name>"
			name
		)
		"r"
	))
	(? (! fh$error_data) {
		(= data (<- json$parse
			(<- file$read
				fh
			)
		))
		(? (&&
			data$installation_scripts
			(=== (:? data$installation_scripts) map_type)
		) {
			(= install_dir (<- string$replace
				(<- string$replace
					config$EXTENSION_INSTALLATION_DIRECTORY
					"<name>"
					name
				)
				"<platform>"
				sys$PLATFORM
			))
			(? (! (<- path$exists install_dir)) {
				(<- path$mkdir install_dir)
				(= script (: data$installation_scripts sys$PLATFORM))
				(? script {
					(= script (<- path$join
						(<- string$replace
							config$EXTENSION_ROOT_SOURCE_FILE_PATH
							"<name>"
							name
						)
						script
					))
					(? (=== sys$PLATFORM "windows") (= script (<- string$replace
						script
						'/'
						'\\'
					)))
					(= err (<- process$shell script))
					(? err {
						(:> err '\n')
						(<- util$fail_and_exit)
					})
				})
			})
		})
		(? (&&
			data$required_extensions
			(=== (:? data$required_extensions) array_type)
		) {
			(= out$required_extensions ([> (= i 0) (< i ($ data$required_extensions))
				(= ext (: data$required_extensions i))
				(++ i)
				(:: ext string_type)
			))
		})
		(? (&&
			data$platform_directories
			(=== (:? data$platform_directories) map_type)
		) {
			(= dir (::
				(: data$platform_directories sys$PLATFORM)
				string_type
			))
			(? dir {
				(= out$platform_file_path (+
					(<- string$replace
						config$EXTENSION_ROOT_SOURCE_FILE_PATH
						"<name>"
						name
					)
					'/'
					dir
				))
			})
		})
		(? (&&
			data$extra_options
			(=== (:? data$extra_options) map_type)
		) {
			(= out$extra_options (::
				(: data$extra_options sys$PLATFORM)
				array_type
			))
		})
		(? (&&
			data$extra_link_options
			(=== (:? data$extra_link_options) map_type)
		) {
			(= out$extra_link_options (::
				(: data$extra_link_options sys$PLATFORM)
				array_type
			))
		})
	})
	(@@ out)
))

(= _insert_extensions_with_requirements (,,, name extension_data_map out
	(? (|: out name) (@@))
	(= extension_data (: extension_data_map name))
	(-> (= i 0) (< i ($ extension_data$required_extensions))
		(<- _insert_extensions_with_requirements (: extension_data$required_extensions i) extension_data_map out)
		(++ i)
	)
	(<- array$push out name)
))

(= build_extensions (,,,
	(<- log$log "Compiling extensions...")
	(<- log$log "  Listing extensions...")
	(= extensions (<- path$list_dir config$EXTENSION_DIRECTORY_FILE_PATH false))
	(<- sort$sort extensions false true)
	(<- log$log "    Found " ($ extensions) " extensions")
	(= extension_data_map <>)
	(-> (= i 0) (< i ($ extensions))
		(= name (: extensions i))
		(++ i)
		(= extension_data (<- _read_extension_data name))
		(= (: extension_data_map name) extension_data)
	)
	(= ordered_extensions [])
	(-> (= i 0) (< i ($ extensions))
		(<- _insert_extensions_with_requirements (: extensions i) extension_data_map ordered_extensions)
		(++ i)
	)
	(-> (= extension_index 0) (< extension_index ($ extensions))
		(= name (: ordered_extensions extension_index))
		(++ extension_index)
		(<- log$log "  Compiling extension '" name "'...")
		(<- log$log "    Listing files...")
		(= files (<- path$list_dir
			(<- string$replace
				config$EXTENSION_ROOT_SOURCE_FILE_PATH
				"<name>"
				name
			)
			true
		))
		(= extension_data (: extension_data_map name))
		(= platform_files (<- path$list_dir
			extension_data$platform_file_path
			true
		))
		(= files (+
			([> (= i 0) (< i ($ files))
				(= fp (: files i))
				(++ i)
				(? (|: fp "platform") (<<<))
				fp
			)
			(?: (=== (:? platform_files) error$error_type)
				[]
				platform_files
			)
		))
		(= files ([> (= i 0) (< i ($ files))
			(= fp (: files i))
			(++ i)
			(? (! (|: config$SOURCE_FILE_EXTENSIONS (>> fp (<- string$index_reverse fp '.')))) (<<<))
			fp
		))
		(<- log$log "      Found " ($ files) " files")
		(? files {
			(<- log$log "    Aggregating preprocessor definitions...")
			(= options extension_data$extra_options)
			(-> (= i 0) (< i ($ config$EXTENSION_PREPROCESSOR_DEFINITIONS))
				(<- array$extend options [
					(: config$PREPROCESSOR_DEFINITION_PREFIX sys$PLATFORM)
					(: config$EXTENSION_PREPROCESSOR_DEFINITIONS i)
				])
				(++ i)
			)
			(= include_file_path (<- string$replace
				config$EXTENSION_INCLUDE_FILE_PATH
				"<name>"
				name
			))
			(= command_list (: config$EXTENSION_COMMANDS (+
				sys$PLATFORM
				(* "_release" config$OPTIONS$RELEASE)
				(* "_clang" config$OPTIONS$CLANG)
			)))
			(= output_files [])
			(<- log$log "    Compiling files...")
			(= err false)
			(-> (= i 0) (< i ($ files))
				(= file_path (: files i))
				(++ i)
				(= output_file_path (<- util$get_output_file_path file_path))
				(<- array$push output_files output_file_path)
				(? (! (<- hashlist$check output_file_path)) (<<<))
				(<- log$log "      " file_path)
				(? (?: (=== (>> file_path (<- string$index_reverse file_path '.')) ".asm")
					(||
						(<- _execute_command command_list$NASM_COMPILATION_COMMAND file_path output_file_path nil include_file_path)
						(<- _execute_command command_list$NASM_POST_COMPILATION_COMMAND file_path output_file_path nil include_file_path)
					)
					(<- _execute_command command_list$COMPILATION_COMMAND file_path (+ command_list$OUTPUT_PREFIX output_file_path) options include_file_path)
				) {
					(<- hashlist$fail output_file_path)
					(= err true)
				})
			)
			(? err (<- util$fail_and_exit))
			(= temporary_output_library (<- string$replace config$EXTENSION_TEMPORARY_OUTPUT_FILE_PATH
				"<name>"
				name
			))
			(= output_library (<- string$replace config$EXTENSION_OUTPUT_FILE_PATH
				"<name>"
				name
			))
			(<- log$log "    Linking files...")
			(? (<- _execute_command command_list$LINK_COMMAND output_files (+ command_list$OUTPUT_LINK_PREFIX temporary_output_library) extension_data$extra_link_options) (<- util$fail_and_exit))
			(<- log$log "    Executing post-link command...")
			(? (<- _execute_command command_list$POST_LINK_COMMAND nil temporary_output_library) (<- util$fail_and_exit))
			(<- log$log "    Copying library from '" temporary_output_library "' to '" output_library "'...")
			(<- file$rename temporary_output_library output_library)
		})
		(<- log$log "  Compiling modules for extension '" name "'...")
		(<- log$log "    Listing module files...")
		(= module_file_root (<- string$replace
			config$EXTENSION_LIBRARY_ROOT_FILE_PATH
			"<name>"
			name
		))
		(= module_files (<- path$list_dir module_file_root true))
		(<- log$log "      Found " ($ module_files) " files")
		(<- log$log "    Grouping files...")
		(= grouped_module_files <>)
		(-> (= i 0) (< i ($ module_files))
			(= file_path (: module_files i))
			(= folder_file_path (: (<- path$split file_path) 0))
			(? (! (: grouped_module_files folder_file_path)) (= (: grouped_module_files folder_file_path) []))
			(<- array$push (: grouped_module_files folder_file_path) file_path)
			(++ i)
		)
		(<- log$log "    Compiling files...")
		(= keys (:: grouped_module_files map_key_type))
		(-> (= i 0) (< i ($ keys))
			(= file_path (: keys i))
			(= output_file_path (+ "build/lib/" (>> file_path ($ module_file_root))))
			(<- path$mkdir output_file_path)
			(? (<- _execute_command config$EXTENSION_MODULE_COMPILATION_COMMAND (: grouped_module_files file_path) output_file_path nil [
				"-I" (+ name "|build/lib/")
				"-I" (+ name '|' module_file_root)
			]) (<- util$fail_and_exit))
			(++ i)
		)
		(= output_files ([> (= i 0) (< i ($ module_files))
			(= file_path (: module_files i))
			(++ i)
			(? (=== (: (: (<- path$split file_path) 1) 0) '_') (<<<))
			(+ (>> file_path ($ module_file_root)) ".slc")
		))
		(= cwd (<- path$get_cwd))
		(<- path$set_cwd "build/lib/")
		(<- log$log "    Generating bundle...")
		(? (<- _execute_command config$EXTENSION_MODULE_BUNDLE_GENERATION_COMMAND output_files (+ name ".slb") nil nil (+ name '/')) (<- util$fail_and_exit))
		(<- log$log "    Generating debug bundle...")
		(? (<- _execute_command config$EXTENSION_MODULE_DEBUG_BUNDLE_GENERATION_COMMAND output_files (+ "../lib_debug/" name ".slb") nil nil (+ name '/')) (<- util$fail_and_exit))
		(<- log$log "    Removing compilation files...")
		(-> (= i 0) (< i ($ module_files))
			(= file_path (+ (>> (: module_files i) ($ module_file_root)) ".slc"))
			(<- log$log "      Removing 'build/lib/" file_path "'...")
			(<- file$delete file_path)
			(++ i)
		)
		(<- log$log "    Removing compilation directories...")
		(-> (= i 0) (< i ($ keys))
			(= file_path (>> (: keys i) ($ module_file_root)))
			(? file_path {
				(<- log$log "      Removing 'build/lib/" file_path "'...")
				(<- file$delete file_path)
			})
			(++ i)
		)
		(<- path$set_cwd cwd)
	)
))

(= build_modules (,,,
	(<- log$log "Compiling modules...")
	(<- log$log "  Listing files...")
	(= module_files (<- path$list_dir config$BUILTIN_LIBRARY_ROOT_FILE_PATH false))
	(<- log$log "    Found " ($ module_files) " files")
	(<- log$log "  Compiling files...")
	(? (<- _execute_command config$MODULE_COMPILATION_COMMAND module_files nil) (<- util$fail_and_exit))
	(= output_files ([> (= i 0) (< i ($ module_files))
		(= name (: module_files i))
		(++ i)
		(? (=== (: name 0) '_') (<<<))
		(+ "build/lib/" name ".slc")
	))
	(<- log$log "  Generating bundle...")
	(? (<- _execute_command config$MODULE_BUNDLE_GENERATION_COMMAND output_files nil) (<- util$fail_and_exit))
	(<- log$log "  Generating debug bundle...")
	(? (<- _execute_command config$MODULE_DEBUG_BUNDLE_GENERATION_COMMAND output_files nil) (<- util$fail_and_exit))
	(<- log$log "  Removing compilation files...")
	(-> (= i 0) (< i ($ module_files))
		(= file_path (+ "build/lib/" (: module_files i) ".slc"))
		(<- log$log "    Removing '" file_path "'...")
		(<- file$delete file_path)
		(++ i)
	)
))

(= build_sll (,,,
	(<- log$log "Compiling...")
	(<- log$log "  Listing files...")
	(= files (<- path$list_dir config$ROOT_SOURCE_FILE_PATH true))
	(= files (+
		([> (= i 0) (< i ($ files))
			(= fp (: files i))
			(++ i)
			(? (|: fp "platform") (<<<))
			fp
		)
		(<- path$list_dir config$ROOT_SHARED_PLATFORM_SOURCE_FILE_PATH true)
		(<- path$list_dir (: config$ROOT_PLATFORM_SOURCE_FILE_PATH sys$PLATFORM) true)
	))
	(= files ([> (= i 0) (< i ($ files))
		(= fp (: files i))
		(++ i)
		(? (! (|: config$SOURCE_FILE_EXTENSIONS (>> fp (<- string$index_reverse fp '.')))) (<<<))
		fp
	))
	(<- log$log "    Found " ($ files) " files")
	(<- log$log "  Aggregating preprocessor definitions...")
	(= options [])
	(-> (= i 0) (< i ($ config$PREPROCESSOR_DEFINITIONS))
		(<- array$extend options [
			(: config$PREPROCESSOR_DEFINITION_PREFIX sys$PLATFORM)
			(: config$PREPROCESSOR_DEFINITIONS i)
		])
		(++ i)
	)
	(= command_list (: config$COMMANDS (+
		sys$PLATFORM
		(* "_release" config$OPTIONS$RELEASE)
		(* "_clang" config$OPTIONS$CLANG)
	)))
	(= output_files [])
	(<- log$log "  Compiling files...")
	(= err false)
	(-> (= i 0) (< i ($ files))
		(= file_path (: files i))
		(++ i)
		(= output_file_path (<- util$get_output_file_path file_path))
		(<- array$push output_files output_file_path)
		(? (! (<- hashlist$check output_file_path)) (<<<))
		(<- log$log "    " file_path)
		(? (?: (=== (>> file_path (<- string$index_reverse file_path '.')) ".asm")
			(||
				(<- _execute_command command_list$NASM_COMPILATION_COMMAND file_path output_file_path)
				(<- _execute_command command_list$NASM_POST_COMPILATION_COMMAND file_path output_file_path)
			)
			(<- _execute_command command_list$COMPILATION_COMMAND file_path (+ command_list$OUTPUT_PREFIX output_file_path) options)
		) {
			(<- hashlist$fail output_file_path)
			(= err true)
		})
	)
	(? err (<- util$fail_and_exit))
	(<- log$log "  Linking files...")
	(? (<- _execute_command command_list$LINK_COMMAND output_files nil) (<- util$fail_and_exit))
	(<- log$log "  Executing post-link command...")
	(? (<- _execute_command command_list$POST_LINK_COMMAND nil nil) (<- util$fail_and_exit))
))

(= build_sll_cli (,,,
	(<- log$log "Compiling CLI...")
	(= command_list (: config$CLI_COMMANDS (+
		sys$PLATFORM
		(* "_clang" config$OPTIONS$CLANG)
	)))
	(<- log$log "  Executing pre-compilation command...")
	(? (<- _execute_command command_list$PRE_COMPILATION_COMMAND nil nil) (<- util$fail_and_exit))
	(<- log$log "  Compiling files...")
	(? (<- _execute_command command_list$COMPILATION_COMMAND nil nil) (<- util$fail_and_exit))
	(<- log$log "  Linking files...")
	(? (<- _execute_command command_list$LINK_COMMAND nil nil) (<- util$fail_and_exit))
	(? (<- _execute_command command_list$LINK_HEADLESS_COMMAND nil nil) (<- util$fail_and_exit))
	(<- log$log "  Executing post-link command...")
	(? (<- _execute_command command_list$POST_LINK_COMMAND nil nil) (<- util$fail_and_exit))
))



(= build (. build_module_type
	build_extensions
	build_modules
	build_sll
	build_sll_cli
))
(## build)
