(---
	"@build-script/config.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"math.sll"
	"string.sll"
	"types.sll"
)



(= optimizer_node_data_type (&:
	array_type required_child_levels
	array_type conditions
))

(= optimizer_module_type (&:
	(~ func_type) generate_optimizer
))



(= generate_optimizer (,,,
	(<- log$log "Generating optimizer from '" config$OPTIMIZER_CONFIG_FILE_PATH "'...")
	(<- log$log "  Loading node types from '" config$OPTIMIZER_NODE_HEADER_FILE_PATH "'...")
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_NODE_HEADER_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= type_to_number ({> (= i 0) (< i ($ data))
		(= line (: data i))
		(++ i)
		(? (! (<- string$starts line "#define")) (<<<))
		(= line (<- string$split
			(<- string$trim
				(>> line 7)
			)
			' '
		))
		(= name (: line 0))
		(? (||
			(! (<- string$starts name config$OPTIMIZER_NODE_TYPE_PREFIX))
			(|: config$OPTIMIZER_IGNORED_NODE_TYPES name)
		) (<<<))
		(<- string$lower_case
			(>>
				name
				($ config$OPTIMIZER_NODE_TYPE_PREFIX)
			)
		)
		(:: (: line 1) int_type)
	))
	(= type_count ($ type_to_number))
	(<- log$log "  Reading configuration file...")
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_CONFIG_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= node_type_shift (+ (<- math$int_log2 type_count) 1))
	(= required_child_levels (<- array$create (<< type_count node_type_shift)))
	(<- log$log "  Generating code in '" config$OPTIMIZER_OUTPUT_FILE_PATH "'...")
	(= fh (<- file$open config$OPTIMIZER_OUTPUT_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_GENERATED_OPTIMIZER_H__
#define __SLL_GENERATED_OPTIMIZER_H__ 1
#include <sll/_internal/common.h>
#include <sll/_internal/optimizer.h>



#define OPTIMIZER_DATA_NODE_TYPE_SHIFT ` node_type_shift `



static const child_level_count_t _optimizer_required_child_levels[]={
	` (<- string$join ",\n\t" required_child_levels) `
};



static void __SLL_FORCE_INLINE _optimizer_execute(optimizer_node_children_data_t* data){
}



#endif
`)
	(<- file$close fh)
))



(= optimizer (. optimizer_module_type
	generate_optimizer
))
(## optimizer)
