(---
	"@build-script/config.sll"
	"@build-script/util.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"math.sll"
	"sort.sll"
	"string.sll"
	"types.sll"
)



(= node_condition_data_type (&:
	map_type children
	string_type code
))

(= node_condition_data_and_types_type (&:
	array_type possible_nodes
	node_condition_data_type data
))

(= optimizer_module_type (&:
	(~ func_type) generate_optimizer
))



(= _type_to_number nil)



(= _get_node_type (,,, type
	(? (|: _type_to_number type) (@@ (: _type_to_number type)))
	(:> "Unknown node type: '" type "'\n")
	(<- util$fail_and_exit)
))

(= _get_possible_nodes (,,, format
	(= format (<- string$trim format))
	(? (||
		(!== (: format 0) '{')
		(!== (: format -1) '}')
	) {
		(@@ [(<- _get_node_type format)])
	})
	(= format (<- string$split (: format 1 -1) '|'))
	(@@ (<- sort$sort ([> (= i 0) (< i ($ format))
		(= type (<- string$trim
			(<- string$lower_case
				(: format i)
			)
		))
		(++ i)
		(<- _get_node_type type)
	)))
))

(= _get_condition_object (,,, root condition
	(= condition (<- string$split condition '.'))
	(= out root)
	(-> (= i 0) (< i ($ condition))
		(= step (: condition i))
		(= possible_nodes (<- _get_possible_nodes step))
		(= condition_obj (: out$children possible_nodes))
		(? (! condition_obj) {
			(= condition_obj (. node_condition_data_type
				<>
				""
			))
			(= (: out$children possible_nodes) condition_obj)
		})
		(= out condition_obj)
		(++ i)
	)
	(@@ out)
))

(= _generate_children_condition (,,, fh possible_nodes indentation_str level
	(= child_bitmap (<- array$create
		(>>
			(+ ($ _type_to_number) 31)
			5
		)
	))
	(-> (= i 0) (< i ($ possible_nodes))
		(= type (: possible_nodes i))
		(= (: child_bitmap (>> type 5)) (|
			(: child_bitmap (>> type 5))
			(<< 1 (& type 31))
		))
		(++ i)
	)
	(= prev_level (- level 1))
	(<- file$write fh (<- string$join "||" ([> (= i 0) (< i ($ child_bitmap))
		(= mask (: child_bitmap i))
		(++ i)
		(? (! mask) (<<<))
		(+
			"data"
			prev_level
			"->child_type_bitmap["
			(- i 1)
			"]&"
			mask
		)
	))
`){
` indentation_str `	for (child_count_t idx` prev_level `=0;idx` prev_level `<data` prev_level `->child_count;idx` prev_level `++){
` indentation_str `		optimizer_node_children_data_t* data` level `=data` prev_level `->children+idx` prev_level `;
` indentation_str `		if (!data` level `->node){
` indentation_str `			continue;
` indentation_str `		}
` indentation_str `		if (` (<- string$join "||" ([> (= i 0) (< i ($ possible_nodes))
		(= type (: possible_nodes i))
		(++ i)
		(+
			"data"
			level
			"->node->type=="
			type
		)
	)))
))

(= _generate_root_condition (,,, fh possible_nodes
	(<- file$write fh (<- string$join "||" ([> (= i 0) (< i ($ possible_nodes))
		(= type (: possible_nodes i))
		(++ i)
		(+
			"data0->node->type=="
			type
		)
	)))
))

(= _generate_condition_code (,,, fh previous_conditions code indentation_str
	(? (! code) (@@))
	(= code (<- string$split code ','))
	(-> (= i 0) (< i ($ code))
		(= line (<- string$trim (: code i)))
		(? (! line) (<<<))
		(= line (<- string$split line '='))
		(? (!== ($ line) 2) (<<<))
		(= node_index (:: (: line 0) int_type))
		(? (=== (: line 1) "nop") {
			(<- file$write fh indentation_str "_delete_node(data" node_index ",data" (- node_index 1) "->node);\n")
		} {
			(= new_type (<- _get_node_type (: line 1)))
			(:> "Unimplemented!\n")
			(<- util$fail_and_exit)
		})
		(<- file$write fh indentation_str "return;\n")
		(++ i)
	)
))

(= _generate_code (,,, fh previous_conditions children level
	(= children (:: children array_type))
	(= data ([> (= i 0) (< i ($ children))
		(= possible_nodes (: children i))
		(++ i)
		(= data (: children i))
		(++ i)
		(. node_condition_data_and_types_type
			possible_nodes
			data
		)
	))
	(<- sort$sort data true true)
	(= indentation_str (* "\t" (+
		(?: (> level 1)
			(+ (* (- level 1) 3) 1)
			level
		)
		1
	)))
	(-> (= i 0) (< i ($ data))
		(= elem (: data i))
		(<- file$write fh indentation_str)
		(? i (<- file$write fh "else "))
		(<- file$write fh "if (")
		(<- (?: level
			_generate_children_condition
			_generate_root_condition
		) fh elem$possible_nodes indentation_str level)
		(<- file$write fh "){\n")
		(= current_conditions (+
			previous_conditions
			[elem$possible_nodes]
		))
		(? elem$data$children {
			(<- _generate_code fh current_conditions elem$data$children (+ level 1))
		})
		(<- _generate_condition_code fh current_conditions elem$data$code (+
			indentation_str
			(* "\t" (?: level
				3
				1
			))
		))
		(? level (<- file$write fh indentation_str "\t\t}\n" indentation_str "\t}\n"))
		(<- file$write fh indentation_str "}\n")
		(++ i)
	)
))

(= generate_optimizer (,,,
	(<- log$log "Generating optimizer from '" config$OPTIMIZER_CONFIG_FILE_PATH "'...")
	(<- log$log "  Loading node types from '" config$OPTIMIZER_NODE_HEADER_FILE_PATH "'...")
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_NODE_HEADER_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= _type_to_number ({> (= i 0) (< i ($ data))
		(= line (: data i))
		(++ i)
		(? (! (<- string$starts line "#define")) (<<<))
		(= line (<- string$split
			(<- string$trim
				(>> line 7)
			)
			' '
		))
		(= name (: line 0))
		(? (||
			(! (<- string$starts name config$OPTIMIZER_NODE_TYPE_PREFIX))
			(|: config$OPTIMIZER_IGNORED_NODE_TYPES name)
		) (<<<))
		(<- string$lower_case
			(>>
				name
				($ config$OPTIMIZER_NODE_TYPE_PREFIX)
			)
		)
		(:: (: line 1) int_type)
	))
	(= type_count ($ _type_to_number))
	(<- log$log "  Reading configuration file...")
	(= node_type_shift (+ (<- math$int_log2 type_count) 1))
	(= required_child_levels (<- array$create (<< type_count node_type_shift)))
	(= root (. node_condition_data_type
		<>
		[]
	))
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_CONFIG_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(-> (= i 0) (< i ($ data))
		(= line (<- string$trim (: data i)))
		(++ i)
		(? (||
			(! line)
			(=== (: line 0) '#')
		) (<<<))
		(= line (<- string$split line "->"))
		(= code (<- string$trim (: line 1)))
		(? (||
			(!== ($ line) 2)
			(! code)
		) (<<<))
		(= condition (<- _get_condition_object root (: line 0)))
		(= condition$code code)
	)
	(<- log$log "  Generating code in '" config$OPTIMIZER_OUTPUT_FILE_PATH "'...")
	(= fh (<- file$open config$OPTIMIZER_OUTPUT_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_GENERATED_OPTIMIZER_H__
#define __SLL_GENERATED_OPTIMIZER_H__ 1
#include <sll/_internal/common.h>
#include <sll/_internal/optimizer.h>



#define OPTIMIZER_DATA_NODE_TYPE_SHIFT ` node_type_shift `



static const child_level_count_t _optimizer_required_child_levels[]={
	`)
	(-> (= i 0) (< i ($ required_child_levels))
		(? i {
			(<- file$write fh ',')
			(? (! (% i config$BYTE_ARRAY_WRAP_SIZE)) (<- file$write fh "\n\t"))
		})
		(<- file$write fh (: required_child_levels i))
		(++ i)
	)
	(<- file$write fh
`
};



static void __SLL_FORCE_INLINE _optimizer_execute(optimizer_node_children_data_t* data0){
`)
	(<- _generate_code fh [] root$children 0)
	(<- file$write fh
`}



#endif
`)
	(<- file$close fh)
))



(= optimizer (. optimizer_module_type
	generate_optimizer
))
(## optimizer)
