(---
	"@build-script/config.sll"
	"@build-script/util.sll"
	"array.sll"
	"file.sll"
	"log.sll"
	"math.sll"
	"sort.sll"
	"string.sll"
	"types.sll"
)



(= node_condition_data_type (&:
	(~ map_type) children
	string_type code
))

(= node_condition_data_and_types_type (&:
	(~ array_type) possible_nodes
	(~ node_condition_data_type) data
))

(= range_type (&:
	(~ int_type) min
	(~ int_type) max
	(~ int_type) step
))

(= node_type_and_range_type (&:
	(~ int_type) node_type
	(~ int_type) required_length
	(~ array_type) properties
	(~ range_type) range
))

(= optimizer_module_type (&:
	(~ func_type) generate_optimizer
))



(= REQUIRED_LENGTH_IGNORED -1)
(= REQUIRED_LENGTH_EVEN -2)
(= REQUIRED_LENGTH_ODD -3)



(= _type_to_number nil)
(= _node_type_shift nil)



(= _get_node_type (,,, type
	(= required_length -1)
	(= properties [])
	(= min 0)
	(= max 0)
	(= step 1)
	(= idx (<- string$index type '['))
	(? (&&
		(!== idx -1)
		(=== (: type -1) ']')
	) {
		(= range (<- string$split (: type (+ idx 1) -1) ':'))
		(= type (: type 0 idx))
		(= min (:: (: range 0) int_type))
		(= max (:: (: range 1) int_type))
		(= step (:: (: range 2) int_type))
		(? (! step) (= step 1))
	})
	(= idx (<- string$index type '<'))
	(? (&&
		(!== idx -1)
		(=== (: type -1) '>')
	) {
		(= properties (<- string$split (: type (+ idx 1) -1) ','))
		(= type (: type 0 idx))
		(= properties ([> (= i 0) (< i ($ properties))
			(= elem (<- string$replace
				(: properties i)
				'='
				"=="
			))
			(++ i)
			elem
		))
	})
	(= idx (<- string$index type '@'))
	(? (!== idx -1) {
		(= required_length_str (>> type (+ idx 1)))
		(= type (: type 0 idx))
		(?
			(=== required_length_str "even") (= required_length REQUIRED_LENGTH_EVEN)
			(=== required_length_str "odd") (= required_length REQUIRED_LENGTH_ODD)
			{
				(= required_length (:: required_length_str int_type))
				(? (< required_length 0) (= required_length REQUIRED_LENGTH_IGNORED))
			}
		)
	})
	(? (|: _type_to_number type) (@@ (. node_type_and_range_type
		(: _type_to_number type)
		required_length
		properties
		[
			min
			max
			step
		]
	)))
	(:> "Unknown node type: '" type "'\n")
	(<- util$fail_and_exit)
))

(= _get_possible_nodes (,,, format variables
	(= format (<- string$trim format))
	(? (&&
		(=== (: format 0) '$')
		(|: variables format)
	) (= format (: variables format)))
	(? (||
		(!== (: format 0) '{')
		(!== (: format -1) '}')
	) {
		(@@ [(<- _get_node_type format)])
	})
	(= format (<- string$split (: format 1 -1) '|'))
	(@@ (<- sort$sort ([> (= i 0) (< i ($ format))
		(= type (<- string$trim
			(<- string$lower_case
				(: format i)
			)
		))
		(++ i)
		(<- _get_node_type type)
	) false false (,,, elem
		(@@ elem$node_type)
	)))
))

(= _get_condition_object (,,, root condition required_child_levels variables
	(= condition (<- string$split condition '.'))
	(= first_possible_nodes [])
	(= second_possible_nodes [])
	(= out root)
	(-> (= i 0) (< i ($ condition))
		(= step (: condition i))
		(= possible_nodes (<- _get_possible_nodes step variables))
		(?
			(! i) (= first_possible_nodes possible_nodes)
			(=== i 1) (= second_possible_nodes possible_nodes)
		)
		(= condition_obj (: out$children possible_nodes))
		(? (! condition_obj) {
			(= condition_obj (. node_condition_data_type
				<>
				""
			))
			(= (: out$children possible_nodes) condition_obj)
		})
		(= out condition_obj)
		(++ i)
	)
	(= length (- ($ condition) 2))
	(? (> length 0) {
		(-> (= i 0) (< i ($ first_possible_nodes))
			(= first (: first_possible_nodes i))
			(-> (= j 0) (< j ($ second_possible_nodes))
				(= second (: second_possible_nodes j))
				(= offset (|
					(<< first$node_type _node_type_shift)
					second$node_type
				))
				(= (: required_child_levels offset) (?: (> (: required_child_levels offset) length)
					(: required_child_levels offset)
					length
				))
				(++ j)
			)
			(++ i)
		)
	})
	(@@ out)
))

(= _generate_node_check (,,, data level
	(= parts [
		(+
			"data"
			level
			"->node->type=="
			data$node_type
		)
	])
	(?? data$required_length
		REQUIRED_LENGTH_IGNORED nil
		REQUIRED_LENGTH_EVEN (<- array$push parts (+
			"!(data"
			level
			"->child_count&1)"
		))
		REQUIRED_LENGTH_ODD (<- array$push parts (+
			"(data"
			level
			"->child_count&1)"
		))
		(<- array$push parts (+
			"data"
			level
			"->child_count=="
			data$required_length
		))
	)
	(-> (= i 0) (< i ($ data$properties))
		(<- array$push parts (+
			"data"
			level
			"->node->data."
			(: data$properties i)
		))
		(++ i)
	)
	(@@ (?: (=== ($ parts) 1)
		(: parts 0)
		(+ '(' (<- string$join "&&" parts) ')')
	))
))

(= _generate_children_condition (,,, fh possible_nodes indentation_str level
	(= child_bitmap (<- array$create
		(>>
			(+ ($ _type_to_number) 31)
			5
		)
	))
	(-> (= i 0) (< i ($ possible_nodes))
		(= type (: possible_nodes i))
		(= type type$node_type)
		(= (: child_bitmap (>> type 5)) (|
			(: child_bitmap (>> type 5))
			(<< 1 (& type 31))
		))
		(++ i)
	)
	(= prev_level (- level 1))
	(<- file$write fh (<- string$join "||" ([> (= i 0) (< i ($ child_bitmap))
		(= mask (: child_bitmap i))
		(++ i)
		(? (! mask) (<<<))
		(+
			"(data"
			prev_level
			"->child_type_bitmap["
			(- i 1)
			"]&"
			mask
			')'
		)
	))
`){
` indentation_str `	for (child_count_t idx` prev_level `=start` prev_level `;idx` prev_level `<end` prev_level `;idx` prev_level `+=step` prev_level `){
` indentation_str `		optimizer_node_children_data_t* data` level `=data` prev_level `->children+idx` prev_level `;
` indentation_str `		if (!data` level `->node){
` indentation_str `			continue;
` indentation_str `		}
` indentation_str `		if (` (<- string$join "||" ([> (= i 0) (< i ($ possible_nodes))
		(= data (: possible_nodes i))
		(++ i)
		(<- _generate_node_check data level)
	)))
))

(= _generate_root_condition (,,, fh possible_nodes
	(<- file$write fh (<- string$join "||" ([> (= i 0) (< i ($ possible_nodes))
		(= data (: possible_nodes i))
		(++ i)
		(<- _generate_node_check data 0)
	)))
))

(= _generate_bound (,,, level bound end?
	(@@ (?:
		(> bound 0)	(:: bound string_type)
		(< bound 0)	(+
			"(data"
			level
			"->child_count>"
			(- 0 bound)
			"?data"
			level
			"->child_count"
			bound
			":0)"
		)
		end? (+
			"data"
			level
			"->child_count"
		)
		"0"
	))
))

(= _generate_condition_code (,,, fh previous_conditions code indentation_str
	(? (! code) (@@))
	(= code (<- util$split_with_scope code ','))
	(-> (= i 0) (< i ($ code))
		(= line (<- string$trim (: code i)))
		(++ i)
		(? (! line) (<<<))
		(?
			(=== (: line 0) '"') {
				(<- file$write fh indentation_str (: line 1 -1) ";\n")
				(<<<)
			}
			(=== (: line 0) '*') {
				(= node_index (:: (>> line 1) int_type))
				(<- file$write fh indentation_str "_expand_node(data" node_index ",data" (- node_index 1) "->node);\n")
				(<<<)
			}
			(=== (: line 0) '#') {
				(= node_index (>> line 1))
				(= idx (<- string$index node_index '['))
				(? (||
					(=== idx -1)
					(!== (: node_index -1) ']')
				) {
					(= node_index (:: node_index int_type))
					(<- file$write fh indentation_str "_delete_node(data" node_index ",data" (- node_index 1) "->node);\n")
					(<<<)
				})
				(= range (<- string$split (: node_index (+ idx 1) -1) ':'))
				(= node_index (:: (: node_index 0 idx) int_type))
				(= min (:: (: range 0) int_type))
				(= max (:: (: range 1) int_type))
				(<- file$write fh
indentation_str `child_count_t del_end=` (<- _generate_bound node_index max true) `;
` indentation_str `for (child_count_t del=` (<- _generate_bound node_index min false) `;del<del_end;del++){
` indentation_str `	_delete_node(data` node_index `->children+del,data` node_index `->node);
` indentation_str `}
`)
				(<<<)
			}
		)
		(= line (<- string$split line '='))
		(? (!== ($ line) 2) (<<<))
		(= source (: line 0))
		(= idx (<- string$index source '.'))
		(? (!== idx -1) {
			(<- file$write fh indentation_str "data" (: source 0 idx) "->node->data." (>> source (+ idx 1)) '=' (: line 1) ";\n")
			(<<<)
		})
		(= node_index (:: source int_type))
		(= type (: line 1))
		(? (=== type "nop")
			(<- file$write fh indentation_str "_set_nop(data" node_index ");\n")
			(<- file$write fh indentation_str "data" node_index "->node->type=" (: (<- _get_node_type type) "node_type") ";\n")
		)
	)
	(<- file$write fh indentation_str "return;\n")
))

(= _generate_child_offsets (,,, fh possible_nodes indentation_str level
	(= range_to_types <>)
	(-> (= i 0) (< i ($ possible_nodes))
		(= elem (: possible_nodes i))
		(? (! (|: range_to_types elem$range)) (= (: range_to_types elem$range) []))
		(<- array$push (: range_to_types elem$range) elem)
		(++ i)
	)
	(= ranges (:: range_to_types array_type))
	(= ranges (<- sort$sort ([> (= i 0) (< i ($ ranges))
		(= range (: ranges i))
		(++ i)
		(= length ($ (: ranges i)))
		(++ i)
		[
			range
			length
		]
	) false false (,,, elem
		(@@ (: elem 1))
	))
	(= ranges ([> (= i 0) (< i ($ ranges))
		(= range (: ranges i))
		(++ i)
		(: range 0)
	))
	(? (=== ($ ranges) 1) {
		(= range (: ranges 0))
		(<- file$write fh
indentation_str `	child_count_t start` level `=` (<- _generate_bound level range$min false) `;
` indentation_str `	child_count_t end` level `=` (<- _generate_bound level range$max true) `;
` indentation_str `	child_count_t step` level `=` range$step `;
`)
	} {
		(<- file$write fh
indentation_str `	child_count_t start` level `;
` indentation_str `	child_count_t end` level `;
` indentation_str `	child_count_t step` level `;
`)
		(-> (= i 0) (< i ($ ranges))
			(= range (: ranges i))
			(= possible_types (: range_to_types range))
			(<- file$write fh indentation_str '\t')
			(?
				(=== i (- ($ ranges) 1)) (<- file$write fh "else")
				{
					(? i (<- file$write fh "else "))
					(<- file$write fh "if (" (<- string$join "||" ([> (= j 0) (< j ($ possible_types))
						(= data (: possible_types j))
						(++ j)
						(<- _generate_node_check data level)
					)) ')')
				}
			)
			(<- file$write fh
`{
` indentation_str `		start` level `=` (<- _generate_bound level range$min false) `;
` indentation_str `		end` level `=` (<- _generate_bound level range$max true) `;
` indentation_str `		step` level `=` range$step `;
` indentation_str `	}
`)
			(++ i)
		)
	})
))

(= _generate_code (,,, fh previous_conditions children level
	(= children (:: children array_type))
	(= data ([> (= i 0) (< i ($ children))
		(= possible_nodes (: children i))
		(++ i)
		(= data (: children i))
		(++ i)
		(. node_condition_data_and_types_type
			possible_nodes
			data
		)
	))
	(<- sort$sort data false true (,,, elem
		(@@ [
			(- 0 ($ elem$possible_nodes))
			elem$possible_nodes
		])
	))
	(= indentation_str (* "\t" (+
		(?: (> level 1)
			(+ (* (- level 1) 3) 1)
			level
		)
		1
	)))
	(-> (= i 0) (< i ($ data))
		(= elem (: data i))
		(<- file$write fh indentation_str)
		(? i (<- file$write fh "else "))
		(<- file$write fh "if (")
		(<- (?: level
			_generate_children_condition
			_generate_root_condition
		) fh elem$possible_nodes indentation_str level)
		(<- file$write fh "){\n")
		(= current_conditions (+
			previous_conditions
			[elem$possible_nodes]
		))
		(? elem$data$children {
			(<- _generate_child_offsets fh elem$possible_nodes (+
				indentation_str
				(?: level
					"\t\t"
					""
				)
			) level)
			(<- _generate_code fh current_conditions elem$data$children (+ level 1))
		})
		(<- _generate_condition_code fh current_conditions elem$data$code (+
			indentation_str
			(* "\t" (?: level
				3
				1
			))
		))
		(? level (<- file$write fh indentation_str "\t\t}\n" indentation_str "\t}\n"))
		(<- file$write fh indentation_str "}\n")
		(++ i)
	)
))

(= generate_optimizer (,,,
	(<- log$log "Generating optimizer from '" config$OPTIMIZER_CONFIG_FILE_PATH "'...")
	(<- log$log "  Loading node types from '" config$OPTIMIZER_NODE_HEADER_FILE_PATH "'...")
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_NODE_HEADER_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= _type_to_number ({> (= i 0) (< i ($ data))
		(= line (: data i))
		(++ i)
		(? (! (<- string$starts line "#define")) (<<<))
		(= line (<- string$split
			(<- string$trim
				(>> line 7)
			)
			' '
		))
		(= name (: line 0))
		(? (||
			(! (<- string$starts name config$OPTIMIZER_NODE_TYPE_PREFIX))
			(|: config$OPTIMIZER_IGNORED_NODE_TYPES name)
		) (<<<))
		(<- string$lower_case
			(>>
				name
				($ config$OPTIMIZER_NODE_TYPE_PREFIX)
			)
		)
		(:: (: line 1) int_type)
	))
	(<- log$log "  Reading configuration file...")
	(= _node_type_shift (+ (<- math$int_log2 ($ _type_to_number)) 1))
	(= required_child_levels (<- array$create (<< ($ _type_to_number) _node_type_shift)))
	(= root (. node_condition_data_type
		<>
		[]
	))
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPTIMIZER_CONFIG_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= included_header_files [])
	(= variables <>)
	(-> (= i 0) (< i ($ data))
		(= line (<- string$trim (: data i)))
		(++ i)
		(?
			(||
				(! line)
				(=== (: line 0) '#')
			) (<<<)
			(<- string$starts line "--") (<- array$push included_header_files (<- string$trim (>> line 2)))
		)
		(= idx (<- string$index line "->"))
		(? (=== idx -1) {
			(= idx (<- string$index line '='))
			(= name (<- string$trim (: line 0 idx)))
			(? (&&
				(!== idx -1)
				(=== (: name 0) '$')
			) (= (: variables name) (<- string$trim (>> line (+ idx 1)))))
			(<<<)
		})
		(= code (<- string$trim (>> line (+ idx 1))))
		(? (! code) (<<<))
		(= condition (<- _get_condition_object root (: line 0 idx) required_child_levels variables))
		(= condition$code code)
	)
	(<- log$log "  Generating code in '" config$OPTIMIZER_OUTPUT_FILE_PATH "'...")
	(= fh (<- file$open config$OPTIMIZER_OUTPUT_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_GENERATED_OPTIMIZER_H__
#define __SLL_GENERATED_OPTIMIZER_H__ 1
#include <sll/_internal/common.h>
#include <sll/_internal/optimizer.h>
#include <sll/node.h>
` (<- string$join "" ([> (= i 0) (< i ($ included_header_files))
	(= file_path (: included_header_files i))
	(++ i)
	(+
		"#include <"
		file_path
		">\n"
	)
)) `



#define OPTIMIZER_DATA_NODE_TYPE_SHIFT ` _node_type_shift `



static const child_level_count_t _optimizer_required_child_levels[]={
	`)
	(-> (= i 0) (< i ($ required_child_levels))
		(? i {
			(<- file$write fh ',')
			(? (! (% i config$OPTIMIZER_REQUIRED_CHILD_LEVELS_WRAP_SIZE)) (<- file$write fh "\n\t"))
		})
		(<- file$write fh (: required_child_levels i))
		(++ i)
	)
	(<- file$write fh
`
};



static void __SLL_FORCE_INLINE _optimizer_execute(sll_source_file_t* source_file,optimizer_node_children_data_t* data0){
`)
	(<- _generate_code fh [] root$children 0)
	(<- file$write fh
`}



#endif
`)
	(<- file$close fh)
))



(= optimizer (. optimizer_module_type
	generate_optimizer
))
(## optimizer)
