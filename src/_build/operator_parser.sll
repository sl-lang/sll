(--- "file.sll" "log.sll" "string.sll" "array.sll" "types.sll" "config.sll")



(= operator_type (&:
	string_type symbol
	string_type name
	string_type scope_variable
	string_type extra_flag
))

(= operator_parser_module_type (&:
	(~ func_type) generate_operator_parser
))



(= generate_operator_parser (,,,
	(<- log$log "Generating operator parser from '" config$OPERATOR_PARSER_CONFIG_FILE_PATH "'...")
	(<- log$log "  Reading configuration file...")
	(= data (<- string$split
		(<- file$read
			(<- file$open
				config$OPERATOR_PARSER_CONFIG_FILE_PATH
				"r"
			)
		)
		'\n'
	))
	(= max_operator_length 0)
	(= generator_data <>)
	(-> (= i 0) (< i ($ data))
		(= line (<- string$trim (: data i)))
		(++ i)
		(? (|| (! line) (=== (: line 0) ';')) (<<<))
		(= line (<- string$split line ' '))
		(? (=== ($ line) 1) (<<<))
		(= operator_length ($ (: line 0)))
		(? (> operator_length max_operator_length) (= max_operator_length operator_length))
		(= operator_array (: generator_data operator_length))
		(? (! operator_array) {
			(= operator_array [])
			(= (: generator_data operator_length) operator_array)
		})
		(= scope_variable "")
		(= extra_flag "")
		(-> (= j 2) (< j ($ line))
			(= modifier (: line j))
			(?
				(=== (: modifier 0) '$') (= scope_variable (>> modifier 1))
				modifier (= extra_flag modifier)
			)
			(++ j)
		)
		(<- array$push operator_array (. operator_type
			(: line 0)
			(: line 1)
			scope_variable
			extra_flag
		))
	)
	(<- log$log "  Generating code in '" config$OPERATOR_PARSER_OUTPUT_FILE_PATH "'...")
	(= fh (<- file$open config$OPERATOR_PARSER_OUTPUT_FILE_PATH "w"))
	(<- file$write fh
`#ifndef __SLL_GENERATED_OPERATOR_PARSER_H__
#define __SLL_GENERATED_OPERATOR_PARSER_H__ 1
#include <sll/_internal/common.h>
#include <sll/_internal/parse.h>
#include <sll/file.h>
#include <sll/node.h>
#include <sll/string.h>
#include <sll/types.h>



static __SLL_FORCE_INLINE sll_read_char_t _operator_parser(sll_node_t* o,sll_read_char_t c,unsigned int* fl,sll_source_file_t* sf,sll_file_t* rf){
	sll_char_t str[` (+ max_operator_length 1) `];
	sll_string_length_t sz=0;
	do{
		if (sz<` (+ max_operator_length 1) `){
			str[sz]=(sll_char_t)c;
			sz++;
		}
		c=sll_file_read_char(rf,NULL);
	} while (c<9||(c>13&&c!=' '&&c!='('&&c!=')'&&c!=';'&&c!=SLL_END_OF_DATA));
	o->t=SLL_NODE_TYPE_OPERATION_LIST;
`)
	(-> (= i 0) (< i max_operator_length)
		(++ i)
		(= operator_array (: generator_data i))
		(? (! operator_array) (<<<))
		(<- file$write fh
`	` (?: (=== i 1) "" "else ") `if (sz==` i `){
`)
		(-> (= j 0) (< j ($ operator_array))
			(= operator (: operator_array j))
			(= symbol_cmp (<- string$join "&&" ([> (= k 0) (< k ($ operator$symbol))
				(= cmp (+ "str[" k "]=='" (: operator$symbol k) "'"))
				(++ k)
				cmp
			)))
			(<- file$write fh
`		` (?: j "else " "") `if (` symbol_cmp `){
			o->t=SLL_NODE_TYPE_` (<- string$upper_case operator$name) `;
`)
			(? operator$scope_variable (<- file$write fh
`			o->dt.` operator$scope_variable `.sc=sf->_n_sc_id;
`))
			(? operator$extra_flag (<- file$write fh
`			(*fl)|=EXTRA_COMPILATION_DATA_` (<- string$upper_case operator$extra_flag) `;
`))
			(<- file$write fh "\t\t}\n")
			(++ j)
		)
		(<- file$write fh "\t}\n")
	)

	(<- file$write fh
`	return c;
}



#endif
`)
	(<- file$close fh)
))



(= operator_parser (. operator_parser_module_type
	generate_operator_parser
))
(## operator_parser)
