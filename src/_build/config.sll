(---
	"array.sll"
	"file.sll"
	"log.sll"
	"string.sll"
	"sys.sll"
	"time.sll"
	"types.sll"
)



(= COMMAND_MARKER_INCLUDE (. (&:)))
(= COMMAND_MARKER_INPUT (. (&:)))
(= COMMAND_MARKER_OUTPUT (. (&:)))

(= cli_options_types (&:
	(~ int_type) COVERAGE
	(~ int_type) DEBUG
	(~ int_type) RELEASE
	(~ int_type) RUN
	(~ int_type) TEST
	(~ int_type) VERBOSE
	(~ int_type) WEBSITE
))

(= platform_command_list_type (&:
	(~ array_type) COMPILATION_COMMAND
	(~ array_type) NASM_COMPILATION_COMMAND
	(~ array_type) NASM_POST_COMPILATION_COMMAND
	(~ array_type) LINK_COMMAND
	(~ array_type) POST_LINK_COMMAND
	(~ string_type) OUTPUT_PREFIX
))

(= platform_cli_command_list_type (&:
	(~ array_type) PRE_COMPILATION_COMMAND
	(~ array_type) COMPILATION_COMMAND
	(~ array_type) LINK_COMMAND
	(~ array_type) LINK_HEADLESS_COMMAND
	(~ array_type) POST_LINK_COMMAND
))

(= platform_extension_command_list_type (&:
	(~ array_type) COMPILATION_COMMAND
	(~ array_type) LINK_COMMAND
	(~ array_type) POST_LINK_COMMAND
	(~ string_type) OUTPUT_PREFIX
	(~ string_type) OUTPUT_LINK_PREFIX
))

(= config_module_type (&:
	(~ string_type) API_FUNCTION_TABLE_FILE_PATH
	(~ string_type) ASSEMBLY_OPTIMIZER_CONFIG_FILE_PATH
	(~ string_type) ASSEMBLY_OPTIMIZER_OUTPUT_FILE_PATH
	(~ int_type) ASSEMBLY_OPTIMIZER_STACK_SIZE
	(~ array_type) BUILD_CLEAR_FOLDERS
	(~ array_type) BUILD_CREATE_FOLDERS
	(~ int_type) BUILD_TIME
	(~ string_type) BUILTIN_LIBRARY_ROOT_FILE_PATH
	(~ array_type) BUILTIN_TYPES
	(~ int_type) BYTE_ARRAY_WRAP_SIZE
	(~ map_type) CLI_COMMANDS
	(~ (:? COMMAND_MARKER_INCLUDE)) COMMAND_MARKER_INCLUDE
	(~ (:? COMMAND_MARKER_INPUT)) COMMAND_MARKER_INPUT
	(~ (:? COMMAND_MARKER_OUTPUT)) COMMAND_MARKER_OUTPUT
	(~ map_type) COMMANDS
	(~ map_type) DEBUGGER_COMMAND
	(~ string_type) DOMAIN_ROOT
	(~ string_type) ERROR_HEADER_OUTPUT_DIRECTORY_PATH
	(~ string_type) ERROR_HEADER_SOURCE_DIRECTORY_PATH
	(~ array_type) ERROR_HEADERS
	(~ map_type) EXTENSION_COMMANDS
	(~ string_type) EXTENSION_DIRECTORY_FILE_PATH
	(~ string_type) EXTENSION_INCLUDE_FILE_PATH
	(~ string_type) EXTENSION_LIBRARY_ROOT_FILE_PATH
	(~ array_type) EXTENSION_MODULE_BUNDLE_GENERATION_COMMAND
	(~ array_type) EXTENSION_MODULE_DEBUG_BUNDLE_GENERATION_COMMAND
	(~ array_type) EXTENSION_MODULE_COMPILATION_COMMAND
	(~ map_type) EXTENSION_PLATFORM_SOURCE_FILE_PATH
	(~ array_type) EXTENSION_PREPROCESSOR_DEFINITIONS
	(~ string_type) EXTENSION_ROOT_SOURCE_FILE_PATH
	(~ array_type) HASHLIST_FILE_EXTENSIONS
	(~ string_type) HASHLIST_FILE_PATH
	(~ string_type) HASHLIST_ROOT_SOURCE_FILE_PATH
	(~ string_type) INCLUDE_ROOT_DIRECTORY_PATH
	(~ map_type) LIBRARY_HEADER_API_CALL
	(~ map_type) LIBRARY_HEADER_CHECK_OUTPUT
	(~ map_type) LIBRARY_HEADER_EXTERNAL
	(~ string_type) LIBRARY_HEADER_FILE_PATH
	(~ array_type) MODULE_BUNDLE_GENERATION_COMMAND
	(~ array_type) MODULE_DEBUG_BUNDLE_GENERATION_COMMAND
	(~ array_type) MODULE_COMPILATION_COMMAND
	(~ string_type) OPERATOR_PARSER_CONFIG_FILE_PATH
	(~ string_type) OPERATOR_PARSER_OUTPUT_FILE_PATH
	(~ string_type) OPTIMIZER_CONFIG_FILE_PATH
	(~ string_type) OPTIMIZER_OUTPUT_FILE_PATH
	(~ cli_options_types) OPTIONS
	(~ map_type) PREPROCESSOR_DEFINITION_PREFIX
	(~ array_type) PREPROCESSOR_DEFINITIONS
	(~ map_type) ROOT_PLATFORM_SOURCE_FILE_PATH
	(~ string_type) ROOT_SOURCE_FILE_PATH
	(~ array_type) SOURCE_FILE_EXTENSIONS
	(~ map_type) TYPE_REPLACEMENTS
	(~ string_type) VERSION
))



(= VERSION_FILE_PATH "src/sll/include/sll/version.h")



(= _read_version (,,,
	(= data (<- string$split
		(<- string$replace
			(<- file$read
				(<- file$open VERSION_FILE_PATH "r")
			)
			"\r\n"
			'\n'
		)
		'\n'
	))
	(= version ["0" "0" "0" nil])
	(-> (= i 0) (< i ($ data))
		(= line (<- string$trim (: data i)))
		(? (<- string$starts line "#define SLL_VERSION_") {
			(= line (<- string$split (>> line 20) ' '))
			(= (: version (?:
				(=== (: line 0) "MAJOR") 0
				(=== (: line 0) "MINOR") 1
				(=== (: line 0) "PATCH") 2
				3
			)) (: line 1))
		})
		(++ i)
	)
	(@@ (<- string$join "." (: version 0 3)))
))



(= options (. cli_options_types
	(|: sys$ARGV "--coverage")
	(|: sys$ARGV "--debug")
	(|: sys$ARGV "--release")
	(|: sys$ARGV "--run")
	(|: sys$ARGV "--test")
	(|: sys$ARGV "--verbose")
	(|: sys$ARGV "--web")
))

(? options$VERBOSE (<- log$set_global (| log$FLAG_DO_NOT_HIDE log$FLAG_NO_HEADER) 1))

(= build_time (<- time$time_ns))

(= defines [
	"__SLL_COMPILATION__"
	(+ "__SLL_TIME_RAW__=" build_time)
	(+ "__SLL_BUILD_" (<- string$upper_case sys$PLATFORM))
])
(= sha (: sys$ENVIRONMENT "GITHUB_SHA"))
(? sha (<- array$extend defines [
	(+ `__SLL_SHA__="` (: sha 0 7) `"`)
	(+ `__SLL_FULL_SHA__="` sha `"`)
]))
(= platform_defines (?: (=== sys$PLATFORM "windows")
	[
		"_WINDOWS"
		"WINDLL"
		"USERDLL"
		"WIN32_LEAN_AND_MEAN"
		"_CRT_SECURE_NO_WARNINGS"
		"NOGDICAPMASKS"
		"NOVIRTUALKEYCODES"
		"NOWINMESSAGES"
		"NOWINSTYLES"
		"NOSYSMETRICS"
		"NOMENUS"
		"NOICONS"
		"NOKEYSTATES"
		"NOSYSCOMMANDS"
		"NORASTEROPS"
		"NOSHOWWINDOW"
		"OEMRESOURCE"
		"NOATOM"
		"NOCLIPBOARD"
		"NOCOLOR"
		"NOCTLMGR"
		"NODRAWTEXT"
		"NOGDI"
		"NOKERNEL"
		"NOUSER"
		"NOMB"
		"NOMEMMGR"
		"NOMETAFILE"
		"NOMINMAX"
		"NOMSG"
		"NOOPENFILE"
		"NOSCROLL"
		"NOSERVICE"
		"NOSOUND"
		"NOTEXTMETRIC"
		"NOWH"
		"NOWINOFFSETS"
		"NOCOMM"
		"NOKANJI"
		"NOHELP"
		"NOPROFILER"
		"NODEFERWINDOWPOS"
		"NOMCX"
	]
	[
		"_GNU_SOURCE"
	]
))
(? (! options$RELEASE) (<- array$push platform_defines "DEBUG_BUILD"))
(<- array$extend defines platform_defines)
(= ext_defines (+
	[(+ "__SLL_BUILD_" (<- string$upper_case sys$PLATFORM))]
	platform_defines
))

(= version (<- _read_version))

(= output_library (+ "build/sll-" version sys$LIBRARY_EXTENSION))

(= output_executable_args (+
	[(+ "build/sll" sys$EXECUTABLE_EXTENSION)]
	(* ["-v"] options$VERBOSE)
))



(= config (. config_module_type
	"src/sll/api/_function_table.c"
	"src/sll/data/assembly_optimizer.txt"
	"src/sll/include/sll/generated/assembly_optimizer.h"
	5
	["build/lib/" "build/lib_debug/" "build/web/"]
	["build/lib/" "build/lib_debug/" "build/objects/"]
	build_time
	"src/sll/lib/"
	["void" "va_list" "__SLL_S1" "__SLL_U1" "__SLL_S8" "__SLL_U8" "__SLL_S16" "__SLL_U16" "__SLL_S32" "__SLL_U32" "__SLL_S64" "__SLL_U64" "__SLL_F32" "__SLL_F64"]
	16
	<
		"darwin" (. platform_cli_command_list_type
			nil
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-D" "__SLL_BUILD_DARWIN" "-I" "build" "-o" "build/objects/darwin_cli.o" "src/cli/linux.c"]
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-o" "build/sll" "build/objects/darwin_cli.o" "-ldl"]
			nil
			nil
		)
		"linux" (. platform_cli_command_list_type
			nil
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-D" "__SLL_BUILD_LINUX" "-I" "build" "-o" "build/objects/linux_cli.o" "src/cli/linux.c"]
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-o" "build/sll" "build/objects/linux_cli.o" "-ldl"]
			nil
			["strip" "build/sll" "-s" "-R" ".note.*" "-R" ".comment"]
		)
		"windows" (. platform_cli_command_list_type
			["rc.exe" "/r" "/fo" "build/app.res" "/nologo" "src/cli/rsrc/app.rc"]
			["cl.exe" "/c" "/permissive-" "/Zc:preprocessor" "/std:c11" "/Wv:18" "/GS" "/utf-8" "/W3" "/Zc:wchar_t" "/Gm-" "/sdl" "/Zc:inline" "/fp:precise" "/D" "NDEBUG" "/D" "_WINDOWS" "/D" "__SLL_BUILD_WINDOWS" "/D" "_CRT_SECURE_NO_WARNINGS" "/D" "WIN32_LEAN_AND_MEAN" "/errorReport:none" "/WX" "/Zc:forScope" "/Gd" "/Oi" "/EHsc" "/nologo" "/diagnostics:column" "/GL" "/Gy" "/O2" "/MD" "/I" "build" "/Fobuild/objects/windows_cli.o" "src/cli/windows.c"]
			["link.exe" "build/objects/windows_cli.o" "build/app.res" "/OUT:build/sll.exe" "/DYNAMICBASE" "/MACHINE:X64" "/SUBSYSTEM:CONSOLE" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/LTCG" "/OPT:REF" "/INCREMENTAL:NO" "/RELEASE"]
			["link.exe" "build/objects/windows_cli.o" "build/app.res" "/OUT:build/sllw.exe" "/DYNAMICBASE" "/MACHINE:X64" "/SUBSYSTEM:WINDOWS" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/LTCG" "/OPT:REF" "/INCREMENTAL:NO" "/RELEASE"]
			nil
		)
	>
	COMMAND_MARKER_INCLUDE
	COMMAND_MARKER_INPUT
	COMMAND_MARKER_OUTPUT
	<
		"darwin" (. platform_command_list_type
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-g" "-O0" "-Werror" "-I" "src/sll/include" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["nasm" "-I" "src/sll/include" "-D__SLL_BUILD_DARWIN" "-DDEBUG_BUILD" "-o" COMMAND_MARKER_OUTPUT "-O0" "-Wall" "-Werror" "-gdwarf" "-f" "macho64" COMMAND_MARKER_INPUT]
			nil
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-Werror" "-g" "-O0" "-o" output_library COMMAND_MARKER_INPUT "-lm" "-ldl" "-pthread"]
			nil
			""
		)
		"darwin_release" (. platform_command_list_type
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-I" "src/sll/include" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["nasm" "-I" "src/sll/include" "-D__SLL_BUILD_DARWIN" "-o" COMMAND_MARKER_OUTPUT "-O3" "-Wall" "-Werror" "-f" "macho64" COMMAND_MARKER_INPUT]
			nil
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-o" output_library COMMAND_MARKER_INPUT "-lm" "-ldl" "-pthread"]
			nil
			""
		)
		"linux" (. platform_command_list_type
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-g" "-O0" "-Werror" "-I" "src/sll/include" "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT] (* ["--coverage"] options$COVERAGE))
			["nasm" "-I" "src/sll/include" "-D__SLL_BUILD_LINUX" "-DDEBUG_BUILD" "-o" COMMAND_MARKER_OUTPUT "-O0" "-Wall" "-Werror" "-gdwarf" "-f" "elf64" COMMAND_MARKER_INPUT]
			["strip" "-x" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_OUTPUT]
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-Werror" "-g" "-O0" "-mavx" "-mavx2" "-o" output_library COMMAND_MARKER_INPUT "-lm" "-ldl" "-pthread"] (* ["--coverage"] options$COVERAGE))
			nil
			""
		)
		"linux_release" (. platform_command_list_type
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-I" "src/sll/include" "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT] (* ["-g"] options$DEBUG))
			["nasm" "-I" "src/sll/include" "-D__SLL_BUILD_LINUX" "-o" COMMAND_MARKER_OUTPUT "-O3" "-Wall" "-Werror" "-f" "elf64" COMMAND_MARKER_INPUT]
			["strip" "-x" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_OUTPUT]
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-mavx" "-mavx2" "-o" output_library COMMAND_MARKER_INPUT "-lm" "-ldl" "-pthread"] (* ["-g"] options$DEBUG))
			(* ["strip" output_library "-s" "-R" ".note.*" "-R" ".comment"] (! options$DEBUG))
			""
		)
		"windows" (. platform_command_list_type
			["cl.exe" "/c" "/permissive-" "/Zc:preprocessor" "/std:c11" "/Wv:18" "/GS" "/utf-8" "/W3" "/Zc:wchar_t" "/Gm-" "/sdl" "/Zc:inline" "/fp:precise" "/D" "_DEBUG" "/errorReport:none" "/WX" "/Zc:forScope" "/Gd" "/Oi" "/EHsc" "/nologo" "/diagnostics:column" "/Zi" "/Od" "/RTC1" "/MDd" "/I" "src/sll/include" "/Fdbuild/sll.pdb" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["nasm.exe" "-I" "src/sll/include" "-D__SLL_BUILD_WINDOWS" "-DDEBUG_BUILD" "-o" COMMAND_MARKER_OUTPUT "-O0" "-Wall" "-Werror" "-gcv8" "-f" "win64" COMMAND_MARKER_INPUT]
			nil
			["link.exe" (+ "/OUT:" output_library) "/DLL" "/DYNAMICBASE" "/MACHINE:X64" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/DEBUG" "/INCREMENTAL:NO" "/RELEASE" "/PDB:build/sll.pdb" "advapi32.lib" "bcrypt.lib" COMMAND_MARKER_INPUT]
			nil
			"/Fo"
		)
		"windows_release" (. platform_command_list_type
			["cl.exe" "/c" "/permissive-" "/Zc:preprocessor" "/std:c11" "/Wv:18" "/GS" "/utf-8" "/W3" "/Zc:wchar_t" "/Gm-" "/sdl" "/Zc:inline" "/fp:precise" "/D" "NDEBUG" "/errorReport:none" "/WX" "/Zc:forScope" "/Gd" "/Oi" "/EHsc" "/nologo" "/diagnostics:column" "/GL" "/Gy" "/O2" "/MD" "/I" "src/sll/include" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["nasm.exe" "-I" "src/sll/include" "-D__SLL_BUILD_WINDOWS" "-o" COMMAND_MARKER_OUTPUT "-Ox" "-Wall" "-Werror" "-f" "win64" COMMAND_MARKER_INPUT]
			nil
			["link.exe" (+ "/OUT:" output_library) "/DLL" "/DYNAMICBASE" "/MACHINE:X64" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/LTCG" "/OPT:NOREF" "/INCREMENTAL:NO" "/RELEASE" "advapi32.lib" "bcrypt.lib" COMMAND_MARKER_INPUT]
			nil
			"/Fo"
		)
	>
	<
		"darwin" ["lldb" "--"]
		"linux" ["gdb" "-ex" "r" "-iex" "set pagination off" "--args"]
		"windows" ["windbg"]
	>
	(?: (: sys$ENVIRONMENT "DOMAIN_ROOT") "" ".")
	"src/sll/include/sll/generated/"
	"src/sll/data/"
	[
		"cpuid_error.txt"
		"critical_error.txt"
		"help_text.txt"
		"memory_fail.txt"
	]
	<
		"darwin" (. platform_extension_command_list_type
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-g" "-O0" "-Werror" "-I" "build" "-I" COMMAND_MARKER_INCLUDE "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-Werror" "-g" "-O0" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			nil
			""
			""
		)
		"darwin_release" (. platform_extension_command_list_type
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-I" "build" "-I" COMMAND_MARKER_INCLUDE "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			nil
			""
			""
		)
		"linux" (. platform_extension_command_list_type
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-g" "-O0" "-Werror" "-I" "build" "-I" COMMAND_MARKER_INCLUDE "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-Werror" "-g" "-O0" "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			nil
			""
			""
		)
		"linux_release" (. platform_extension_command_list_type
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-fPIC" "-c" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-I" "build" "-I" COMMAND_MARKER_INCLUDE "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT] (* ["-g"] options$DEBUG))
			(+ ["gcc" "-fno-exceptions" "-fno-stack-protector" "-fdiagnostics-color=always" "-shared" "-fPIC" "-fvisibility=hidden" "-Wall" "-O3" "-Werror" "-mavx" "-mavx2" "-o" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT] (* ["-g"] options$DEBUG))
			(* ["strip" COMMAND_MARKER_OUTPUT "-s" "-R" ".note.*" "-R" ".comment"] (! options$DEBUG))
			""
			""
		)
		"windows" (. platform_extension_command_list_type
			["cl.exe" "/c" "/permissive-" "/Zc:preprocessor" "/std:c11" "/Wv:18" "/GS" "/utf-8" "/W3" "/Zc:wchar_t" "/Gm-" "/sdl" "/Zc:inline" "/fp:precise" "/D" "_DEBUG" "/errorReport:none" "/WX" "/Zc:forScope" "/Gd" "/Oi" "/EHsc" "/nologo" "/diagnostics:column" "/Zi" "/Od" "/RTC1" "/MDd" "/I" "build" "/I" COMMAND_MARKER_INCLUDE "/Fdbuild/sll.pdb" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["link.exe" COMMAND_MARKER_OUTPUT "/DLL" "/DYNAMICBASE" "/MACHINE:X64" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/DEBUG" "/INCREMENTAL:NO" "/RELEASE" "/PDB:build/sll.pdb" COMMAND_MARKER_INPUT]
			nil
			"/Fo"
			"/OUT:"
		)
		"windows_release" (. platform_extension_command_list_type
			["cl.exe" "/c" "/permissive-" "/Zc:preprocessor" "/std:c11" "/Wv:18" "/GS" "/utf-8" "/W3" "/Zc:wchar_t" "/Gm-" "/sdl" "/Zc:inline" "/fp:precise" "/D" "NDEBUG" "/errorReport:none" "/WX" "/Zc:forScope" "/Gd" "/Oi" "/EHsc" "/nologo" "/diagnostics:column" "/GL" "/Gy" "/O2" "/MD" "/I" "build" "/I" COMMAND_MARKER_INCLUDE COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT]
			["link.exe" COMMAND_MARKER_OUTPUT "/DLL" "/DYNAMICBASE" "/MACHINE:X64" "/ERRORREPORT:none" "/NOLOGO" "/TLBID:1" "/WX" "/LTCG" "/OPT:NOREF" "/INCREMENTAL:NO" "/RELEASE" COMMAND_MARKER_INPUT]
			nil
			"/Fo"
			"/OUT:"
		)
	>
	"src/ext/"
	"src/ext/<name>/include/"
	"src/ext/<name>/lib/"
	(+ output_executable_args ["-b" "-d" "-D" "-O" "-x" "5" "-n" "-N" "clib/" "-R" "-B" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT])
	(+ output_executable_args ["-b" "-n" "-N" "clib/" "-R" "-B" COMMAND_MARKER_OUTPUT COMMAND_MARKER_INPUT])
	(+ output_executable_args ["-c" "-R" "-I" "build/lib" "-I" COMMAND_MARKER_INCLUDE "-o" "build/lib/" COMMAND_MARKER_INPUT])
	<
		"darwin" "src/ext/<name>/platform/linux/"
		"linux" "src/ext/<name>/platform/linux/"
		"windows" "src/ext/<name>/platform/windows/"
	>
	ext_defines
	"src/ext/<name>/"
	[".asm" ".c" ".h" ".inc"]
	"build/.files"
	"src/"
	"src/sll/include/"
	<
		"darwin" "__attribute__((ms_abi)) "
		"linux" "__attribute__((ms_abi)) "
		"windows" ""
	>
	<
		"darwin" "__attribute__((warn_unused_result)) "
		"linux" "__attribute__((warn_unused_result)) "
		"windows" "_Must_inspect_result_ "
	>
	<
		"darwin" ""
		"linux" ""
		"windows" "__declspec(dllimport) "
	>
	"build/sll.h"
	(+ output_executable_args ["-b" "-d" "-D" "-O" "-x" "5" "-n" "-N" "/" "-R" "-B" "build/lib/stdlib.slb" COMMAND_MARKER_INPUT])
	(+ output_executable_args ["-b" "-n" "-N" "/" "-R" "-B" "build/lib_debug/stdlib.slb" COMMAND_MARKER_INPUT])
	(+ output_executable_args ["-c" "-R" "-I" "build/lib" "-I" "src/sll/lib" "-o" "build/lib/" COMMAND_MARKER_INPUT])
	"src/sll/data/operator_parser.txt"
	"src/sll/include/sll/generated/operator_parser.h"
	"src/sll/data/optimizer.txt"
	"src/sll/include/sll/generated/optimizer.h"
	options
	<
		"darwin" "-D"
		"linux" "-D"
		"windows" "/D"
	>
	defines
	<
		"darwin" "src/sll/platform/linux/"
		"linux" "src/sll/platform/linux/"
		"windows" "src/sll/platform/windows/"
	>
	"src/sll/"
	[".c" ".asm"]
	<
		"__SLL_S8" "signed char"
		"__SLL_U8" "unsigned char"
		"__SLL_S16" "signed short int"
		"__SLL_U16" "unsigned short int"
		"__SLL_S32" "signed int"
		"__SLL_U32" "unsigned int"
		"__SLL_S64" "signed long long int"
		"__SLL_U64" "unsigned long long int"
		"__SLL_F32" "float"
		"__SLL_F64" "double"
		"__SLL_S1" "signed char"
		"__SLL_U1" "_Bool"
	>
	version
))
(## config)
