(--- "types.sll" "string.sll" "array.sll" "error_codes.sll" "_internal.sll" "vm.sll" "thread.sll" "audit.sll")



(= call_stack_raw_type (&:
	(~ int_type) return_address
	(~ int_type) stack_offset
))

(= call_stack_type (&:
	(~ string_type) name
	(~ vm$location_type) return
	(~ call_stack_raw_type) raw
))

(= error_type (&:
	(,,, err
		(= nm (.? err$error_data))
		(= o (+
			(?: nm (+ nm ": ") "")
			(:: err$error_data string_type)
		))
		(-> (= i ($ err$backtrace)) i {
			(-- i)
			(= frame (: err$backtrace i))
			(= o (+ o (<- string$format "\nat %s:%u (%s)"
				frame$file
				frame$line
				frame$function
			)))
		})
		(@@ o)
	) @@string@@
	(~ object_type) error_data
	(~ array_type) backtrace
))

(= error_module_type (&:
	(~ type_type) call_stack_type
	(~ type_type) error_type
	(~ type_type) ERROR_ANY
	(~ type_type) ERROR_FILE_NOT_FOUND
	(~ type_type) ERROR_INTERNAL_ERROR
	(~ type_type) ERROR_INVALID_BASE64_CHARACTER
	(~ type_type) ERROR_INVALID_BASE64_PADDING
	(~ type_type) ERROR_INVALID_FILE_DESCRIPTOR
	(~ type_type) ERROR_LENGTH_MISMATCH
	(~ type_type) ERROR_NOT_ENOUGH_DATA
	(~ type_type) ERROR_OUT_OF_RANGE
	(~ type_type) ERROR_PATH_TOO_LONG
	(~ type_type) ERROR_SANDBOX
	(~ type_type) ERROR_UNKNOWN_TYPE
	(~ func_type) create
	(~ func_type) from_internal
	(~ func_type) get_call_stack
))



(= ERROR_ANY (&:
	(,,, dt
		(@@ dt$str)
	) @@string@@
	(~ string_type) str
))

(= ERROR_FILE_NOT_FOUND (&:
	(,,, dt
		(@@ (<- string$format "Unable to open file '%s': File not found" dt$fp))
	) @@string@@
	(~ string_type) fp
))

(= ERROR_INVALID_BASE64_CHARACTER (&:
	(,,, dt
		(@@ (<- string$format "Invalid Base64 character at offset %llu: '%c'" dt$offset dt$character))
	) @@string@@
	(~ int_type) offset
	(~ char_type) character
))

(= ERROR_INVALID_BASE64_PADDING (&:
	(,,,
		(@@ "Invalid Base64 padding")
	) @@string@@
))

(= ERROR_INVALID_FILE_DESCRIPTOR (&:
	(,,,
		(@@ "Invalid file descriptor")
	) @@string@@
))

(= ERROR_LENGTH_MISMATCH (&:
	(,,, dt
		(@@ (<- string$format "Expected equal lengths, got %llu and %llu" dt$len_a dt$len_b))
	) @@string@@
	(~ int_type) len_a
	(~ int_type) len_b
))

(= ERROR_NOT_ENOUGH_DATA (&:
	(,,, dt
		(@@ (<- string$format "Expected at minimum %llu elements, got %llu" dt$min dt$len))
	) @@string@@
	(~ int_type) len
	(~ int_type) min
))

(= ERROR_OUT_OF_RANGE (&:
	(,,, dt
		(@@ (<- string$format "Value '%lld' is not between %lld and %lld" dt$v dt$min dt$max))
	) @@string@@
	(~ int_type) v
	(~ int_type) min
	(~ int_type) max
))

(= ERROR_PATH_TOO_LONG (&:
	(,,,
		(@@ (<- string$format "Path exceeds %u characters" _MAX_PATH_SIZE))
	) @@string@@
))

(= ERROR_SANDBOX (&:
	(,,,
		(@@ "Feature disabled due to sandbox configuration")
	) @@string@@
))

(= ERROR_UNKNOWN_TYPE (&:
	(,,, dt
		(@@ (<- string$format "Unknown type: '%c'" dt$type))
	) @@string@@
	(~ char_type) type
))



(= _get_error_backtrace (,,,
	(= call_stack (<- (... "sll:error_get_call_stack") 1))
	(@@ ([> (= i 0) (< i ($ call_stack))
		(= k (: call_stack i))
		(++ i)
		(:: (: k 1) vm$location_type)
	))
))

(= create (,,, type @@data@@
	(? (=== type nil) (@@ nil))
	(= type (:: type type_type))
	(= bt (<- _get_error_backtrace))
	(<- audit$audit "sll.error.create" "iaa" type @@data@@ bt)
	(@@ (. error_type
		(:: @@data@@ type)
		bt
	))
))

(= from_internal (,,, err data
	(? (|| (!== (:? err) int_type) (=== err 0xffffffffffffffff)) (@@ nil))
	(<- audit$audit "sll.error.create.internal" "im" err data)
	(= id (& err 0xffffffff))
	(= v nil)
	(?? (>> err 32)
		1 (= v (: error_code$WINDOWS_ERROR_CODES id))
		2 (= v (: error_code$LIBC_ERROR_CODES id))
		(?? id
			1 (= v (. ERROR_FILE_NOT_FOUND
				(: data "fp")
			))
			2 (= v (. ERROR_INVALID_FILE_DESCRIPTOR))
			3 (= v (. ERROR_SANDBOX))
			4 (= v (. ERROR_PATH_TOO_LONG))
		)
	)
	(? (=== v nil)
		(= v (. ERROR_ANY (:: err string_type)))
	)
	(@@ (. error_type
		v
		(<- _get_error_backtrace)
	))
))

(= get_call_stack (,,, pop thr
	(= pop (:: pop int_type))
	(= call_stack (<- (... "sll:error_get_call_stack")
		(?: (< pop 0) 1 (+ pop 1))
		(?: (=== (:? thr) thread$thread_type) thr$id -1)
	))
	(@@ ([> (= i 0) (< i ($ call_stack))
		(= k (: call_stack i))
		(++ i)
		(:: k call_stack_type)
	))
))



(= error (. error_module_type
	call_stack_type
	error_type
	ERROR_ANY
	ERROR_FILE_NOT_FOUND
	error_codes$ERROR_INTERNAL_ERROR
	ERROR_INVALID_BASE64_CHARACTER
	ERROR_INVALID_BASE64_PADDING
	ERROR_INVALID_FILE_DESCRIPTOR
	ERROR_LENGTH_MISMATCH
	ERROR_NOT_ENOUGH_DATA
	ERROR_OUT_OF_RANGE
	ERROR_PATH_TOO_LONG
	ERROR_SANDBOX
	ERROR_UNKNOWN_TYPE
	create
	from_internal
	get_call_stack
))
(## error)
