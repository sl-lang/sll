(---
	"_file.sll"
	"_internal.sll"
	"array.sll"
	"audit.sll"
	"error_codes.sll"
	"string.sll"
	"types.sll"
	"vm.sll"
)



(= call_stack_raw_type (&:
	(~ int_type) return_address
	(~ int_type) stack_offset
))

(= call_stack_type (&:
	(~ vm$location_type) location
	(~ call_stack_raw_type) raw
))

(= error_type (&:
	(,,, err
		(= name (.? err$error_data))
		(= out (+
			(?: name (+ name ": ") "")
			(:: err$error_data string_type)
		))
		(-> (= i ($ err$backtrace)) i {
			(-- i)
			(= frame (: err$backtrace i))
			(= out (+ out (<- string$format "\nat %s:%u (%s)"
				frame$file
				frame$line
				frame$function
			)))
		})
		(@@ out)
	) @@string@@
	(~ object_type) error_data
	(~ array_type) backtrace
))

(= error_module_type (&:
	(~ type_type) call_stack_type
	(~ type_type) error_type
	(~ type_type) ERROR_ANY
	(~ type_type) ERROR_EOF
	(~ type_type) ERROR_FILE_NOT_FOUND
	(~ type_type) ERROR_INITIALIZATION
	(~ type_type) ERROR_INTERNAL_ERROR
	(~ type_type) ERROR_INVALID_BASE64_CHARACTER
	(~ type_type) ERROR_INVALID_BASE64_PADDING
	(~ type_type) ERROR_INVALID_FILE_DESCRIPTOR
	(~ type_type) ERROR_LENGTH_MISMATCH
	(~ type_type) ERROR_NOT_A_SOCKET
	(~ type_type) ERROR_NOT_ENOUGH_DATA
	(~ type_type) ERROR_OUT_OF_RANGE
	(~ type_type) ERROR_PATH_TOO_LONG
	(~ type_type) ERROR_SANDBOX
	(~ type_type) ERROR_STRING
	(~ type_type) ERROR_UNKNOWN_FUNCTION
	(~ type_type) ERROR_UNKNOWN_TYPE
	(~ func_type) create
	(~ func_type) from_internal
	(~ func_type) get_call_stack
))



(= ERROR_ANY (&:
	(,,, data
		(@@ data$str)
	) @@string@@
	(~ string_type) str
))

(= ERROR_EOF (&:
	(,,, data
		(@@ "End of file")
	) @@string@@
	(~ file_type) file
))

(= ERROR_FILE_NOT_FOUND (&:
	(,,, data
		(@@ (<- string$format "Unable to open file '%s': File not found" data$fp))
	) @@string@@
	(~ string_type) fp
))

(= ERROR_INITIALIZATION (&:
	(,,,
		(@@ "Initialization failure")
	) @@string@@
))

(= ERROR_INVALID_BASE64_CHARACTER (&:
	(,,, data
		(@@ (<- string$format "Invalid Base64 character at offset %llu: '%c'" data$offset data$character))
	) @@string@@
	(~ int_type) offset
	(~ char_type) character
))

(= ERROR_INVALID_BASE64_PADDING (&:
	(,,,
		(@@ "Invalid Base64 padding")
	) @@string@@
))

(= ERROR_INVALID_FILE_DESCRIPTOR (&:
	(,,,
		(@@ "Invalid file descriptor")
	) @@string@@
))

(= ERROR_LENGTH_MISMATCH (&:
	(,,, data
		(@@ (<- string$format "Expected equal lengths, got %llu and %llu" data$len_a data$len_b))
	) @@string@@
	(~ int_type) len_a
	(~ int_type) len_b
))

(= ERROR_NOT_A_SOCKET (&:
	(,,,
		(@@ "Not a osocket")
	) @@string@@
))

(= ERROR_NOT_ENOUGH_DATA (&:
	(,,, data
		(@@ (<- string$format "Expected at minimum %llu elements, got %llu" data$min data$len))
	) @@string@@
	(~ int_type) len
	(~ int_type) min
))

(= ERROR_OUT_OF_RANGE (&:
	(,,, data
		(@@ (<- string$format "Value '%lld' is not between %lld and %lld" data$v data$min data$max))
	) @@string@@
	(~ int_type) v
	(~ int_type) min
	(~ int_type) max
))

(= ERROR_PATH_TOO_LONG (&:
	(,,,
		(@@ (<- string$format "Path exceeds %u characters" _MAX_PATH_SIZE))
	) @@string@@
))

(= ERROR_SANDBOX (&:
	(,,, data
		(@@ (<- string$format "Feature disabled due to the '%s' sandbox flag" data$flag))
	) @@string@@
	(~ string_type) flag
))

(= ERROR_STRING (&:
	(,,, data
		(@@ data$string)
	) @@string@@
	(~ string_type) string
))

(= ERROR_UNKNOWN_FUNCTION (&:
	(,,, data
		(@@ (<- string$format "Unknown function: %u" data$function))
	) @@string@@
	(~ func_type) function
))

(= ERROR_UNKNOWN_TYPE (&:
	(,,, data
		(@@ (<- string$format "Unknown type: '%c'" data$type))
	) @@string@@
	(~ char_type) type
))



(= _get_error_backtrace (,,,
	(= call_stack (<- (... "sll:error_get_call_stack") 0 (!.)))
	(@@ ([> (= i 0) (< i (- ($ call_stack) 1))
		(= k (: call_stack i))
		(++ i)
		(:: (: k 0) vm$location_type)
	))
))

(= create (,,, type @@data@@
	(? (=== type nil) (@@ nil))
	(= type (:: type type_type))
	(= backtrace (<- _get_error_backtrace))
	(<- audit$audit "sll.error.create" "iaa" type @@data@@ backtrace)
	(@@ (. error_type
		(:: @@data@@ type)
		backtrace
	))
))

(= from_internal (,,, err data
	(? (|| (!== (:? err) int_type) (=== err 0xffffffffffffffff)) (@@ nil))
	(<- audit$audit "sll.error.create.internal" "im" err data)
	(= id (& err 0xff))
	(= extra (>> err 9))
	(= error_data nil)
	(? (& err 0x100)
		{
			(= error_data (: (: error_codes$SYSTEM_ERROR_CODES id)))
			(= error_data$raw_error extra)
		}
		(?? id
			1 (= error_data (. ERROR_FILE_NOT_FOUND
				(: data "path")
			))
			2 (= error_data (. ERROR_INVALID_FILE_DESCRIPTOR))
			3 (= error_data (. ERROR_SANDBOX
				(: _SANDBOX_FLAGS extra)
			))
			4 (= error_data (. ERROR_PATH_TOO_LONG))
			5 (= error_data (. ERROR_EOF
				(: data "file")
			))
			6 (= error_data (. ERROR_INVALID_BASE64_PADDING))
			7 (= error_data (. ERROR_INVALID_BASE64_CHARACTER
				extra
				(: (: data "string") extra)
			))
			8 (= error_data (. ERROR_STRING
				(<- (... "sll:error_get_error_string") err)
			))
			9 (= error_data (. ERROR_UNKNOWN_FUNCTION
				(: data "function")
			))
			10 (= error_data (. ERROR_NOT_A_SOCKET))
			11 (= error_data (. ERROR_INITIALIZATION))
		)
	)
	(? (=== error_data nil)
		(= error_data (. ERROR_ANY (:: err string_type)))
	)
	(@@ (. error_type
		error_data
		(<- _get_error_backtrace)
	))
))

(= get_call_stack (,,, pop thr
	(= pop (:: pop int_type))
	(= call_stack (<- (... "sll:error_get_call_stack")
		(?: (< pop 0) 0 pop)
		(?: thr thr$id (!.))
	))
	(@@ ([> (= i 0) (< i ($ call_stack))
		(= frame (: call_stack i))
		(++ i)
		(:: frame call_stack_type)
	))
))



(= error (. error_module_type
	call_stack_type
	error_type
	ERROR_ANY
	ERROR_EOF
	ERROR_FILE_NOT_FOUND
	ERROR_INITIALIZATION
	error_codes$ERROR_INTERNAL_ERROR
	ERROR_INVALID_BASE64_CHARACTER
	ERROR_INVALID_BASE64_PADDING
	ERROR_INVALID_FILE_DESCRIPTOR
	ERROR_LENGTH_MISMATCH
	ERROR_NOT_A_SOCKET
	ERROR_NOT_ENOUGH_DATA
	ERROR_OUT_OF_RANGE
	ERROR_PATH_TOO_LONG
	ERROR_SANDBOX
	ERROR_STRING
	ERROR_UNKNOWN_FUNCTION
	ERROR_UNKNOWN_TYPE
	create
	from_internal
	get_call_stack
))
(## error)
