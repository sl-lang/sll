(---
	"audit.sll"
	"error.sll"
	"map.sll"
	"string.sll"
	"types.sll"
	"weakref.sll"
)



(# STATE_RUNNING STATE_WAITING_THREAD STATE_WAITING_LOCK STATE_WAITING_SEMAPHORE STATE_WAITING_BARRIER STATE_TERMINATED _thread_map get)



(= barrier_type (&:
	(,,, data
		(<- (... "sll:thread_delete_barrier") data$id)
	) @@delete@@
	(,,, data
		(@@ (<- string$format "<barrier-%u counter=%u>" data$id data$counter))
	) @@string@@
	(~ int_type) id
	int_type counter
))

(= lock_type (&:
	(,,, data
		(<- (... "sll:thread_delete_lock") data$id)
	) @@delete@@
	(,,, data
		(= state (?: (=== data$blocking_thread -1)
			"unlocked"
			(+ "locked blocking_thread=" (<- string$str (<- get data$blocking_thread)))
		))
		(@@ (<- string$format "<lock-%u state=%s>" data$id state))
	) @@string@@
	(~ int_type) id
	int_type blocking_thread
))

(= semaphore_type (&:
	(,,, data
		(<- (... "sll:thread_delete_semaphore") data$id)
	) @@delete@@
	(,,, data
		(@@ (<- string$format "<semaphore-%u counter=%u/%u>" data$id data$counter data$max))
	) @@string@@
	(~ int_type) id
	(~ int_type) max
	int_type counter
))

(= thread_type (&:
	(,,, data
		(<- map$remove _thread_map data$id)
		(<- (... "sll:thread_delete") data$id)
	) @@delete@@
	(,,, data
		(= state nil)
		(?? data$state
			STATE_RUNNING (= state "running")
			STATE_WAITING_THREAD (= state (+ "waiting blocking=" (<- string$str (<- get data$blocking))))
			STATE_WAITING_LOCK (= state (+ "waiting blocking=" (<- string$str data$blocking)))
			STATE_WAITING_SEMAPHORE (= state (+ "waiting blocking=" (<- string$str data$blocking)))
			STATE_WAITING_BARRIER (= state (+ "waiting blocking=" (<- string$str data$blocking)))
			(= state (+ "terminated return_value=" (<- string$str data$return_value)))
		)
		(? (!== data$suspended -1) (= state (+
			state
			" suspended="
			(<- string$str (<- get data$suspended))
		)))
		(@@ (<- string$format "<thread-%u state=%s>" data$id state))
	) @@string@@
	(~ int_type) id
	int_type state
	object_type suspended
	object_type blocking
	object_type return_value
))

(= internal_thread_data_type (&:
	int_type instruction_index
	int_type stack_index
))

(= thread_module_type (&:
	(~ type_type) barrier_type
	(~ type_type) internal_thread_data_type
	(~ type_type) lock_type
	(~ type_type) semaphore_type
	(~ type_type) thread_type
	(~ int_type) STATE_RUNNING
	(~ int_type) STATE_TERMINATED
	(~ int_type) STATE_WAITING_BARRIER
	(~ int_type) STATE_WAITING_LOCK
	(~ int_type) STATE_WAITING_SEMAPHORE
	(~ int_type) STATE_WAITING_THREAD
	(~ func_type) acquire_lock
	(~ func_type) acquire_semaphore
	(~ func_type) create_barrier
	(~ func_type) create_lock
	(~ func_type) create_semaphore
	(~ func_type) current
	(~ func_type) exit
	(~ func_type) get
	(~ func_type) get_internal_data
	(~ func_type) if_equal
	(~ func_type) if_greater_equal
	(~ func_type) increase_barrier
	(~ func_type) join
	(~ func_type) release_lock
	(~ func_type) release_semaphore
	(~ func_type) reset_barrier
	(~ func_type) start
	(~ func_type) suspend
))



(= STATE_RUNNING 0)
(= STATE_SUSPENDED 1)
(= STATE_WAITING_THREAD 2)
(= STATE_WAITING_LOCK 3)
(= STATE_WAITING_SEMAPHORE 4)
(= STATE_WAITING_BARRIER 5)
(= STATE_TERMINATED 6)



(= _main_thread (. thread_type
	0
	STATE_RUNNING
	-1
	nil
	nil
))

(= _thread_map <>)



(= _thread_wrapper (,,, function args semaphore
	(= thr nil)
	(>- (= id (!.)) (=== thr nil)
		(= thr (<- get id))
	)
	(<- (... "sll:thread_release_semaphore") semaphore)
	(= out (<-* function args))
	(= thr$return_value out)
	(= thr$state STATE_TERMINATED)
	(@@ out)
))

(= acquire_lock (,,, lock
	(? (=== lock nil) (@@))
	(= lock (:: lock lock_type))
	(= thr (<- get (!.)))
	(= thr$blocking lock)
	(= thr$state STATE_WAITING_LOCK)
	(!<* lock$id)
	(= thr$state STATE_RUNNING)
	(= lock$blocking_thread (!.))
))

(= acquire_semaphore (,,, semaphore
	(? (=== semaphore nil) (@@))
	(= semaphore (:: semaphore semaphore_type))
	(= thr (<- get (!.)))
	(= thr$blocking semaphore)
	(= thr$state STATE_WAITING_SEMAPHORE)
	(!<+ semaphore$id)
	(= semaphore$counter (- semaphore$counter 1))
	(= thr$state STATE_RUNNING)
))

(= create_barrier (,,,
	(= id (<- (... "sll:thread_create_barrier")))
	(? (< id 0) (@@ (<- error$from_internal (~ id))))
	(@@ (. barrier_type
		id
		0
	))
))

(= create_lock (,,,
	(= id (<- (... "sll:thread_create_lock")))
	(? (< id 0) (@@ (<- error$from_internal (~ id))))
	(@@ (. lock_type
		id
		-1
	))
))

(= create_semaphore (,,, count
	(= count (:: count int_type))
	(? (<= count 0) (@@ nil))
	(= id (<- (... "sll:thread_create_semaphore") count))
	(? (< id 0) (@@ (<- error$from_internal (~ id))))
	(@@ (. semaphore_type
		id
		count
		count
	))
))

(= current (,,,
	(@@ (<- get (!.)))
))

(= exit (,,, ret
	(= thr (<- get (!.)))
	(= thr$return_value ret)
	(= thr$state STATE_TERMINATED)
	(!@@ ret)
))

(= get (,,, id
	(? (! id) (@@ _main_thread))
	(= thr (: _thread_map id))
	(@@ (?: thr
		(<- weakref$get thr)
		nil
	))
))

(= get_internal_data (,,, thr
	(? (=== thr nil) (@@ nil))
	(= thr (:: thr thread_type))
	(? (=== thr$state STATE_TERMINATED) (@@ nil))
	(@@ (:: (<- (... "sll:thread_get_internal_data") thr$id) internal_thread_data_type))
))

(= if_equal (,,, barrier value
	(? (=== barrier nil) (@@))
	(= barrier (:: barrier barrier_type))
	(= thr (<- get (!.)))
	(= thr$blocking barrier)
	(= thr$state STATE_WAITING_BARRIER)
	(!<= barrier$id (:: value int_type))
	(= thr$state STATE_RUNNING)
))

(= if_greater_equal (,,, barrier value
	(? (=== barrier nil) (@@))
	(= barrier (:: barrier barrier_type))
	(= thr (<- get (!.)))
	(= thr$blocking barrier)
	(= thr$state STATE_WAITING_BARRIER)
	(!<> barrier$id (:: value int_type))
	(= thr$state STATE_RUNNING)
))

(= increase_barrier (,,, barrier
	(? (=== barrier nil) (@@))
	(= barrier (:: barrier barrier_type))
	(= barrier$counter (<- (... "sll:thread_increase_barrier") barrier$id))
))

(= join (,,, thr
	(? (=== thr nil) (@@))
	(= thr (:: thr thread_type))
	(? (=== thr$state STATE_TERMINATED) (@@))
	(= c_thr (<- get (!.)))
	(= c_thr$blocking thr$id)
	(= c_thr$state STATE_WAITING_THREAD)
	(!<< thr$id)
	(= c_thr$state STATE_RUNNING)
))

(= release_lock (,,, lock
	(? (=== lock nil) (@@))
	(= lock (:: lock lock_type))
	(? (=== lock$blocking_thread -1) (@@))
	(= lock$blocking_thread -1)
	(@@ (<- (... "sll:thread_release_lock") lock$id))
))

(= release_semaphore (,,, semaphore
	(? (=== semaphore nil) (@@))
	(= semaphore (:: semaphore semaphore_type))
	(? (=== semaphore$counter semaphore$max) (@@))
	(= semaphore$counter (+ semaphore$counter 1))
	(@@ (<- (... "sll:thread_release_semaphore") semaphore$id))
))

(= reset_barrier (,,, barrier
	(? (=== barrier nil) (@@))
	(= barrier (:: barrier barrier_type))
	(= barrier$counter 0)
	(@@ (<- (... "sll:thread_reset_barrier") barrier$id))
))

(= start (,,, function @@args@@
	(?
		(=== function nil) (@@ nil)
		(=== (:? function) thread_type) {
			(? (=== function$suspended -1) (@@ nil))
			(= function$suspended -1)
			(<- (... "sll:thread_restart") function$id)
			(@@ 1)
		}
	)
	(= function (:: function func_type))
	(= semaphore (<- (... "sll:thread_create_semaphore") 0))
	(= tid (<- (... "sll:thread_create")
		_thread_wrapper
		[
			function
			@@args@@
			semaphore
		]
	))
	(? (< tid 0) {
		(<- (... "sll:thread_delete_semaphore") semaphore)
		(@@ (<- error$from_internal (~ tid)))
	})
	(= out (. thread_type
		tid
		STATE_RUNNING
		-1
		nil
		nil
	))
	(= (: _thread_map tid) (<- weakref$ref out))
	(!<+ semaphore)
	(<- audit$audit "sll.thread.create" "iai" function @@args@@ tid)
	(<- (... "sll:thread_delete_semaphore") semaphore)
	(@@ out)
))

(= suspend (,,, thr
	(? (=== thr nil) (@@))
	(= thr (:: thr thread_type))
	(? (=== thr$state STATE_TERMINATED) (@@))
	(<- (... "sll:thread_suspend") thr$id)
	(= thr$suspended (!.))
))



(= thread (. thread_module_type
	barrier_type
	internal_thread_data_type
	lock_type
	semaphore_type
	thread_type
	STATE_RUNNING
	STATE_TERMINATED
	STATE_WAITING_BARRIER
	STATE_WAITING_LOCK
	STATE_WAITING_SEMAPHORE
	STATE_WAITING_THREAD
	acquire_lock
	acquire_semaphore
	create_barrier
	create_lock
	create_semaphore
	current
	exit
	get
	get_internal_data
	if_equal
	if_greater_equal
	increase_barrier
	join
	release_lock
	release_semaphore
	reset_barrier
	start
	suspend
))
(## thread)
