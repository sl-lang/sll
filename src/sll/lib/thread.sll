(--- "types.sll" "string.sll")



(# STATE_RUNNING STATE_WAITING_THREAD STATE_WAITING_LOCK STATE_WAITING_SEMAPHORE STATE_WAITING_BARRIER STATE_TERMINATED thread_map)



(= barrier_type (&:
	(,,, dt
		(@@ (<- string$format "<barrier-%u counter=%u>" dt$id dt$counter))
	) @@string@@
	(~ int_type) id
	int_type counter
))

(= lock_type (&:
	(,,, dt
		(= state (?: (=== dt$blocking_thread -1)
			"unlocked"
			(+ "locked blocking_thread=" (<- string$str (: thread_map dt$blocking_thread)))
		))
		(@@ (<- string$format "<lock-%u state=%s>" dt$id state))
	) @@string@@
	(~ int_type) id
	int_type blocking_thread
))

(= semaphore_type (&:
	(,,, dt
		(@@ (<- string$format "<semaphore-%u counter=%u/%u>" dt$id dt$counter dt$max))
	) @@string@@
	(~ int_type) id
	(~ int_type) max
	int_type counter
))

(= thread_type (&:
	(,,, dt
		(= state nil)
		(?? dt$state
			STATE_RUNNING (= state "running")
			STATE_WAITING_THREAD (= state (+ "waiting blocking=" (<- string$str (: thread_map dt$blocking))))
			STATE_WAITING_LOCK (= state (+ "waiting blocking=" (<- string$str dt$blocking)))
			STATE_WAITING_SEMAPHORE (= state (+ "waiting blocking=" (<- string$str dt$blocking)))
			STATE_WAITING_BARRIER (= state (+ "waiting blocking=" (<- string$str dt$blocking)))
			(= state (+ "terminated return_value=" (<- string$str dt$return_value)))
		)
		(@@ (<- string$format "<thread-%u state=%s>" dt$id state))
	) @@string@@
	(~ int_type) id
	int_type state
	object_type blocking
	object_type return_value
))

(= thread_module_type (&:
	(~ type_type) barrier_type
	(~ type_type) lock_type
	(~ type_type) semaphore_type
	(~ type_type) thread_type
	(~ int_type) STATE_RUNNING
	(~ int_type) STATE_TERMINATED
	(~ int_type) STATE_WAITING_BARRIER
	(~ int_type) STATE_WAITING_LOCK
	(~ int_type) STATE_WAITING_SEMAPHORE
	(~ int_type) STATE_WAITING_THREAD
	(~ func_type) acquire_lock
	(~ func_type) acquire_semaphore
	(~ func_type) create_barrier
	(~ func_type) create_lock
	(~ func_type) create_semaphore
	(~ func_type) currenct
	(~ func_type) get
	(~ func_type) if_equal
	(~ func_type) if_greater_equal
	(~ func_type) join
	(~ func_type) release_lock
	(~ func_type) release_semaphore
	(~ func_type) reset_barrier
	(~ func_type) start
))



(= STATE_RUNNING 0)
(= STATE_WAITING_THREAD 1)
(= STATE_WAITING_LOCK 2)
(= STATE_WAITING_SEMAPHORE 3)
(= STATE_WAITING_BARRIER 4)
(= STATE_TERMINATED 5)



(= thread_map <0 (. thread_type
	0
	STATE_RUNNING
	nil
	nil
)>)



(= _thread_runner (,,, fn args
	(= o (<-* fn args))
	(= thr nil)
	(>- (= id (!.)) (=== thr nil)
		(= thr (: thread_map id))
	)
	(= thr$return_value o)
	(= thr$state STATE_TERMINATED)
	(@@ o)
))

(= acquire_lock (,,, lck
	(? (=== lck nil) (@@))
	(= lck (:: lck lock_type))
	(= thr (: thread_map (!.)))
	(= thr$blocking lck)
	(= thr$state STATE_WAITING_LOCK)
	(!<* lck$id)
	(= thr$state STATE_RUNNING)
	(= lck$blocking_thread (!.))
))

(= acquire_semaphore (,,, sem
	(? (=== sem nil) (@@))
	(= sem (:: sem semaphore_type))
	(= thr (: thread_map (!.)))
	(= thr$blocking sem)
	(= thr$state STATE_WAITING_SEMAPHORE)
	(!<+ sem$id)
	(= sem$counter (- sem$counter 1))
	(= thr$state STATE_RUNNING)
))

(= create_lock (,,,
	(@@ (. lock_type
		(<- (... "sll:thread_create_lock"))
		-1
	))
))

(= create_semaphore (,,, c
	(= c (:: c int_type))
	(? (<= c 0) (@@ nil))
	(@@ (. semaphore_type
		(<- (... "sll:thread_create_semaphore") c)
		c
		c
	))
))

(= current (,,,
	(@@ (: thread_map (!.)))
))

(= get (,,, id
	(@@ (: thread_map id))
))

(= join (,,, thr
	(? (=== thr nil) (@@))
	(= thr (:: thr thread_type))
	(? (!== thr$state STATE_TERMINATED) {
		(= c_thr (: thread_map (!.)))
		(= c_thr$blocking thr$id)
		(= c_thr$state STATE_WAITING_THREAD)
		(!<< thr$id)
		(= c_thr$state STATE_RUNNING)
	})
))

(= release_lock (,,, lck
	(? (=== lck nil) (@@))
	(= lck (:: lck lock_type))
	(? (=== lck$blocking_thread -1) (@@))
	(= lck$blocking_thread -1)
	(@@ (<- (... "sll:thread_release_lock") lck$id))
))

(= release_semaphore (,,, sem
	(? (=== sem nil) (@@))
	(= sem (:: sem semaphore_type))
	(? (=== sem$counter sem$max) (@@))
	(= sem$counter (+ sem$counter 1))
	(@@ (<- (... "sll:thread_release_semaphore") sem$id))
))

(= start (,,, fn @@args@@
	(= tid (<- (... "sll:thread_create")
		_thread_runner
		[
			(:: fn func_type)
			@@args@@
		]
	))
	(= o (. thread_type
		tid
		STATE_RUNNING
		nil
		nil
	))
	(= (: thread_map tid) o)
	(@@ o)
))



(= thread (. thread_module_type
	barrier_type
	lock_type
	semaphore_type
	thread_type
	STATE_RUNNING
	STATE_TERMINATED
	STATE_WAITING_BARRIER
	STATE_WAITING_LOCK
	STATE_WAITING_SEMAPHORE
	STATE_WAITING_THREAD
	acquire_lock
	acquire_semaphore
	create_barrier
	create_lock
	create_semaphore
	current
	get
	if_equal
	if_greater_equal
	join
	release_lock
	release_semaphore
	reset_barrier
	start
))
(## thread)
