(---
	"string.sll"
	"types.sll"
)



(= factor_type (&:
	(,,, dt
		(? (< dt$power 2) {
			(@@ (:: dt$prime string_type))
		})
		(@@ (<- string$format "%llu^%llu" dt$prime dt$power))
	) @@string@@
	int_type prime
	int_type power
))

(= math_module_type (&:
	(~ type_type) factor_type
	(~ float_type) 1_DIV_PI
	(~ float_type) 1_DIV_SQRT2
	(~ float_type) 2_DIV_PI
	(~ float_type) DEG_TO_RAD
	(~ float_type) E
	(~ float_type) LN10
	(~ float_type) LN2
	(~ float_type) LOG10E
	(~ float_type) LOG2E
	(~ float_type) PI
	(~ float_type) PI_DIV_2
	(~ float_type) PI_DIV_4
	(~ float_type) RAD_TO_DEG
	(~ float_type) SQRT2
	(~ float_type) TAU
	(~ func_type) abs
	(~ func_type) acos
	(~ func_type) acosh
	(~ func_type) asin
	(~ func_type) asinh
	(~ func_type) atan
	(~ func_type) atan2
	(~ func_type) atanh
	(~ func_type) cbrt
	(~ func_type) combinations
	(~ func_type) cos
	(~ func_type) cosh
	(~ func_type) ceil
	(~ func_type) copy_sign
	(~ func_type) euler_phi
	(~ func_type) exp
	(~ func_type) factorial
	(~ func_type) factors
	(~ func_type) floor
	(~ func_type) gcd
	(~ func_type) int_log2
	(~ func_type) int_pow
	(~ func_type) int_sqrt
	(~ func_type) log
	(~ func_type) log2
	(~ func_type) log10
	(~ func_type) permutations
	(~ func_type) pow
	(~ func_type) round
	(~ func_type) sign
	(~ func_type) sin
	(~ func_type) sinh
	(~ func_type) sqrt
	(~ func_type) tan
	(~ func_type) tanh
))



(= 1_DIV_PI 0.318309886183790671538)
(= 1_DIV_SQRT2 0.707106781186547524401)
(= 2_DIV_PI 0.636619772367581343076)
(= DEG_TO_RAD 0.01745329251994329547)
(= E 2.71828182845904523536)
(= LN10 2.30258509299404568402)
(= LN2 0.693147180559945309417)
(= LOG10E 0.434294481903251827651)
(= LOG2E 1.44269504088896340736)
(= PI 3.14159265358979323846)
(= PI_DIV_2 1.57079632679489661923)
(= PI_DIV_4 0.785398163397448309616)
(= RAD_TO_DEG 57.29577951308232286465)
(= SQRT2 1.41421356237309504880)
(= TAU 6.28318530717958647692)



(= abs (... "sll:math_abs"))

(= acos (... "sll:math_acos"))

(= acosh (... "sll:math_acosh"))

(= asin (... "sll:math_asin"))

(= asinh (... "sll:math_asinh"))

(= atan (... "sll:math_atan"))

(= atan2 (... "sll:math_atan2"))

(= atanh (... "sll:math_atanh"))

(= cbrt (... "sll:math_cbrt"))

(= combinations (... "sll:math_combinations"))

(= cos (... "sll:math_cos"))

(= cosh (... "sll:math_cosh"))

(= ceil (... "sll:math_ceil"))

(= copy_sign (... "sll:math_copy_sign"))

(= euler_phi (... "sll:math_euler_phi"))

(= exp (... "sll:math_exp"))

(= factorial (... "sll:math_factorial"))

(= factors (,,, number
	(= number (:: number int_type))
	(= neg [])
	(? (< number 0) {
		(= neg [(. factor_type -1 1)])
		(= number (- 0 number))
	})
	(= factors (<- (... "sll:math_factors") number))
	(@@ (+ neg
		([> (= i 0) (< i ($ factors))
			(= factor (: factors i))
			(++ i)
			(:: factor factor_type)
		)
	))
))

(= floor (... "sll:math_floor"))

(= gcd (... "sll:math_gcd"))

(= int_log2 (... "sll:math_int_log2"))

(= int_pow (... "sll:math_int_pow"))

(= int_sqrt (... "sll:math_int_sqrt"))

(= log (... "sll:math_log"))

(= log2 (... "sll:math_log2"))

(= log10 (... "sll:math_log10"))

(= permutations (... "sll:math_permutations"))

(= pow (... "sll:math_pow"))

(= round (... "sll:math_round"))

(= sign (,,, value
	(@@ (?:
		(< value 0) -1
		(> value 0) 1
		0
	)
))

(= sin (... "sll:math_sin"))

(= sinh (... "sll:math_sinh"))

(= sqrt (... "sll:math_sqrt"))

(= tan (... "sll:math_tan"))

(= tanh (... "sll:math_tanh"))



(= math (. math_module_type
	factor_type
	1_DIV_PI
	1_DIV_SQRT2
	2_DIV_PI
	DEG_TO_RAD
	E
	LN10
	LN2
	LOG10E
	LOG2E
	PI
	PI_DIV_2
	PI_DIV_4
	RAD_TO_DEG
	SQRT2
	TAU
	abs
	acos
	acosh
	asin
	asinh
	atan
	atan2
	atanh
	cbrt
	combinations
	cos
	cosh
	ceil
	copy_sign
	euler_phi
	exp
	factorial
	factors
	floor
	gcd
	int_log2
	int_pow
	int_sqrt
	log
	log2
	log10
	permutations
	pow
	round
	sign
	sin
	sinh
	sqrt
	tan
	tanh
))
(## math)
