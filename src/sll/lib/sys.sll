(---
	"_internal.sll"
	"array.sll"
	"date.sll"
	"error.sll"
	"map.sll"
	"path.sll"
	"string.sll"
	"types.sll"
)



(= version_type (&:
	(,,, data
		(@@ (<- string$format "sll-v%u.%u.%u" data$major data$minor data$patch))
	) @@string@@
	(~ int_type) major
	(~ int_type) minor
	(~ int_type) patch
	(~ string_type) commit
	(~ string_type) full_commit
	(~ string_type) url
	(~ date$date_type) time
))

(= sys_module_type (&:
	(~ array_type) ARGV
	(~ int_type) CPU_COUNT
	(~ map_type) ENVIRONMENT
	(~ string_type) EXECUTABLE
	(~ string_type) EXECUTABLE_EXTENSION
	(~ string_type) LIBRARY
	(~ string_type) LIBRARY_EXTENSION
	(~ string_type) PLATFORM
	(~ string_type) ROOT_PATH
	(~ array_type) SANDBOX_FLAGS
	(~ version_type) VERSION
	(~ func_type) get_env
	(~ func_type) get_sandbox_flags
	(~ func_type) load_library
	(~ func_type) remove_env
	(~ func_type) set_sandbox_flags
	(~ func_type) set_env
))



(= ARGV (<- (... "sll:sys_get_args")))

(= CPU_COUNT (<- (... "sll:sys_get_cpu_count")))

(= ENVIRONMENT (<- (... "sll:sys_get_env")))

(= EXECUTABLE (<- (... "sll:sys_get_executable")))
(= EXECUTABLE_EXTENSION (?: (=== _PLATFORM "windows") ".exe" ""))

(= LIBRARY (<- (... "sll:sys_get_library")))
(= LIBRARY_EXTENSION (?: (=== _PLATFORM "windows") ".dll" ".so"))

(= ROOT_PATH (+ (<- path$absolute (: (<- path$split LIBRARY) 0)) path$SEPARATOR))

(= raw_version_data (<- (... "sll:sys_get_version")))
(= commit (: raw_version_data 3))
(= short_commit "")
(= url "")
(? commit {
	(= short_commit (: commit 0 7))
	(= url (<- string$format "https://github.com/sl-lang/sll/tree/sll-v%u.%u.%u"
		(: raw_version_data 0)
		(: raw_version_data 1)
		(: raw_version_data 2)
	))
})
(= VERSION (. version_type
	(: raw_version_data 0)
	(: raw_version_data 1)
	(: raw_version_data 2)
	short_commit
	commit
	url
	(<- date$from_time_ns (: raw_version_data 4))
))



(= get_env (,,, k default
	(@@ (|| (: ENVIRONMENT (<- string$upper_case (<- string$replace (:: k string_type) '=' ""))) default))
))

(= get_sandbox_flags (,,,
	(= flags (<- (... "sll:sys_get_sandbox_flags")))
	(= i 0)
	(= out [])
	(-> nil flags
		(? (& flags 1)
			(<- array$push out (: _SANDBOX_FLAGS i))
		)
		(= flags (>> flags 1))
		(++ i)
	)
	(@@ out)
))

(= load_library (,,, file_path
	(? (! file_path) (@@ nil))
	(= file_path (:: file_path string_type))
	(@@ (<- error$from_internal
		(<- (... "sll:sys_load_library")
			file_path
		)
		<
			"path" file_path
		>
	))
)

(= remove_env (,,, key
	(? (! key) (@@ nil))
	(= key (<- string$replace (:: key string_type) '=' ""))
	(<- map$remove ENVIRONMENT key)
	(<- (... "sll:sys_remove_env") key)
))

(= set_sandbox_flags (,,, @@flags@@
	(= out 1)
	(-> (= i 0) (< i ($ @@flags@@))
		(= j (<- array$index _SANDBOX_FLAGS (:: (: @@flags@@ i) string_type)))
		(? (=== j -1)
			(= out 0)
			(<- (... "sll:sys_set_sandbox_flag") j)
		)
		(++ i)
	)
	(@@ out)
))

(= set_env (,,, key value
	(?
		(! key) (@@)
		(! value) (@@ (<- remove_env key))
	)
	(= key (<- string$replace (:: key string_type) '=' ""))
	(= value (:: value string_type))
	(= (: ENVIRONMENT key) value)
	(<- (... "sll:sys_set_env") key value)
))



(= sys (. sys_module_type
	ARGV
	CPU_COUNT
	ENVIRONMENT
	EXECUTABLE
	EXECUTABLE_EXTENSION
	LIBRARY
	LIBRARY_EXTENSION
	_PLATFORM
	ROOT_PATH
	_SANDBOX_FLAGS
	VERSION
	get_env
	get_sandbox_flags
	load_library
	remove_env
	set_sandbox_flags
	set_env
))
(## sys)
