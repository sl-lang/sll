(---
	"array.sll"
	"types.sll"
)



(= audit_module_type (&:
	(~ map_type) EVENT_ARGUMENTS
	(~ func_type) audit
	(~ func_type) register
	(~ func_type) register_event
	(~ func_type) unregister
))



(= EVENT_ARGUMENTS <
	"sll.cli.start" ["arguments"]
	"sll.error.backtrace" ["thread"]
	"sll.error.create" ["type" "data" "backtrace"]
	"sll.error.create.internal" ["error_code" "data"]
	"sll.file.copy" ["src" "dst"]
	"sll.file.delete" ["path"]
	"sll.file.open" ["path" "mode"]
	"sll.file.rename" ["src" "dst"]
	"sll.object.new" ["template" "data"]
	"sll.path.cwd.set" ["path"]
	"sll.path.dir.create" ["path" "recursive"]
	"sll.path.dir.list" ["path" "recursive"]
	"sll.process.start.shell" ["command"]
	"sll.process.start" ["arguments" "cwd" "stdin"]
	"sll.serial.object.decode" ["file"]
	"sll.serial.object.encode" ["file" "objects"]
	"sll.sys.env.delete" ["key"]
	"sll.sys.env.set" ["key" "value"]
	"sll.sys.library.load" ["path" "name"]
	"sll.sys.sandbox.set" ["flag"]
	"sll.thread.create" ["func" "args" "thread"]
	"sll.thread.return" ["thread"]
	"sll.vm.init" []
	"sll.vm.location" ["location"]
	"sll.vm.ref" ["object"]
	"sll.vm.shutdown" []
>)



(= _cb_list [])



(= _call_user_cb (,,, name raw
	(= keys (: EVENT_ARGUMENTS name))
	(= data ({> (= i 0) (< i ($ keys))
		(= k (: keys i))
		(= v (: raw i))
		(++ i)
		k v
	))
	(-> (= i 0) (< i ($ _cb_list))
		(<- (: _cb_list i) name data raw)
		(++ i)
	)
))

(= audit (... "sll:audit_audit"))

(= register (,,, fn
	(<- array$push _cb_list (:: fn func_type))
))

(= register_event (,,, name @@args@@
	(? (|: EVENT_ARGUMENTS name) (@@ false))
	(= (: EVENT_ARGUMENTS name) ([> (= i 0) (< i ($ @@args@@))
		(= arg (: @@args@@ i))
		(++ i)
		(:: arg string_type)
	))
	(@@ true)
))

(= unregister (,,, fn
	(<- array$remove _cb_list (:: fn func_type))
))



(<- (... "sll:audit__init") _call_user_cb)



(= audit (. audit_module_type
	EVENT_ARGUMENTS
	audit
	register
	register_event
	unregister
))
(## audit)
