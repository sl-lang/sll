(---
	"math.sll"
	"types.sll"
)



(# gauss2)



(= random_module_type (&:
	(~ func_type) choice
	(~ func_type) gauss
	(~ func_type) gauss2
	(~ func_type) get_char
	(~ func_type) get_float
	(~ func_type) get_int
	(~ func_type) get_string
	(~ func_type) shuffle
	(~ func_type) triangular
))



(= _next_gauss nil)



(= choice (,,, data
	(?? (:? data)
		int_type (@@ (<- (... "sll:random_get_int") 0 (- data 1)))
		float_type (@@ (<- (... "sll:get_float") 0 data))
		char_type (@@ (: data (<- (... "sll:random_get_int") 0 (- data 1))))
		string_type (@@ (: data (<- (... "sll:random_get_int") 0 (- ($ data) 1))))
		map_type (@@ (: (:: data map_key_type) (<- (... "sll:random_get_int") 0 (- ($ data) 1))))
		{
			(= data (:: data array_type))
			(@@ (: data (<- (... "sll:random_get_int") 0 (- ($ data) 1))))
		}
	)
))

(= gauss (,,, mu sigma
	(= out _next_gauss)
	(? (!== out nil) {
		(= _next_gauss nil)
		(@@ out)
	} {
		(= data (<- gauss2))
		(= _next_gauss (: data 0))
		(= out (: data 1))
	})
	(@@ (+ mu (* out sigma)))
))

(= gauss2 (,,,
	(= u (<- math$sqrt (* -2 (<- math$log (<- (... "sll:random_get_float") 0 1)))))
	(= v (* (<- (... "sll:random_get_float") 0 1) math$TAU))
	(@@ [
		(* u (<- math$sin v))
		(* u (<- math$cos v))
	])
))

(= get_char (,,, min max
	(= min (:: min char_type))
	(= max (:: max char_type))
	(? (=== min max) {
		(= min 0)
		(= max 255)
	})
	(@@ (:: (<- (... "sll:random_get_int")
		min
		max
	) char_type))
))

(= get_float (,,, min max
	(= min (:: min float_type))
	(= max (:: max float_type))
	(@@ (<- (... "sll:random_get_float")
		min
		(?: (=== min max) (+ max 1) max)
	))
))

(= get_int (,,, min max
	(= min (:: min int_type))
	(= max (:: max int_type))
	(@@ (<- (... "sll:random_get_int")
		min
		(?: (=== min max) (+ max 1) max)
	))
))

(= get_string (,,, l min max
	(= l (:: l int_type))
	(? (< l 1) {
		(@@ "")
	})
	(= min (:: min char_type))
	(= max (:: max char_type))
	(? (< max min) {
		(= max 255)
	} (=== min max) {
		(? min (@@ (* (:: min string_type) l)))
		(= max 255)
	})
	(@@ (<- (... "sll:random_get_string")
		l
		min
		max
	))
))

(= shuffle (,,, arr
	(? (|| (!== (:? arr) array_type) (< ($ arr) 2)) (@@))
	(-> (= i ($ arr)) (> i 1)
		(-- i)
		(= j (<- (... "sll:random_get_int") 0 i))
		(= tmp (: arr i))
		(= (: arr i) (: arr j))
		(= (: arr j) tmp)
	)
))

(= triangular (,,, a b c
	(? (=== a b) (@@ a))
	(= u (<- (... "sll:random_get_float") 0 1))
	(@@ (?: (< u (/ (- c a) (- b a)))
		(+ a (<- math$sqrt (* u (- b a) (- c a))))
		(- b (<- math$sqrt (* (- 1 u) (- b a) (- b c))))
	))
))



(= random (. random_module_type
	choice
	gauss
	gauss2
	get_char
	get_float
	get_int
	get_string
	shuffle
	triangular
))
(## random)
