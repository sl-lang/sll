(---
	"array.sll"
	"error.sll"
	"file.sll"
	"string.sll"
	"sys.sll"
	"types.sll"
)



(# FLAG_PASS_STDIN FLAG_CAPTURE_STDOUT FLAG_CAPTURE_STDERR FLAG_WAIT)



(= process_config_type (&:
	(,,, dt {
		(= fl [])
		(? (& dt$flags FLAG_PASS_STDIN) (<- array$push fl "FLAG_PASS_STDIN"))
		(? (& dt$flags FLAG_PASS_STDOUT) (<- array$push fl "FLAG_PASS_STDOUT"))
		(? (& dt$flags FLAG_PASS_STDERR) (<- array$push fl "FLAG_PASS_STDERR"))
		(? (& dt$flags FLAG_WAIT) (<- array$push fl "FLAG_WAIT"))
		(@@ (<- string$format "<cwd=\"%s\" flags=%s>"
			dt$cwd
			(<- string$join ", " fl)
		))
	}) @@string@@
	string_type cwd
	int_type flags
))

(= stream_data_type (&:
	(,,, dt {
		(@@ (<- string$format "<in=\"%s\" out=\"%s\" err=\"%s\">"
			dt$stdin
			dt$stdout
			dt$stderr
		))
	}) @@string@@
	(~ string_type) stdin
	(~ string_type) stdout
	(~ string_type) stderr
))

(= process_type (&:
	array_type args
	process_config_type cfg
	(~ int_type) return_code
	(~ stream_data_type) streams
))

(= process_module_type (&:
	(~ type_type) process_config_type
	(~ process_config_type) DEFAULT_PROCESS_CONFIG
	(~ int_type) FLAG_PASS_STDIN
	(~ int_type) FLAG_CAPTURE_STDOUT
	(~ int_type) FLAG_CAPTURE_STDERR
	(~ int_type) FLAG_WAIT
	(~ int_type) PID
	(~ string_type) SHELL_PATH
	(~ func_type) join
	(~ func_type) shell
	(~ func_type) split
	(~ func_type) start
))



(= FLAG_PASS_STDIN 1)
(= FLAG_CAPTURE_STDOUT 2)
(= FLAG_CAPTURE_STDERR 4)
(= FLAG_WAIT 8)

(= DEFAULT_PROCESS_CONFIG (. process_config_type
	"."
	FLAG_WAIT
))

(= PID (<- (... "sll:process_get_pid")))

(= SHELL_PATH (?: (=== sys$platform "windows") "C:\\Windows\\System32\\cmd.exe" "/bin/sh"))



(= join (... "sll:process_join"))

(= shell (,,, cmd no_flush_io
	(? (! cmd) (@@ nil))
	(? (! no_flush_io) {
		(<- file$flush file$stdout)
		(<- file$flush file$stderr)
	})
	(@@ (<- error$from_internal (<- (... "sll:process_execute_shell")
		(:: cmd string_type)
	)))
)

(= split (... "sll:process_split"))

(= start (,,, args cfg stdin no_flush_io
	(? (! no_flush_io) {
		(<- file$flush file$stdout)
		(<- file$flush file$stderr)
	})
	(= cfg (?: cfg (:: cfg process_config_type) DEFAULT_PROCESS_CONFIG))
	(@@ (:: (<- (... "sll:process_start")
		(?: (=== (:? args) string_type) [args] (:: args array_type))
		cfg$cwd
		cfg$flags
		(?: stdin (:: stdin string_type) "")
	) process_type))
))



(= process (. process_module_type
	process_config_type
	DEFAULT_PROCESS_CONFIG
	FLAG_PASS_STDIN
	FLAG_CAPTURE_STDOUT
	FLAG_CAPTURE_STDERR
	FLAG_WAIT
	PID
	SHELL_PATH
	join
	shell
	split
	start
))
(## process)
