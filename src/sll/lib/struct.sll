(---
	"array.sll"
	"error.sll"
	"string.sll"
	"types.sll"
)



(# STRUCT_ELEM_TYPE_INT STRUCT_ELEM_TYPE_FLOAT STRUCT_ELEM_TYPE_PADDING STRUCT_ELEM_TYPE_MASK STRUCT_ELEM_SIZE_BIT STRUCT_ELEM_SIZE_BYTE STRUCT_ELEM_SIZE_WORD STRUCT_ELEM_SIZE_DWORD STRUCT_ELEM_SIZE_QWORD STRUCT_ELEM_SIZE_BINARY32 STRUCT_ELEM_SIZE_BINARY64 STRUCT_ELEM_SIZE_SHIFT STRUCT_ELEM_SIZE_MASK STRUCT_ELEM_SIGNED)



(= struct_type (&:
	(,,, data {
		(? data$_fmt_str (@@ data$_fmt_str))
		(= out "<")
		(-> (= i 0) (< i ($ data$_format))
			(= elem (: data$_format i))
			(?? (& elem STRUCT_ELEM_TYPE_MASK)
				STRUCT_ELEM_TYPE_INT {
					(?? (& elem STRUCT_ELEM_SIZE_MASK)
						STRUCT_ELEM_SIZE_BIT {
							(= out (+ out '?'))
						}
						STRUCT_ELEM_SIZE_BYTE {
							(= out (+ out 'B'))
						}
						STRUCT_ELEM_SIZE_WORD {
							(= out (+ out 'H'))
						}
						STRUCT_ELEM_SIZE_DWORD {
							(= out (+ out 'I'))
						}
						STRUCT_ELEM_SIZE_QWORD {
							(= out (+ out 'Q'))
						}
					)
					(? (& elem STRUCT_ELEM_SIGNED) {
						(= (: out -1) (+ (: out -1) 32))
					})
				}
				STRUCT_ELEM_TYPE_FLOAT {
					(= out (+
						out
						(?: (=== (& elem STRUCT_ELEM_SIZE_MASK) STRUCT_ELEM_SIZE_BINARY32) 'f' 'd')
					))
				}
				STRUCT_ELEM_TYPE_PADDING {
					(= out (+
						out
						(* "-" (>> elem STRUCT_ELEM_SIZE_SHIFT))
					))
				}
			)
			(++ i)
		)
		(= out (+ out '>'))
		(= data$_fmt_str out)
		(@@ out)
	}) @@string@@
	(~ int_type) size
	(~ int_type) data_size
	(~ array_type) _format
	string_type _fmt_str
))

(= struct_module_type (&:
	(~ func_type) create
	(~ func_type) decode
	(~ func_type) encode
))



(= STRUCT_ELEM_TYPE_INT 0b00)
(= STRUCT_ELEM_TYPE_FLOAT 0b01)
(= STRUCT_ELEM_TYPE_PADDING 0b10)

(= STRUCT_ELEM_TYPE_MASK 0b11)

(= STRUCT_ELEM_SIZE_BIT 0b00000)
(= STRUCT_ELEM_SIZE_BYTE 0b00100)
(= STRUCT_ELEM_SIZE_WORD 0b01000)
(= STRUCT_ELEM_SIZE_DWORD 0b01100)
(= STRUCT_ELEM_SIZE_QWORD 0b10000)
(= STRUCT_ELEM_SIZE_BINARY32 0b00000)
(= STRUCT_ELEM_SIZE_BINARY64 0b01000)

(= STRUCT_ELEM_SIZE_SHIFT 2)
(= STRUCT_ELEM_SIZE_MASK 0b11100)

(= STRUCT_ELEM_SIGNED 0b100000)



(= format_code_data_type (&:
	(~ int_type) size
	(~ int_type) flags
))

(= FORMAT_CODE_DATA <
	'?' (. format_code_data_type 1 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_BIT))
	'b' (. format_code_data_type 1 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_BYTE STRUCT_ELEM_SIGNED))
	'B' (. format_code_data_type 1 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_BYTE))
	'h' (. format_code_data_type 2 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_WORD STRUCT_ELEM_SIGNED))
	'H' (. format_code_data_type 2 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_WORD))
	'i' (. format_code_data_type 4 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_DWORD STRUCT_ELEM_SIGNED))
	'I' (. format_code_data_type 4 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_DWORD))
	'q' (. format_code_data_type 8 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_QWORD STRUCT_ELEM_SIGNED))
	'Q' (. format_code_data_type 8 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_QWORD))
	'f' (. format_code_data_type 4 (| STRUCT_ELEM_TYPE_FLOAT STRUCT_ELEM_SIZE_BINARY32))
	'd' (. format_code_data_type 8 (| STRUCT_ELEM_TYPE_FLOAT STRUCT_ELEM_SIZE_BINARY64))
	'P' (. format_code_data_type 8 (| STRUCT_ELEM_TYPE_INT STRUCT_ELEM_SIZE_QWORD))
>)



(= _check_range (,,, value min max
	(@@ (?: (|| (< value min) (> value max))
		(<- error$create error$ERROR_OUT_OF_RANGE value min max)
		nil
	))
))

(= _add_padding (,,, size total_size out
	(= pad (& total_size (- size 1)))
	(? (! pad) (@@ 0))
	(= pad (- size pad))
	(<- array$push out (| STRUCT_ELEM_TYPE_PADDING (<< pad STRUCT_ELEM_SIZE_SHIFT)))
	(@@ pad)
))

(= create (,,, data ignore_padding?
	(? (=== data nil) (@@ nil))
	(= data (:: data string_type))
	(= max_size 0)
	(= padding_total 0)
	(= total_size 0)
	(= out [])
	(-> (= i 0) (< i ($ data)) {
		(= type (: data i))
		(= fmt_code (: FORMAT_CODE_DATA type))
		(? (=== fmt_code nil) (@@ (<- error$create error$ERROR_UNKNOWN_TYPE type)))
		(? (> fmt_code$size max_size) (= max_size fmt_code$size))
		(? (! ignore_padding?) {
			(= pad (<- _add_padding fmt_code$size total_size out))
			(= padding_total (+ padding_total pad))
			(= total_size (+ total_size pad))
		})
		(<- array$push out fmt_code$flags)
		(= total_size (+ total_size fmt_code$size))
		(++ i)
	})
	(? (! ignore_padding?) {
		(= pad (<- _add_padding max_size total_size out))
		(= padding_total (+ padding_total pad))
		(= total_size (+ total_size pad))
	})
	(@@ (. struct_type
		total_size
		(- total_size padding_total)
		out
	))
))

(= decode (,,, fmt data
	(? (=== fmt nil) (@@ ""))
	(= fmt (:: fmt struct_type))
	(= data (:: data string_type))
	(= out [])
	(-> (= i 0) (< i ($ fmt$_format))
		(= elem (: fmt$_format i))
		(?? (& elem STRUCT_ELEM_TYPE_MASK)
			STRUCT_ELEM_TYPE_INT {
				(= sgn (& elem STRUCT_ELEM_SIGNED))
				(?? (& elem STRUCT_ELEM_SIZE_MASK)
					STRUCT_ELEM_SIZE_BIT {
						(<- array$push out (:: int_type (!! (: data 0))))
						(= data (>> data 1))
					}
					STRUCT_ELEM_SIZE_BYTE {
						(= value (:: (: data 0) int_type))
						(= data (>> data 1))
						(<- array$push out
							(?: value (?: sgn (~ (& (~ value) 0xff)) value) 0)
						)
					}
					STRUCT_ELEM_SIZE_WORD {
						(= value (|
							(: data 0)
							(<< (: data 1) 8)
						))
						(= data (>> data 2))
						(<- array$push out
							(?: value (?: sgn (~ (& (~ value) 0xffff)) value) 0)
						)
					}
					STRUCT_ELEM_SIZE_DWORD {
						(= value (|
							(: data 0)
							(<< (: data 1) 8)
							(<< (: data 2) 16)
							(<< (: data 3) 24)
						))
						(= data (>> data 4))
						(<- array$push out
							(?: value (?: sgn (~ (& (~ value) 0xffffffff)) value) 0)
						)
					}
					STRUCT_ELEM_SIZE_QWORD {
						(<- array$push out (|
							(: data 0)
							(<< (: data 1) 8)
							(<< (: data 2) 16)
							(<< (: data 3) 24)
							(<< (: data 4) 32)
							(<< (: data 5) 40)
							(<< (: data 6) 48)
							(<< (: data 7) 56)
						))
						(= data (>> data 8))
					}
				)
			}
			STRUCT_ELEM_TYPE_FLOAT {
				(= value (|
					(: data 0)
					(<< (: data 1) 8)
					(<< (: data 2) 16)
					(<< (: data 3) 24)
				))
				(? (=== (& elem STRUCT_ELEM_SIZE_MASK) STRUCT_ELEM_SIZE_BINARY32) {
					(= value (<- (... "sll:struct_float_from_bits") value))
					(= data (>> data 4))
				} {
					(= value (<- (... "sll:struct_double_from_bits") (|
						value
						(<< (: data 4) 32)
						(<< (: data 5) 40)
						(<< (: data 6) 48)
						(<< (: data 7) 56)
					)))
					(= data (>> data 8))
				})
				(<- array$push out value)
			}
			STRUCT_ELEM_TYPE_PADDING {
				(= data (>> data (>> elem STRUCT_ELEM_SIZE_SHIFT)))
			}
		)
		(++ i)
		)
	(@@ out)
))

(= encode (,,, fmt @@data@@
	(? (=== fmt nil) (@@ ""))
	(= fmt (:: fmt struct_type))
	(= out "")
	(-> (= i 0) (< i ($ fmt$_format))
		(= elem (: fmt$_format i))
		(?? (& elem STRUCT_ELEM_TYPE_MASK)
			STRUCT_ELEM_TYPE_INT {
				(= value (:: (<- array$shift @@data@@) int_type))
				(= sgn (& elem STRUCT_ELEM_SIGNED))
				(?? (& elem STRUCT_ELEM_SIZE_MASK)
					STRUCT_ELEM_SIZE_BIT {
						(= out (+
							out
							(:: (!! value) char_type)
						))
					}
					STRUCT_ELEM_SIZE_BYTE {
						(? sgn {
							(= err (<- _check_range value -0x80 0x7f))
							(? err (@@ err))
						} {
							(= err (<- _check_range value 0 0xff))
							(? err (@@ err))
						})
						(= out (+
							out
							(:: value char_type)
						))
					}
					STRUCT_ELEM_SIZE_WORD {
						(? sgn {
							(= err (<- _check_range value -0x8000 0x7fff))
							(? err (@@ err))
						} {
							(= err (<- _check_range value 0 0xffff))
							(? err (@@ err))
						})
						(= out (+
							out
							(:: value char_type)
							(:: (>> value 8) char_type)
						))
					}
					STRUCT_ELEM_SIZE_DWORD {
						(? sgn {
							(= err (<- _check_range value -0x80000000 0x7fffffff))
							(? err (@@ err))
						} {
							(= err (<- _check_range value 0 0xffffffff))
							(? err (@@ err))
						})
						(= out (+
							out
							(:: value char_type)
							(:: (>> value 8) char_type)
							(:: (>> value 16) char_type)
							(:: (>> value 24) char_type)
						))
					}
					STRUCT_ELEM_SIZE_QWORD {
						(= out (+
							out
							(:: value char_type)
							(:: (>> value 8) char_type)
							(:: (>> value 16) char_type)
							(:: (>> value 24) char_type)
							(:: (>> value 32) char_type)
							(:: (>> value 40) char_type)
							(:: (>> value 48) char_type)
							(:: (>> value 56) char_type)
						))
					}
				)
			}
			STRUCT_ELEM_TYPE_FLOAT {
				(= value (<- (?: (=== (& elem STRUCT_ELEM_SIZE_MASK) STRUCT_ELEM_SIZE_BINARY32)
						(... "sll:struct_float_to_bits")
						(... "sll:struct_double_to_bits")
					)
					(:: (<- array$shift @@data@@) float_type)
				))
				(= out (+
					out
					(:: value char_type)
					(:: (>> value 8) char_type)
					(:: (>> value 16) char_type)
					(:: (>> value 24) char_type)
				))
				(? (=== (& elem STRUCT_ELEM_SIZE_MASK) STRUCT_ELEM_SIZE_BINARY64) {
					(= out (+
						out
						(:: (>> value 32) char_type)
						(:: (>> value 40) char_type)
						(:: (>> value 48) char_type)
						(:: (>> value 56) char_type)
					))
				})
			}
			STRUCT_ELEM_TYPE_PADDING {
				(= out (+
					out
					(* "\x00" (>> elem STRUCT_ELEM_SIZE_SHIFT))
				))
			}
		)
		(++ i)
	)
	(@@ out)
))



(= struct (. struct_module_type
	create
	decode
	encode
))
(## struct)
