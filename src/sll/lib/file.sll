(---
	"_file.sll"
	"_socket.sll"
	"error.sll"
	"string.sll"
	"types.sll"
)



(= file_module_type (&:
	(~ type_type) file_type
	(~ int_type) FLAG_APPEND
	(~ int_type) FLAG_FLUSH_ON_NEWLINE
	(~ int_type) FLAG_NO_BUFFER
	(~ int_type) FLAG_READ
	(~ int_type) FLAG_WRITE
	(~ string_type) TEMP_FILE_PATH
	(~ file_type) stdin
	(~ file_type) stdout
	(~ file_type) stderr
	(~ func_type) close
	(~ func_type) copy
	(~ func_type) delete
	(~ func_type) flush
	(~ func_type) from_data
	(~ func_type) get_buffer
	(~ func_type) open
	(~ func_type) peek
	(~ func_type) read
	(~ func_type) read_char
	(~ func_type) rename
	(~ func_type) write
))



(= TEMP_FILE_PATH (<- (... "sll:file_get_temp_path")))



(= _create_std_file (,,, id name flags
	(= h (<- (... "sll:file_std_handle") id))
	(@@ (?: (< h 0)
		nil
		(. file_type
			name
			flags
			h
		)
	))
))

(= stdin (<- _create_std_file
	0
	"@stdin"
	(| FLAG_READ FLAG_NO_BUFFER)
))
(= stdout (<- _create_std_file
	1
	"@stdout"
	(| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE)
))
(= stderr (<- _create_std_file
	2
	"@stderr"
	(| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE)
))



(= _convert_type (,,, file
	(@@ (?: (=== (:? file) socket_type)
		file
		(:: file file_type)
	))
))

(= close (,,, file
	(? (! file) (@@))
	(= file (<- _convert_type file))
	(? (=== file$_handle -1) (@@))
	(? (! (<- (... "sll:file_close") file$_handle)) (@@))
	(= file$_handle -1)
))

(= copy (,,, src dst
	(? (|| (! src) (! dst)) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_copy")
		(:: src string_type)
		(:: dst string_type)
	)))
))

(= delete (,,, path
	(? (! path) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_delete")
		(:: path string_type)
	)))
))

(= flush (,,, file
	(? (! file) (@@ nil))
	(= file (<- _convert_type file))
	(<- (... "sll:file_flush") file$_handle)
))

(= from_data (,,, buffer flags
	(= buffer (?: buffer (:: buffer string_type) ""))
	(= flags (?: flags (:: flags int_type) FLAG_READ))
	(= handle (<- (... "sll:file_from_data") buffer flags))
	(? (< handle 0) (@@ (<- error$from_internal (~ handle))))
	(@@ (. file_type
		"@data"
		flags
		handle
	))
))

(= get_buffer (,,, file
	(? (! file) (@@ ""))
	(= file (<- _convert_type file))
	(@@ (?: (&&
			(=== (:? file) file_type)
			(& file$flags FLAG_WRITE)
		)
		(<- (... "sll:file_get_buffer") file$_handle)
		""
	))
))

(= open (,,, path mode
	(? (! path) (@@ nil))
	(= path (:: path string_type))
	(= flags FLAG_READ)
	(? (!== mode nil) {
		(?
			(=== (:? mode) int_type) (= flags (& mode FLAG_MASK))
			{
				(= mode (<- string$lower_case (:: mode string_type)))
				(-> (= i 0) (< i ($ mode))
					(?? (: mode i)
						'a' (= flags (| FLAG_WRITE FLAG_APPEND FLAG_FLUSH_ON_NEWLINE))
						'r' (= flags FLAG_READ)
						'w' (= flags (| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE))
					)
					(++ i)
				)
			}
		)
	})
	(= handle (<- (... "sll:file_open")
		path
		flags
	))
	(? (< handle 0) (@@ (<- error$from_internal (~ handle) <"path" path>)))
	(@@ (. file_type
		path
		flags
		handle
	))
))

(= peek (,,, file
	(? (! file) (@@ nil))
	(= file (<- _convert_type file))
	(= out (<- (... "sll:file_peek") file$_handle))
	(@@ (?: (=== (:? out) int_type)
		(<- error$from_internal out <"file" file>)
		out
	))
))

(= read (,,, file size nonblocking?
	(? (! file) (@@ nil))
	(= file (<- _convert_type file))
	(= size (:: size int_type))
	(? (||
		(! (& file$flags FLAG_READ))
		(< size 0)
	) (@@ ""))
	(= out (?: nonblocking?
		(<- (... "sll:file_read") file$_handle size)
		(!<- file$_handle size)
	)
	(@@ (?: (=== (:? out) int_type)
		(<- error$from_internal out <"file" file>)
		out
	))
))

(= read_char (,,, file nonblocking?
	(? (! file) (@@ nil))
	(= file (<- _convert_type file))
	(? (! (& file$flags FLAG_READ)) (@@ (<- error$create ERROR_EOF [file])))
	(= out (?: nonblocking?
		(<- (... "sll:file_read_char") file$_handle)
		(!<. file$_handle)
	)
	(@@ (?: (=== (:? out) int_type)
		(<- error$from_internal out <"file" file>)
		out
	))
))

(= rename (,,, src dst
	(? (|| (! src) (! dst)) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_rename")
		(:: src string_type)
		(:: dst string_type)
	)))
))

(= write (,,, file @@data@@
	(? (! file) (@@ nil))
	(= file (<- _convert_type file))
	(? (! (& file$flags FLAG_WRITE)) (@@ 0))
	(= out 0)
	(-> (= i 0) (< i ($ @@data@@))
		(= written_count (<- (... "sll:file_write")
			file$_handle
			(:: (: @@data@@ i) string_type)
		))
		(? (< written_count 0) (@@ (<- error$from_internal (~ written_count) <"file" file>)))
		(= out (+ out written_count))
		(++ i)
	)
	(@@ out)
))



(= file (. file_module_type
	file_type
	FLAG_APPEND
	FLAG_FLUSH_ON_NEWLINE
	FLAG_NO_BUFFER
	FLAG_READ
	FLAG_WRITE
	TEMP_FILE_PATH
	stdin
	stdout
	stderr
	close
	copy
	delete
	flush
	from_data
	get_buffer
	open
	peek
	read
	read_char
	rename
	write
))
(## file)
