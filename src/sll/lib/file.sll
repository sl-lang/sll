(---
	"_file.sll"
	"error.sll"
	"string.sll"
	"types.sll"
)



(= file_module_type (&:
	(~ type_type) file_type
	(~ int_type) FLAG_APPEND
	(~ int_type) FLAG_FLUSH_ON_NEWLINE
	(~ int_type) FLAG_NO_BUFFER
	(~ int_type) FLAG_READ
	(~ int_type) FLAG_WRITE
	(~ string_type) TEMP_FILE_PATH
	(~ file_type) stdin
	(~ file_type) stdout
	(~ file_type) stderr
	(~ func_type) close
	(~ func_type) copy
	(~ func_type) delete
	(~ func_type) flush
	(~ func_type) from_data
	(~ func_type) get_buffer
	(~ func_type) open
	(~ func_type) peek
	(~ func_type) read
	(~ func_type) read_char
	(~ func_type) rename
	(~ func_type) write
))



(= TEMP_FILE_PATH (<- (... "sll:file_get_temp_path")))



(= _create_std_file (,,, id nm fl
	(= h (<- (... "sll:file_std_handle") id))
	(@@ (?: (< h 0)
		nil
		(. file_type
			nm
			fl
			h
		)
	))
))

(= stdin (<- _create_std_file
	0
	"@stdin"
	(| FLAG_READ FLAG_NO_BUFFER)
))
(= stdout (<- _create_std_file
	1
	"@stdout"
	(| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE)
))
(= stderr (<- _create_std_file
	2
	"@stderr"
	(| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE)
))



(= close (,,, f
	(? (=== f nil) (@@))
	(= f (:: f file_type))
	(? (=== f$_handle -1) (@@))
	(? (! (<- (... "sll:file_close") f$_handle)) (@@))
	(= f$_handle -1)
))

(= copy (,,, src dst
	(? (|| (! src) (! dst)) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_copy")
		(:: src string_type)
		(:: dst string_type)
	)))
))

(= delete (,,, path
	(? (! path) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_delete")
		(:: path string_type)
	)))
))

(= flush (,,, f
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(<- (... "sll:file_flush") f$_handle)
))

(= from_data (,,, bf fl
	(= bf (?: (=== bf nil) "" (:: bf string_type)))
	(= fl (?: (=== fl nil) FLAG_READ (:: fl int_type)))
	(= handle (<- (... "sll:file_from_data") bf fl))
	(? (< handle 0) {
		(@@ (<- error$from_internal (~ handle)))
	})
	(@@ (. file_type
		"@data"
		fl
		handle
	))
))

(= get_buffer (,,, f
	(? (=== f nil) (@@ ""))
	(= f (:: f file_type))
	(? (! (& f$flags FLAG_WRITE)) (@@ ""))
	(@@ (<- (... "sll:file_get_buffer") f$_handle))
))

(= open (,,, path mode
	(? (=== path nil) (@@ nil))
	(= path (:: path string_type))
	(= flags FLAG_READ)
	(? (!== mode nil) {
		(= mode (<- string$lower_case (:: mode string_type)))
		(-> (= i 0) (< i ($ mode)) {
			(?? (: mode i)
				'a' (= flags (| FLAG_WRITE FLAG_APPEND FLAG_FLUSH_ON_NEWLINE))
				'r' (= flags FLAG_READ)
				'w' (= flags (| FLAG_WRITE FLAG_FLUSH_ON_NEWLINE))
			)
			(++ i)
		})
	})
	(= handle (<- (... "sll:file_open")
		path
		flags
	))
	(? (< handle 0) {
		(@@ (<- error$from_internal (~ handle) <"path" path>))
	})
	(@@ (. file_type
		path
		flags
		handle
	))
))

(= peek (,,, f
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= o (<- (... "sll:file_peek") f$_handle))
	(@@ (?: (=== (:? o) int_type)
		(<- error$from_internal o <"file" f>)
		o
	))
))

(= read (,,, f count nonblocking
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= count (:: count int_type))
	(? (< count 0) (@@ ""))
	(= o (?: nonblocking
		(<- (... "sll:file_read") f$_handle count)
		(!<- f$_handle count)
	)
	(@@ (?: (=== (:? o) int_type)
		(<- error$from_internal o <"file" f>)
		o
	))
))

(= read_char (,,, f nonblocking
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= o (?: nonblocking
		(<- (... "sll:file_read_char") f$_handle)
		(!<. f$_handle)
	)
	(@@ (?: (=== (:? o) int_type)
		(<- error$from_internal o <"file" f>)
		o
	))
))

(= rename (,,, src dst
	(? (|| (! src) (! dst)) (@@ nil))
	(@@ (<- error$from_internal (<- (... "sll:file_rename")
		(:: src string_type)
		(:: dst string_type)
	)))
))

(= write (,,, f @@dt@@
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= o 0)
	(-> (= i 0) (< i ($ @@dt@@))
		(= v (<- (... "sll:file_write")
			f$_handle
			(:: (: @@dt@@ i) string_type)
		))
		(? (< v 0)
			(@@ (<- error$from_internal (~ v) <"file" f>))
		)
		(= o (+ o v))
		(++ i)
	)
	(@@ o)
))



(= file (. file_module_type
	file_type
	FLAG_APPEND
	FLAG_FLUSH_ON_NEWLINE
	FLAG_NO_BUFFER
	FLAG_READ
	FLAG_WRITE
	TEMP_FILE_PATH
	stdin
	stdout
	stderr
	close
	copy
	delete
	flush
	from_data
	get_buffer
	open
	peek
	read
	read_char
	rename
	write
))
(## file)
