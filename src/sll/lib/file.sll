(--- "types.sll" "string.sll")



(# FLAG_READ FLAG_WRITE FLAG_APPEND)



(= file_type (&:
	(,,, dt {
		(<- (... "sll:file_inc_handle") dt$_handle)
	}) @@copy@@
	(,,, dt {
		(<- (... "sll:file_close") dt$_handle)
	}) @@delete@@
	(,,, dt {
		(= m "")
		(? (& dt$flags FLAG_APPEND) (= m (+ m "A")))
		(? (& dt$flags FLAG_READ) (= m (+ m "R")))
		(? (& dt$flags FLAG_WRITE) (= m (+ m "W")))
		(@@ (<- string$format "<path=%s, mode=%s>" dt$name m))
	}) @@string@@
	(~ string_type) name
	(~ int_type) flags
	(~ int_type) _handle
))

(= file_module_type (&:
	(~ type_type) file_type
	(~ int_type) FLAG_APPEND
	(~ int_type) FLAG_READ
	(~ int_type) FLAG_WRITE
	(~ string_type) TEMP_FILE_PATH
	(~ file_type) stdin
	(~ file_type) stdout
	(~ file_type) stderr
	(~ func_type) close
	(~ func_type) copy
	(~ func_type) flush
	(~ func_type) from_data
	(~ func_type) open
	(~ func_type) peek
	(~ func_type) read
	(~ func_type) rename
	(~ func_type) write
))



(= FLAG_READ 1)
(= FLAG_WRITE 2)
(= FLAG_APPEND 4)

(= TEMP_FILE_PATH (<- (... "sll:file_get_temp_path")))

(= stdin (. file_type
	"@stdin"
	FLAG_READ
	(<- (... "sll:file_std_handle") 0)
))
(= stdout (. file_type
	"@stdout"
	FLAG_WRITE
	(<- (... "sll:file_std_handle") 1)
))
(= stderr (. file_type
	"@stderr"
	FLAG_WRITE
	(<- (... "sll:file_std_handle") 2)
))



(= close (,,, f
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(@@ (<- (... "sll:file_close") f$_handle))
))

(= copy (,,, s d
	(? (|| (! s) (! d)) (@@ nil))
	(= s (:: s string_type))
	(= d (:: d string_type))
	(@@ (<- (... "sll:file_copy") s d))
))

(= flush (,,, f
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(<- (... "sll:file_flush") f$_handle)
))

(= from_data (,,, bf
	(= bf (?: (=== bf nil) "" (:: bf string_type)))
	(= handle (<- (... "sll:file_from_data") bf FLAG_READ))
	(? (=== handle -1) (@@ nil))
	(@@ (. file_type
		"@data"
		FLAG_READ
		handle
	))
))

(= open (,,, path mode
	(? (=== path nil) (@@ nil))
	(= path (:: path string_type))
	(= flags FLAG_READ)
	(? (!== mode nil) {
		(= mode (<- string$lower_case (:: mode string_type)))
		(-> (= i 0) (< i ($ mode)) {
			(?? (: mode i)
				'a' (= flags (| FLAG_WRITE FLAG_APPEND))
				'r' (= flags FLAG_READ)
				'w' (= flags FLAG_WRITE)
			)
			(++ i)
		})
	})
	(= handle (<- (... "sll:file_open")
		path
		flags
	))
	(? (=== handle -1) (@@ nil))
	(@@ (. file_type
		path
		flags
		handle
	))
))

(= peek (,,, f
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(@@ (<- (... "sll:file_peek") f$_handle))
))

(= read (,,, f c
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= c (:: c int_type))
	(? (< c 0) {
		(@@ "")
	})
	(@@ (<- (... "sll:file_read") f$_handle c))
))

(= rename (,,, s d
	(? (|| (! s) (! d)) (@@ nil))
	(= s (:: s string_type))
	(= d (:: d string_type))
	(@@ (<- (... "sll:file_rename") s d))
))

(= write (,,, f dt
	(? (=== f nil) (@@ nil))
	(= f (:: f file_type))
	(= dt (:: dt string_type))
	(@@ (<- (... "sll:file_write") f$_handle dt))
))



(= file (. file_module_type
	file_type
	FLAG_APPEND
	FLAG_READ
	FLAG_WRITE
	TEMP_FILE_PATH
	stdin
	stdout
	stderr
	close
	copy
	flush
	from_data
	open
	peek
	read
	rename
	write
))
(## file)
