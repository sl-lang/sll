#include <windows.h>
#include <sll/_internal/common.h>
#include <sll/error.h>
#include <sll/types.h>



static __SLL_FORCE_INLINE sll_error_t _platform_get_win_error(void){
	sll_error_t e=(GetLastError()<<9)|SLL_ERROR_FLAG_LIBC;
	switch (GetLastError()){
		case ERROR_FILE_NOT_FOUND:
		case ERROR_PATH_NOT_FOUND:
		case ERROR_INVALID_DRIVE:
		case ERROR_NO_MORE_FILES:
		case ERROR_BAD_NETPATH:
		case ERROR_BAD_NET_NAME:
		case ERROR_BAD_PATHNAME:
		case ERROR_FILENAME_EXCED_RANGE:
			return ENOENT|e;
		case ERROR_BAD_ENVIRONMENT:
			return E2BIG|e;
		case ERROR_BAD_FORMAT:
		case ERROR_INVALID_STARTING_CODESEG:
		case ERROR_INVALID_STACKSEG:
		case ERROR_INVALID_MODULETYPE:
		case ERROR_INVALID_EXE_SIGNATURE:
		case ERROR_EXE_MARKED_INVALID:
		case ERROR_BAD_EXE_FORMAT:
		case ERROR_ITERATED_DATA_EXCEEDS_64k:
		case ERROR_INVALID_MINALLOCSIZE:
		case ERROR_DYNLINK_FROM_INVALID_RING:
		case ERROR_IOPL_NOT_ENABLED:
		case ERROR_INVALID_SEGDPL:
		case ERROR_AUTODATASEG_EXCEEDS_64k:
		case ERROR_RING2SEG_MUST_BE_MOVABLE:
		case ERROR_RELOC_CHAIN_XEEDS_SEGLIM:
		case ERROR_INFLOOP_IN_RELOC_CHAIN:
			return ENOEXEC|e;
		case ERROR_INVALID_HANDLE:
		case ERROR_INVALID_TARGET_HANDLE:
		case ERROR_DIRECT_ACCESS_HANDLE:
			return EBADF|e;
		case ERROR_WAIT_NO_CHILDREN:
		case ERROR_CHILD_NOT_COMPLETE:
			return ECHILD|e;
		case ERROR_NO_PROC_SLOTS:
		case ERROR_MAX_THRDS_REACHED:
		case ERROR_NESTING_NOT_ALLOWED:
			return EAGAIN|e;
		case ERROR_ARENA_TRASHED:
		case ERROR_NOT_ENOUGH_MEMORY:
		case ERROR_INVALID_BLOCK:
			return ENOMEM|e;
		case ERROR_ACCESS_DENIED:
		case ERROR_CURRENT_DIRECTORY:
		case ERROR_WRITE_PROTECT:
		case ERROR_BAD_UNIT:
		case ERROR_NOT_READY:
		case ERROR_BAD_COMMAND:
		case ERROR_CRC:
		case ERROR_BAD_LENGTH:
		case ERROR_SEEK:
		case ERROR_NOT_DOS_DISK:
		case ERROR_SECTOR_NOT_FOUND:
		case ERROR_OUT_OF_PAPER:
		case ERROR_WRITE_FAULT:
		case ERROR_READ_FAULT:
		case ERROR_GEN_FAILURE:
		case ERROR_SHARING_VIOLATION:
		case ERROR_LOCK_VIOLATION:
		case ERROR_WRONG_DISK:
		case ERROR_SHARING_BUFFER_EXCEEDED:
		case ERROR_NETWORK_ACCESS_DENIED:
		case ERROR_CANNOT_MAKE:
		case ERROR_FAIL_I24:
		case ERROR_DRIVE_LOCKED:
		case ERROR_SEEK_ON_DEVICE:
		case ERROR_NOT_LOCKED:
		case ERROR_LOCK_FAILED:
			return EACCES|e;
		case ERROR_FILE_EXISTS:
		case ERROR_ALREADY_EXISTS:
			return EEXIST|e;
		case ERROR_NOT_SAME_DEVICE:
			return EXDEV|e;
		case ERROR_DIRECTORY:
			return ENOTDIR|e;
		case ERROR_TOO_MANY_OPEN_FILES:
			return EMFILE|e;
		case ERROR_DISK_FULL:
			return ENOSPC|e;
		case ERROR_BROKEN_PIPE:
		case ERROR_NO_DATA:
			return EPIPE|e;
		case ERROR_DIR_NOT_EMPTY:
			return ENOTEMPTY|e;
		case ERROR_INVALID_FUNCTION:
		case ERROR_INVALID_ACCESS:
		case ERROR_INVALID_DATA:
		case ERROR_INVALID_PARAMETER:
		case ERROR_NEGATIVE_SEEK:
			return EINVAL|e;
		default:
			return SLL_LIBC_UNMAPPED_WIN_ERROR|e;
	}
}
