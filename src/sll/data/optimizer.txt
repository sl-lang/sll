# Sll optimizer definition file
-- sll/node.h
-- sll/string.h
-- sll/string_table.h



$false = {int<int_=0>|float<float_=0>|char<char_=0>|complex<complex_.real=0,complex_.imag=0>|array<array_length=0>|map<map_length=0>|print|assign|if|switch|for|while|loop|inc|dec|break|continue|return|operation_list|thread_wait|thread_lock|thread_semaphore|thread_barrier_eq|thread_barrier_geq|thread_exit}
$ignored_required_fields = {if[1::2]|inline_if[1::2]|switch[2::2]|for[:1]|while[:1]|for_array[:1]|while_array[:1]|for_map[:1]|while_map[:1]}
$nil_return_value = {print|if|switch|for|while|loop|break|continue|return|operation_list|thread_wait|thread_lock|thread_semaphore|thread_barrier_eq|thread_barrier_geq|thread_exit}
$optional_fields = {not[1:]|bool[1:]|assign[2:]|func|internal_func|internal_func_load[1:]|inline_func|call_array[2:]|for[2:]|while[2:]|loop|inc[1:]|dec[1:]|length[1:]|access[4:]|deep_copy[1:]|has[2:]|typeof[1:]|nameof[1:]|nameof_type[1:]|for_array[2:-1]|while_array[2:-1]|for_map[2:-2]|while_map[2:-2]|break|continue|ref[1:]|return[1:]|comma[:-1]|operation_list|thread_id|thread_wait[1:]|thread_lock[1:]|thread_semaphore[1:]|thread_barrier_eq[2:]|thread_barrier_geq[2:]|thread_exit[1:]|read_blocking[2:]|read_blocking_char[1:]}
$replace_by_nil = {print@0|and@0|or@0|not@0|bool@0|assign@0|internal_func_load@0|inline_func@0|call@0|call_array@0|if@0|inline_if@0|switch@0|for@0|while@0|loop@0|inc@0|dec@0|add@0|sub@0|mult@0|div@0|floor_div@0|mod@0|bit_and@0|bit_or@0|bit_xor@0|bit_not@0|bit_right_shift@0|bit_left_shift@0|less@0|less_equal@0|equal@0|not_equal@0|more@0|more_equal@0|strict_equal@0|strict_not_equal@0|length@0|access@0|deep_copy@0|var_access@0|has@0|cast@0|typeof@0|new@0|ref@0|comma@0|operation_list@0}
$replace_by_operation_list = {assign@1|if@1|inline_if@1|switch@1|for@1|while@1|less@1|less_equal@1|equal@1|not_equal@1|more@1|more_equal@1|strict_equal@1|strict_not_equal@1|has@1|cast@1}
$true = {int<int_=!0>|float<float_=!0>|char<char_=!0>}




$optional_fields.{int|float|char|complex|string|identifier|field|function_id} -> #1
$optional_fields.{array|map|operation_list|comma} -> *1
$optional_fields.inline_if -> 1=if

comma[-1].int<int_=0> -> 0=operation_list, 1=nop, RETURN
comma[-1].comma -> *1
comma[-1].$nil_return_value -> 0=operation_list, RETURN

$ignored_required_fields.{comma@1|operation_list@1} -> 1=nop

$replace_by_nil -> 0=int, 0.int_=0, RETURN
$replace_by_operation_list -> 0=operation_list, RETURN
{for_array@0|while_array@0} -> 0=array, 0.array_length=0, RETURN
{for_map@0|while_map@0} -> 0=map, 0.map_length=0, RETURN
{nameof@0|nameof_type@0} -> 0=string, "
	sll_string_t str=SLL_INIT_STRING_STRUCT;
	data0->node->data.string_index=sll_add_string(&(source_file->string_table),&str);
", RETURN

{for[1:2]|while[1:2]}.$true -> 0=loop, RETURN
{for[1:2]|while[1:2]}.comma[-1].$true -> 0=loop, RETURN
{for[1:2]|while[1:2]}.$false -> 0=operation_list, #0[2:], RETURN

print.string$"(source_file->string_table.data+data1->node->data.string_index)->length==1" -> "
	data1->node->type=SLL_NODE_TYPE_CHAR;
	data1->node->data.char_=(source_file->string_table.data+data1->node->data.string_index)->data[0];
"

print[:-1].string$"(data1+1)->node&&(data1+1)->node->type==SLL_NODE_TYPE_STRING" -> "
	sll_node_t* second_node=(data1+1)->node;
	sll_string_t tmp;
	sll_string_concat(source_file->string_table.data+data1->node->data.string_index,source_file->string_table.data+second_node->data.string_index,&tmp);
	second_node->data.string_index=sll_add_string(&(source_file->string_table),&tmp);
", #1
print[:-1].string$"(data1+1)->node&&(data1+1)->node->type==SLL_NODE_TYPE_CHAR" -> "
	sll_node_t* second_node=(data1+1)->node;
	sll_string_t tmp;
	sll_string_concat_char(source_file->string_table.data+data1->node->data.string_index,second_node->data.char_,&tmp);
	second_node->type=SLL_NODE_TYPE_STRING;
	second_node->data.string_index=sll_add_string(&(source_file->string_table),&tmp);
", #1
print[:-1].char$"(data1+1)->node&&(data1+1)->node->type==SLL_NODE_TYPE_CHAR" -> "
	sll_node_t* second_node=(data1+1)->node;
	sll_string_t tmp;
	sll_string_concat_chars(data1->node->data.char_,second_node->data.char_,&tmp);
	second_node->type=SLL_NODE_TYPE_STRING;
	second_node->data.string_index=sll_add_string(&(source_file->string_table),&tmp);
", #1
print[:-1].char$"(data1+1)->node&&(data1+1)->node->type==SLL_NODE_TYPE_STRING" -> "
	sll_node_t* second_node=(data1+1)->node;
	sll_string_t tmp;
	sll_string_prepend_char(source_file->string_table.data+second_node->data.string_index,data1->node->data.char_,&tmp);
	second_node->data.string_index=sll_add_string(&(source_file->string_table),&tmp);
", #1

$optional_fields.print$"idx0+1<end0&&(data1+1)->node&&(data1+1)->node->type==SLL_NODE_TYPE_PRINT" -> "
	(*_get_child_count(data0->node))--;
	data1->node->data.arg_count+=(data1+1)->node->data.arg_count;
	_set_nop(data1+1);
"

length@1.{int|float} -> 0=nop, RETURN
length@1.char -> 0=nop, 1=int, 1.int_=1, RETURN
length@1.string -> 0=nop, 1=int, "data1->node->data.int_=(source_file->string_table.data+data1->node->data.string_index)->length", RETURN

