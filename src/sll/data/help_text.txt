Usage: sll [ <option1> <option2> <option3> ... ] <file1> <file2> <file3> ...

Options:
  -a, --generate-assembly -> Generate assembly (.sla)
  -A <arg1> <arg2> <arg3>, --args <arg1> <arg2> <arg3> -> Pass arguments to the VM
  -b, --bundle -> Generate a bundle from all compilation files (except assembly)
  -B <bundle_output_file>, --bundle-output <bundle_output_file> -> Save the bundle to <bundle_output_file>
  -c, --generate-compiled-object -> Generate compiled objects (.slc)
  -d, --strip-names -> Remove function and type names
  -D, --strip-debug -> Remove source code line number data
  -e, --expand-file-paths -> Expand file paths
  -f <file>, --file <file> -> Treat <file> as input file (Useful for files starting with a dash ('-'))
  -F <resolver_library>, --file-path-resolver <resolver_library> -> Load path resolver library <resolver_library>
  -h, --help -> Print this message
  -i <installed_object>, --install-path <installed_object> -> Output the absolute path of the installed object <installed_object> and exit
  -I <directory>, --include <directory> -> Add <directory> to file include path
  -L <audit_library>, --audit-library <audit_library> -> Load the audit library <audit_library>
  -n, --names-only -> Do not store full file paths in the bundle
  -N <name>, --bundle-name <name> -> Name of the bundle. All backslashes are replaced by forward slashes. A name consisting of one slash ('/') will be treated as an empty name.
  -o <output_file>, --output <output_file> -> Set output file to <output_file>. If there is only one <file>, the output is written to <output_file>. If there are multiple <file>s, each <file> output is written to <output_file_directory>/<base_file_name>[.sla | .slc | .sll]. If no <output_file> is supplied, then each <file> output is written to <file>[.sla | .slc | .sll]
  -O, --optimize -> Enable source file optimizations
  -p, --print-objects -> Print objects
  -P, --print-assembly -> Print assembly
  -r, --release-mode -> Use the optimized versions of modules and bundles
  -R, --no-run -> Disable program execution mode
  -s <code>, --source <code> -> Treat <code> as an input file
  -S <flag>, --sandbox <flag> -> enable the sandbox <flag> (see Sandbox Flags)
  -v, --verbose -> Enable verbose mode
  -V, --version -> Print the Sll version and exit
  -X, --disable-audit -> Disable all audit events

Installed Objects:
  executable -> Main executable
  install-path -> Folder containing all installed files
  library -> Core dynamic library
  source-path -> Folder containing bundles, compiled objects and source code included by default in the search path

Sandbox Flags:
  no-file-io -> Disable all file IO (does not include the C sll_file_xxx and sll_platform_file_xxx APIs)
  enable-stdin-io -> Enable reading from standard input (overrides 'no-file-io' flag)
  enable-stdout-io -> Enable writing to standard output (overrides 'no-file-io' flag)
  no-path -> Disable the path API
  no-process -> Disable the process creation API
  no-environment -> Disable environment access and modification
  no-load-library -> Disable external library loading
  buffer-files -> Enable creating in-memory files (overrides 'no-file-io' flag)
  file-rename -> Enable file renaming
  file-copy -> Enable file copying
  no-float-error-change -> Disable floating-point error modification
  file-delete -> Enable file deleting
  no-thread -> Disable the thread API
  no-random -> Disable the random API
  no-serial -> Disable the object serialization and deserialization APIs
  no-ref -> Diable object reference counter queries
