#ifndef __SLL_ASSEMBLY_H__
#define __SLL_ASSEMBLY_H__ 1
#include <sll/common.h>
#include <sll/types.h>



#define SLL_ASSEMBLY_INSTRUCTION_TYPE_NOP 0
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_POP 1
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_POP_TWO 2
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ROT 3
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ROT_POP 4
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_DUP 5
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_INT 6
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_MINUS_ONE 7
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_ZERO 8
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_ONE 9
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_TWO 10
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_THREE 11
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_FOUR 12
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_FLOAT 13
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_CHAR 14
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PUSH_NULL 15
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_LOAD 16
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_LOADS 17
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PACK 18
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PACK_ZERO 19
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PACK_ONE 20
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_MAP 21
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_MAP_ZERO 22
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE 23
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_POP 24
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_MINUS_ONE 25
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_ZERO 26
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_ONE 27
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_TWO 28
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_THREE 29
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_STORE_FOUR 30
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JMP 31
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JB 32
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JBE 33
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JA 34
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JAE 35
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JE 36
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JNE 37
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JZ 38
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_JNZ 39
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_NOT 40
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_INC 41
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_DEC 42
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ADD 43
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_SUB 44
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_MULT 45
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_DIV 46
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_FDIV 47
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_MOD 48
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_AND 49
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_OR 50
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_XOR 51
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_INV 52
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_SHR 53
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_SHL 54
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_LENGTH 55
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_COPY 56
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ACCESS 57
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ACCESS_TWO 58
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_ACCESS_THREE 59
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CAST 60
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CAST_TYPE 61
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PRINT 62
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PRINT_CHAR 63
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PRINT_STR 64
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_PRINT_VAR 65
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CALL 66
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CALL_POP 67
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CALL_ZERO 68
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_CALL_ONE 69
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_REF 70
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET 71
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_INT 72
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_ZERO 73
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_FLOAT 74
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_CHAR 75
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_STR 76
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RET_VAR 77
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_END 78
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_END_ZERO 79
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_END_ONE 80
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_DEL 81
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_LOAD_DEL 82
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RESERVED0 125
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RESERVED1 126
#define SLL_ASSEMBLY_INSTRUCTION_TYPE_RESERVED2 127
#define SLL_ASSEMBLY_INSTRUCTION_INPLACE 128
#define SLL_ASSEMBLY_INSTRUCTION_RELATIVE 128

#define SLL_ASSEMBLY_INSTRUCTION_GET_TYPE(ai) ((ai)->t&0x7f)
#define SLL_ASSEMBLY_INSTRUCTION_IS_INPLACE(ai) ((ai)->t>>7)
#define SLL_ASSEMBLY_INSTRUCTION_IS_RELATIVE(ai) ((ai)->t>>7)



extern sll_integer_t sll_current_instruction_count;



extern const sll_runtime_data_t* sll_current_runtime_data;



__SLL_FUNC __SLL_CHECK_OUTPUT sll_return_code_t sll_execute_assembly(const sll_assembly_data_t* a_dt,const sll_stack_data_t* st,const sll_runtime_data_t* r_dt,sll_error_t* e);



__SLL_FUNC __SLL_CHECK_OUTPUT sll_return_t sll_generate_assembly(const sll_compilation_data_t* c_dt,sll_assembly_data_t* o,sll_error_t* e);



__SLL_FUNC void sll_print_assembly(const sll_assembly_data_t* a_dt,sll_output_data_stream_t* os);



#endif
