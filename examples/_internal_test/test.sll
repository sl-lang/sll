(--- "time.sll" "file.sll" "sys.sll" "path.sll" "json.sll" "string.sll" "hash.sll" "types.sll" "sort.sll" "log.sll" "date.sll" "process.sll" "base64.sll" "math.sll" "int.sll" "mime.sll" "random.sll" "array.sll" "uuid.sll" "serial.sll" "thread.sll" "error.sll" "struct.sll")
(= JSON_STRING "{\"key\":[\"value\",10,0.555,-842.9e-5,{\"a\":[\"c\",30,\"d\",\"\\t€\"],\"other\":\"else\"},true,false,null,[],{}]}")
(-> (= i 1) (< i 11) {
	(-> (= j 1) (< j 11) {
		(:> i '*' j " is equal to " (* i j) "\n")
		(++ j)
	})
	(++ i)
})
(= func (,,, x y {
	(:> "(Function Args: {x, y} = {" x ", " y "}) ")
	(@@ (* x y))
}))
(= FACTORIAL 10)
(= i 1 (:> "After Var Init (i=" i ")\n"))
(-> (= j 2) (<= j FACTORIAL) {
	(? (< j 5) {
		(:> "Small: " i "\n")
	}
	(< j 8) {
		(:> "Medium: " i "\n")
	} {
		(:> "End: " i " (j=" j ")\n")
	})
	(= i (* i j))
	(? (< j 5) (:> j "! = " i "\n"))
	(++ j)
	(? (> 3 10 -5) (:> "This will Never Execute\n"))
})
(:> FACTORIAL "! = " i '\n')
(< 10 5 (:> "This Should Never Happen"))
(--- "import.sll")
(:> "Call: " (<- func 10 2) "\n")
(:> "Current Time (Internal Call): " (<- time$time) "\n")
(? true nil 2 (:> "Dead Code") (@@ 128 "False Exit"))
(= fp (+ "build" path$SEPARATOR "hello.txt"))
(= f (<- file$open fp "wb"))
(? (=== f$error_type nil) {
	(<- file$write f "Hello!\n")
	(:> "ABC\n")
	(:> f "\n")
	(<- file$close f)
} {
	(:> (<- string$format "Unable to open file '%s'!\n" fp))
} )
(:> "File size: " (<- path$size "build/hello.txt") "\n")
(<- file$write file$stdout "Argument Count: " ($ sys$ARGV) "\n")
(-> (= i 0) (< i ($ sys$ARGV))
	(:> "[" i "] = " (: sys$ARGV i) "\n")
	(++ i)
)
(:> "Platform: " sys$PLATFORM "\n")
(= st (<- time$time))
(= tm (<- time$sleep 0.1))
(= et (<- time$time))
(:> "Delta Time: " (- et st) "s (" tm "s)\n")
(= z z z z z z z z z)
(= factorial (,,, n
	(? (< n 3)
		(@@ n)
	)
	(@@ (* n (<- factorial (- n 1))))
))
(:> "Recursive Factorial: 10! = " (<- factorial 10) "\n")
(= arr [1 2 3 4 5 6 7 8 9 10])
(:> "Array: " arr ", (Length: " ($ arr) ")\n")
(= print_array (,,, a
	(:> "[")
	(-> (= idx 0) (< idx ($ a))
		(? idx (:> ", "))
		(:> (: a idx))
		(++ idx)
	)
	(:> "]")
))
(:> "Array: ") (<- print_array arr) (:> "\n" "")
(= map <1 "a" 2 "b" 3>)
(:> "Map: " map "\n")
(= print_map (,,, m
	(:> "<")
	(= k (:: m map_key_type))
	(-> (= idx 0) (< idx ($ m))
		(? idx (:> ", "))
		(:> (: k idx) ": " (: m (: k idx)))
		(++ idx)
	)
	(:> ">")
))
(:> "Map: ") (<- print_map map) (:> "\n")
(:> "Map: " map " Keys: " (:: map map_key_type) " Values: " (:: map map_value_type) "\n")
(:> "Parsed: " (<- json$parse JSON_STRING) "\n")
(= v 5.943)
(:> "Round Down: " v " -> " (:: v int_type) "\n")
(:> "€\n")
(:> (+ "test-" 2) ", " (+ [2 3 4] <1> "a" [5 6 7]) ", " (+ <1 2> <3 4> "a") "\n")
(:> (, (:> "A") 0 1) "\n")
(<- (,,, f (<- f)) (,,, (:> "Inner Call\n")))
(:> "A: " (+ 1 2) "\n")
(:> "Path: " fp "\n")
(:> "Upper Case Path: " (<- string$upper_case fp) "\n")
(= arr [1 2 3 4 5 6 2 3 2])
(:> arr "\n" (>> arr 2) "\n" (<< arr 5) "\n" (>> arr 7) "\n" (+ arr 1) "\n" (+ < "a" "b"> 1) "\n" (- arr 2) "\n" (- arr [1 3 5]) "\n" (/ "abcda" "a") "\n" (// arr 2) "\n" (/ arr [2 3]) "\n" (- <1 2 3 4 5 6> 1) "\n" (- "abCDabCBA" "ab") "\n")
(:> (<- string$title_case "tItLe: CaSE!") "\n")
(:> (<- string$replace "ab_#_cde_#f#g" "_#" "~@$") "\n" (- "a1bc1d11e" 1) "\n" (: arr) "\n")
(= data "\xdf`\xd9\xebT%\xa3+\x91\xa4G\xbb\xa9\xaf\xad\xe9")
(= data_encoding0 0x37)
(= data_encoding1 "S\xcdrL\xf8\x88\x0f\xc3\x14\t\xfc")
(:> "Decoded data: " (^ (~ data) data_encoding0 data_encoding1) "\n")
(:> "Decoded data: " (:: (^ (~ (:: data array_type)) data_encoding0 data_encoding1) string_type) "\n")
(:> (+ <1 "a" 2 "b"> 1 <2 "c" 3 "d">) "\n" [(& "ghi" "ABCDEF")] "\n" (* "XYZ-@" -3) "\n" (* [1 2 3] 1.5) "\n")
(:> (* (:: "abc" string_type) "def") "\n" (:: (* "A" 100) map_key_type) "\n" (:: arr string_type map_type array_type) "\n")
(:> (* [1 2.3456 -78] ["a" arr "cd"]) "\n" (== [1 2 3] [1 2 3 4]) "\n" (== "abc" <0 'a' 2 "c" 1 0x62>) "\n" (== "def" ["d" 'e' 0x66]) "\n")
(:> (== [4 5 6] <2 6 0 4 1 5>) "\n" (== <"a" 9384 arr 'c'> <arr 'c' "a" 9384>) "\n" (& [1 2 3 3] [2 3 4]) "\n" (- 128.4 "abc") "\n")
(:> (| [1 2 3] [3 4 4 5]) "\n" (* "abcdefghij" 2.3) "\n" (| <1 0.585 "a" 5> "ghijklmnop" [0.1234 7_8.9]) "\n")
(:> (& <1 "a" 2 "b"> <2 "b2" 3 "c" 4 "d">) "\n" (& <1 "a" 2.1 "b"> ["c" "d" "e" "f"]) "\n" (& <1 "a" 2.1 "b"> "cdef") "\n")
(:> (^ [1 2 3] [4 5 6 7]) "\n" (* "abc" [5 6 7]) "\n" (/ "abcdabcdabcdabcd" 'a') "\n" (* "abcdefghij" 0.7) "\n" (<- string$replace "one-two-three-four-five" '-' ",") "\n")
(= (: arr 0) "zero")
(:> (<- string$lower_case "aBcDeFgHi") "\n" (<- string$upper_case "aBcDeFgHi") "\n" (<< arr 2) "\n" (<< (>> "acegi" -1) -2) "\n" (%% arr) "\n")
(:> (% "abcbaXaXXabcdX" "X") "\n" (: "abcdefg" -4 5) "\n")
(:> "Length of array == 9? " (?: (=== 9 ($ arr)) "True" "False") "\n")
(:> "Length: ")
(?? ($ arr)
	0 (:> "zero")
	1 (:> "one")
	2 (:> "two")
	3 (:> "three")
	4 (:> "four")
	5 (:> "five")
	6 (:> "six")
	7 (:> "seven")
	8 (:> "eight")
	9 (:> "nine")
	10 (:> "ten")
	(:> "(number too big)")
)
(:> "\n")
(:> (: "abcdefghijklmnopqrstuvwxyz" 5 2 -1) "\n" (<- string$flip_case "Hello, World!") "\n")
(:> "Type: " (:? arr) "\n" (<- string$format "%s - %c - %.2x\n" "string" 'C' 15.46))
(:> (<- path$list_dir ".") "\n")

(= format_bytes (,,, sz (?
	(< sz (<< 1 10)) (@@ (+ sz " b"))
	(< sz (<< 1 20)) (@@ (+ (>> sz 10) " kb"))
	(< sz (<< 1 30)) (@@ (+ (>> sz 20) " Mb"))
	(@@ (+ (>> sz 30) " Gb"))
)))
(= file_and_size_type (&:
	(~ string_type) fp
	(~ int_type) sz
))
(= file_list (<- path$recursive_list_dir "src"))
(= arr ([> (= i 0) (< i ($ file_list))
	(= k (: file_list i))
	(++ i)
	(. file_and_size_type
		(<- path$absolute k)
		(<- path$size k)
	)
))
(<- sort$sort arr false true (,,, k (@@ k$sz)))
(-> (= i 0) (< i ($ arr))
	(= e (: arr i))
	(:> e$fp " -> " (<- format_bytes e$sz) "\n")
	(++ i)
)

(= point_type (&:
	int_type x
	(~ int_type) y
))
(= point_string_type (&:
	point_type p
	string_type str
))
(= v (. point_type 4))
(= v$x -5)
(= v$y 11111); Failure to assign value to 'const' field
(:> point_type "\n" (. (&:)) "\n" (. int_type 5.59) "\n" (. map_type 1 'a' 2 'b' 3 'c') "\n" v "\n" (:? v) "\n" point_string_type "\n" (. point_string_type) "\n")
(= test_type (&:
	(&:
		float_type x
		float_type y
	) p
	int_type depth
))
(:> (. test_type [1 2] 3) "\n" v$x "\n" (: (. test_type [-1 -1]) "p") "\n")
(= new_point (. point_string_type [1 2] -5687.7))
(= p2 (: new_point))
(= p2$str "point-2")
(= new_point$p (. point_type 5 6))
(:> new_point "\n" p2 "\n" (<- 11111111 1 5) "\n")

(<- log$log "No Function")
(= test_log_func (,,, (<- log$log "Named Function")))
(<- test_log_func)
(<- (,,, (<- log$log "Anonymous Function")))

(:> (<- string$count_left "aaabcdefg" 'a') "\n" (<- string$count_right "abcdefggggg" 'g') "\n")

(= tm (<- time$time))
(= dt (<- date$from_time tm))
(:> dt "\n" (<- date$to_time dt) "\n" (- (<- date$to_time dt) tm) "\n")

(:> "Current PID: " process$PID "\n")
(<- process$shell "echo Shell!")
(:> (<- process$start [sys$EXECUTABLE "-V"]) "\n")

(:> sys$LIBRARY "\n")

(:> file$stdout "\n")

(= h (<- hash$md5$init))
(= h (<- hash$md5$update h "abc"))
(= h (<- hash$md5$update h "defg"))
(:> (<- hash$hexdigest (<- hash$md5$digest h)) "\n7ac66c0f148de9519b8bd264312c4d64\n")

(= h (<- hash$sha1$init))
(= h (<- hash$sha1$update h "abc"))
(= h (<- hash$sha1$update h "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABC"))
(:> (<- hash$hexdigest (<- hash$sha1$digest h)) "\n7c79894450f353c7108e70f45776ee6772947e0d\n")

(= h (<- hash$sha224$init))
(= h (<- hash$sha224$update h "Hello World!"))
(:> (<- hash$hexdigest (<- hash$sha224$digest h)) "\n4575bb4ec129df6380cedde6d71217fe0536f8ffc4e18bca530a7a1b\n")

(= h (<- hash$sha256$init))
(= h (<- hash$sha256$update h "aBcDeFgHi"))
(:> (<- hash$hexdigest (<- hash$sha256$digest h)) "\n5ba40d59ca7520b5f8a6eb48be70f9c6e8d0f30490d859ea860aa0d8fe5578b6\n")

(= h (<- hash$sha384$init))
(= h (<- hash$sha384$update h "Example Message"))
(:> (<- hash$hexdigest (<- hash$sha384$digest h)) "\n007bd747919d9fd354ba252a15f06136cb2783c08e57069f629accff0553eddd123e148395b99a39959c7daf04d66c81\n")

(= h (<- hash$sha512$init))
(= h (<- hash$sha512$update h "sha-512 test"))
(:> (<- hash$hexdigest (<- hash$sha512$digest h)) "\n00f3c0160c8e98c2e6617333bc8b3778d69e020e138204016100f89551995215d5790fbe410cb46dc84d90a3c53701aece1953f975a587eaa6c9745b705f3f81\n")

(-> (= i 1) (<= i 20) {
	(? (&& (! (% i 2)) (! (% i 3))) {
		(:> "Multiple of 6: " i "\n")
	})
	(? (|| (! (% i 3)) (! (% i 5))) {
		(:> "Multiple of 3 or 5: " i "\n")
	})
	(++ i)
})

(= ū̆́ẗᶂ―⓼ (<- (,,, (@@ 4.5))))
(= str "ū̆́ẗᶂ―⓼")
(:> ū̆́ẗᶂ―⓼ "\n" str ", " [str] "\n")

(:> "Checksum of 'abc': " (<- string$checksum "abc") "\n")

(:> (<- base64$encode "Example message to encode") "\nRXhhbXBsZSBtZXNzYWdlIHRvIGVuY29kZQ==\n")
(:> (<- base64$decode "RXhhbXBsZSBtZXNzYWdlIHRvIGVuY29kZQ==") "\nExample message to encode\n")

(:> (<- json$stringify (<- json$parse JSON_STRING)) "\n")

(:> math "\n")
(:> (<- math$combinations 5 3) "\n")

(:> (<- int$to_bin -4657) "\n" (<- int$to_oct -4657) "\n" (<- int$to_hex -4657) "\n" (<- int$to_dec -4657) "\n")

(:> (<- mime$get_type "file.css") ", " (<- mime$get_ext "application/javascript") "\n")

(--- "path/to/nonexistent/file.sll")

(:> ([> (= i 0) (< i 10) (= o i) (++ i) o) "\n")
(:> ({< (= i 0) (< i 26) (++ i) (:: (+ i 64) char_type) (:: (+ i 96) char_type)) "\n")

(= str (<- string$upper_case "The quick brown fox jumps over the dog"))
(-> (= i 0) (< i 26) {
	(= ch (:: (+ i 65) 2))
	(? (|: str ch) {
		(:> "Contains letter '" ch "'\n")
	} {
		(:> "Doesn't contains letter '" ch "'\n")
	})
	(++ i)
})

(:> sys$CPU_COUNT "\n")

(= extra_func_type (&:
	(,,, a {
		(:> "[init: \"" a "\"]")
	}) @@init@@
	(,,, a {
		(= a$cnt (+ a$cnt 1))
		(:> "[copy: \"" a "\"]")
	}) @@copy@@
	(,,, a {
		(@@ (<- string$format "<counter=%u>" a$cnt))
	}) @@string@@
	(,,, a {
		(:> "[delete: \"" a "\"]")
	}) @@delete@@
	int_type cnt
))

(= test (. extra_func_type))
(= test-2 (: (: test)))
(:> test-2 "\n")

(-> (= i 0) (< i 10) {
	(:> [(<- random$get_int 0 100) (<- random$get_float) (<- random$get_char 65 90) (<- random$get_string 5)] "\n")
	(++ i)
})

(= fl (<- math$factors 1269774))
(= n 1)
(-> (= i 0) (< i ($ fl)) {
	(= f (: fl i))
	(= n (* n (<- math$int_pow f$prime f$power)))
	(++ i)
})
(:> (<- string$join '*' fl) ", " n "\n" (<- math$euler_phi 20) "\n")

(= arr [0 1 2 3 4 5])
(<- array$push arr 6)
(:> arr "\n")
(<- array$remove arr 0)
(:> arr "\n")
(<- array$extend arr [7 8 9])
(:> arr "\n")
(= arr (<- array$split arr 5))
(:> arr "\n")
(= arr (<- array$join arr 5))
(:> arr "\n")
(:> (<- array$pop arr) ", " arr "\n")
(:> (<- array$shift arr) ", " arr "\n")
(<- array$unshift arr 1)
(:> arr "\n")

(:> (<- string$pad "> Title <" 15 '=') "\n")

(:> [(<- string$trim_left " \t\n\r\vLeft \t\n")] "\n")
(:> [(<- string$trim_right " \t\n\r\vRight \t\n")] "\n")
(:> [(<- string$trim " \t\n\r\vBoth \t\n")] "\n")

(:> sys$VERSION ", " (?: ($ sys$VERSION$commit)
	(<- string$format "commit/%s [%s]" sys$VERSION$commit sys$VERSION$url)
	"local"
) ", " sys$VERSION$time "\n")

(:> (<- uuid$uuid3 uuid$NAMESPACE_DNS "123") "\n")
(:> (<- uuid$uuid4) "\n")
(:> (<- uuid$uuid5 uuid$NAMESPACE_URL "abc") "\n")

(= buffer (<- file$from_data "Abcdefghijklmnopqrstuvwxyz"))
(:> buffer "\n")
(:> (<- file$read buffer 15) " (" (<- file$peek buffer) ")\n")
(:> (<- file$read buffer 15) " (" (<- file$peek buffer) ")\n")

(:> sys$ENVIRONMENT "\n")
(:> (<- sys$get_env "A" "<No value>") "\n")
(<- sys$set_env "A" "0123456789")
(:> (<- sys$get_env "A" "<No value>") "\n")
(<- sys$remove_env "A")
(:> (<- sys$get_env "A" "<No value>") "\n")

(:> file$TEMP_FILE_PATH "\n")

(<- file$rename "build/hello.txt" "build/hello-rename.txt")

(<- file$copy "build/hello-rename.txt" "build/new-hello.txt")

(= f (<- file$from_data "" file$FLAG_WRITE))
(<- file$write f "abc")
(<- file$write f '#')
(:> (<- file$get_buffer f) "\n")
(<- file$close f)

(= tmp (<- file$from_data "" file$FLAG_WRITE))
(<- serial$encode tmp <"#a" 56 "very-long-key" JSON_STRING [44 -0.0505e7]>)
(= enc (<- file$get_buffer tmp))
(<- file$close tmp)
(:> [enc] "\n")
(= tmp (<- file$from_data enc file$FLAG_READ))
(= obj (<- serial$decode tmp))
(<- file$close tmp)
(:> obj "\n")

(:> (<- sys$get_sandbox_flags) "\n")

(= var_arg_func (,,, x y @@extra@@
	(:> x ", " y ", " @@extra@@ "\n")
))
(<- var_arg_func)
(<- var_arg_func 1 2 3 4 5)
(<- var_arg_func 1 2 [3 4 5] 6 7)

(= lock (<- thread$create_lock))
(<- thread$acquire_lock lock)
(:> lock "\n")
(= thr (<- thread$start (,,,
	(-> (= idx 0) (< idx 30) {
		(<- thread$acquire_lock lock)
		(? (=== idx 1) (:> lock "\n"))
		(:> "thread-1: " idx "\n")
		(<- thread$release_lock lock)
		(++ idx)
	})
	(:> (+ "thread-0-state: " (:: (<- thread$get 0) string_type) "\n"))
)))
(= thr2 (<- thread$start (,,,
	(-> (= idx 0) (< idx 20) {
		(<- thread$acquire_lock lock)
		(:> "thread-2: " idx "\n")
		(<- thread$release_lock lock)
		(++ idx)
	})
)))
(:> [thr thr2] "\n")
(<- thread$release_lock lock)
(<- thread$join thr)
(:> thr "\n")

(<- file$delete "build/new-hello.txt")

(<- path$mkdir "build/test")

(= f (<- file$open "this/file/does/not/exist.txt"))
(:> f$error_type "\n" f "\n")

(= arr [[1 2] [3 4]])
(= n_arr (:! arr))
(= (: (: arr 0) 0) 'A')
(:> arr ", " n_arr "\n")

(= s (<- struct$create "HIhd"))
(= enc (<- struct$encode s 0x1234 0xff77ff77 -0x5678 123.456e7))
(:> s ", " [enc] ", " (<- struct$decode s enc) "\n")

(? (! (!! FACTORIAL)) nil {
	(:> "Early Exit\n")
	(@@ false)
})
(:> "Useless Code\n")
(@@ 1)
