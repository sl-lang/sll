(---
	"@internal/background_audit_logger.sll"
	"array.sll"
	"atexit.sll"
	"audit.sll"
	"base64.sll"
	"clib/function.sll"
	"clib/library.sll"
	"clib/types.sll"
	"date.sll"
	"ds4/device.sll"
	"error.sll"
	"file.sll"
	"font/true_type.sll"
	"gfx/buffer.sll"
	"gfx/color.sll"
	"gfx/context.sll"
	"gfx/data_type.sll"
	"gfx/pipeline.sll"
	"gfx/sampler.sll"
	"gfx/shader.sll"
	"gfx/stage.sll"
	"gfx/texture.sll"
	"gfx/vulkan.sll"
	"hash.sll"
	"hmac.sll"
	"http/mime.sll"
	"int.sll"
	"json.sll"
	"log.sll"
	"math.sll"
	"object.sll"
	"path.sll"
	"process.sll"
	"random.sll"
	"serial.sll"
	"socket.sll"
	"sort.sll"
	"statistics.sll"
	"string.sll"
	"struct.sll"
	"sys.sll"
	"thread.sll"
	"time.sll"
	"types.sll"
	"ui/core.sll"
	"ui/element.sll"
	"ui/element/button.sll"
	"ui/element/color.sll"
	"ui/element/container.sll"
	"ui/element/gradient.sll"
	"ui/element/slider.sll"
	"ui/element/text.sll"
	"ui/element/texture.sll"
	"ui/layout.sll"
	"ui/serialize.sll"
	"ui/texture.sll"
	"uuid.sll"
	"vm.sll"
	"weakref.sll"
	"window_manager/cursor.sll"
	"window_manager/display.sll"
	"window_manager/event.sll"
	"window_manager/image.sll"
	"window_manager/keyboard.sll"
	"window_manager/window.sll"
)
(= JSON_STRING "{\"key\":[\"value\",10,0.555,-842.9e-5,{\"a\":[\"c\",30,\"d\",\"\\t€\"],\"other\":\"else\"},true,false,null,[],{}]}")
(-> (= i 1) (< i 11) {
	(-> (= j 1) (< j 11) {
		(:> i '*' j " is equal to " (* i j) "\n")
		(++ j)
	})
	(++ i)
})
(= func (,,, x y {
	(:> "(Function Args: {x, y} = {" x ", " y "}) ")
	(@@ (* x y))
}))
(= FACTORIAL 10)
(= i 1 (:> "After Var Init (i=" i ")\n"))
(-> (= j 2) (<= j FACTORIAL) {
	(? (< j 5) {
		(:> "Small: " i "\n")
	}
	(< j 8) {
		(:> "Medium: " i "\n")
	} {
		(:> "End: " i " (j=" j ")\n")
	})
	(= i (* i j))
	(? (< j 5) (:> j "! = " i "\n"))
	(++ j)
	(? (> 3 10 -5) (:> "This will Never Execute\n"))
})
(:> FACTORIAL "! = " i '\n')
(< 10 5 (:> "This Should Never Happen"))
(--- "@internal/import.sll")
(:> "Call: " (<- func 10 2) "\n")
(:> "Current Time (Internal Call): " (<- time$time) "\n")
(? true nil 2 (:> "Dead Code") (@@ 128 "False Exit"))
(= fp (+ "build" path$SEPARATOR "hello.txt"))
(= f (<- file$open fp "w"))
(? (=== f$error_data nil) {
	(<- file$write f "Hello!\n")
	(:> "ABC\n")
	(:> f "\n")
	(<- file$close f)
} {
	(:> (<- string$format "Unable to open file '%s'!\n" fp))
})
(:> "File size: " (<- path$size "build/hello.txt") "\n")
(<- file$write file$stdout "Argument Count: " ($ sys$ARGV) "\n")
(-> (= i 0) (< i ($ sys$ARGV))
	(:> "[" i "] = " (: sys$ARGV i) "\n")
	(++ i)
)
(:> "Platform: " sys$PLATFORM "\n")
(= st (<- time$time))
(= tm (<- time$sleep 0.1))
(= et (<- time$time))
(:> "Delta Time: " (- et st) "s (" tm "s)\n")
(= z z z z z z z z z)
(= factorial (,,, n
	(? (< n 3)
		(@@ n)
	)
	(@@ (* n (<- factorial (- n 1))))
))
(:> "Recursive Factorial: 10! = " (<- factorial 10) "\n")
(= arr [1 2 3 4 5 6 7 8 9 10])
(:> "Array: " arr ", (Length: " ($ arr) ")\n")
(= print_array (,,, a
	(:> "[")
	(-> (= idx 0) (< idx ($ a))
		(? idx (:> ", "))
		(:> (: a idx))
		(++ idx)
	)
	(:> "]")
))
(:> "Array: ") (<- print_array arr) (:> "\n" "")
(= map <1 "a" 2 "b" 3>)
(:> "Map: " map "\n")
(= print_map (,,, m
	(:> "<")
	(= k (:: m map_key_type))
	(-> (= idx 0) (< idx ($ m))
		(? idx (:> ", "))
		(:> (: k idx) ": " (: m (: k idx)))
		(++ idx)
	)
	(:> ">")
))
(:> "Map: ") (<- print_map map) (:> "\n")
(:> "Map: " map " Keys: " (:: map map_key_type) " Values: " (:: map map_value_type) "\n")
(:> "Parsed: " (<- json$parse JSON_STRING) "\n")
(= v 5.943)
(:> "Round Down: " v " -> " (:: v int_type) "\n")
(:> "€\n")
(:> (+ "test-" 2) ", " (+ [2 3 4] <1> "a" [5 6 7]) ", " (+ <1 2> <3 4> "a") "\n")
(:> (, (:> "A") 0 1) "\n")
(<- (,,, f (<- f)) (,,, (:> "Inner Call\n")))
(:> "A: " (+ 1 2) "\n")
(:> "Path: " fp "\n")
(:> "Upper Case Path: " (<- string$upper_case fp) "\n")
(= arr [1 2 3 4 5 6 2 3 2])
(:> arr "\n" (>> arr 2) "\n" (<< arr 5) "\n" (>> arr 7) "\n" (+ arr 1) "\n" (+ < "a" "b"> 1) "\n" (- arr 2) "\n" (- arr [1 3 5]) "\n" (/ "abcda" "a") "\n" (// arr 2) "\n" (/ arr [2 3]) "\n" (- <1 2 3 4 5 6> 1) "\n" (- "abCDabCBA" "ab") "\n")
(:> (<- string$title_case "tItLe: CaSE!") "\n")
(:> (<- string$replace "ab_#_cde_#f#g" "_#" "~@$") "\n" (- "a1bc1d11e" 1) "\n" (: arr) "\n")
(= data "\xdf`\xd9\xebT%\xa3+\x91\xa4G\xbb\xa9\xaf\xad\xe9")
(= data_encoding0 0x37)
(= data_encoding1 "S\xcdrL\xf8\x88\x0f\xc3\x14\t\xfc")
(:> "Decoded data: " (^ (~ data) data_encoding0 data_encoding1) "\n")
(:> "Decoded data: " (:: (^ (~ (:: data array_type)) data_encoding0 data_encoding1) string_type) "\n")
(:> (+ <1 "a" 2 "b"> 1 <2 "c" 3 "d">) "\n" [(& "ghi" "ABCDEF")] "\n" (* "XYZ-@" -3) "\n" (* [1 2 3] 1.5) "\n")
(:> (* (:: "abc" string_type) "def") "\n" (:: (* "A" 100) map_key_type) "\n" (:: arr string_type map_type array_type) "\n")
(:> (* [1 2.3456 -78] ["a" arr "cd"]) "\n" (== [1 2 3] [1 2 3 4]) "\n" (== "abc" <0 'a' 2 "c" 1 0x62>) "\n" (== "def" ["d" 'e' 0x66]) "\n")
(:> (== [4 5 6] <2 6 0 4 1 5>) "\n" (== <"a" 9384 arr 'c'> <arr 'c' "a" 9384>) "\n" (& [1 2 3 3] [2 3 4]) "\n" (- 128.4 "abc") "\n")
(:> (| [1 2 3] [3 4 4 5]) "\n" (* "abcdefghij" 2.3) "\n" (| <1 0.585 "a" 5> "ghijklmnop" [0.1234 7_8.9]) "\n")
(:> (& <1 "a" 2 "b"> <2 "b2" 3 "c" 4 "d">) "\n" (& <1 "a" 2.1 "b"> ["c" "d" "e" "f"]) "\n" (& <1 "a" 2.1 "b"> "cdef") "\n")
(:> (^ [1 2 3] [4 5 6 7]) "\n" (* "abc" [5 6 7]) "\n" (/ "abcdabcdabcdabcd" 'a') "\n" (* "abcdefghij" 0.7) "\n" (<- string$replace "one-two-three-four-five" '-' ",") "\n")
(= (: arr 0) "zero")
(:> (<- string$lower_case "aBcDeFgHi") "\n" (<- string$upper_case "aBcDeFgHi") "\n" (<< arr 2) "\n" (<< (>> "acegi" -1) -2) "\n" (%% arr) "\n")
(:> (% "abcbaXaXXabcdX" "X") "\n" (: "abcdefg" -4 5) "\n")
(:> "Length of array == 9? " (?: (=== 9 ($ arr)) "True" "False") "\n")
(:> "Length: ")
(?? ($ arr)
	0 (:> "zero")
	1 (:> "one")
	2 (:> "two")
	3 (:> "three")
	4 (:> "four")
	5 (:> "five")
	6 (:> "six")
	7 (:> "seven")
	8 (:> "eight")
	9 (:> "nine")
	10 (:> "ten")
	(:> "(number too big)")
)
(:> "\n")
(:> (: "abcdefghijklmnopqrstuvwxyz" 5 2 -1) "\n" (<- string$flip_case "Hello, World!") "\n")
(:> "Type: " (:? arr) "\n" (<- string$format "%s - %c - %.2x\n" "string" 'C' 15.46))
(:> (<- path$list_dir "." false) "\n")

(= format_bytes (,,, sz (@@ (?:
	(< sz (<< 1 10)) (+ sz " b")
	(< sz (<< 1 20)) (+ (>> sz 10) " kb")
	(< sz (<< 1 30)) (+ (>> sz 20) " Mb")
	(+ (>> sz 30) " Gb")
))))
(= file_and_size_type (&:
	(~ string_type) fp
	(~ int_type) sz
))
(= file_list (<- path$list_dir "src" true))
(= arr ([> (= i 0) (< i ($ file_list))
	(= k (: file_list i))
	(++ i)
	(. file_and_size_type
		(<- path$absolute k)
		(<- path$size k)
	)
))
(<- sort$sort arr true true (,,, k (@@ k$sz)))
(-> (= i 0) (< i ($ arr))
	(= e (: arr i))
	(:> e$fp " -> " (<- format_bytes e$sz) "\n")
	(++ i)
)

(= point_type (&:
	int_type x
	(~ int_type) y
))
(= point_string_type (&:
	point_type p
	string_type str
))
(= v (. point_type 4))
(= v$x -5)
(= v$y 11111); Failure to assign value to 'const' field
(:> point_type "\n" (. (&:)) "\n" (. int_type 5.59) "\n" (. map_type 1 'a' 2 'b' 3 'c') "\n" v "\n" (:? v) "\n" point_string_type "\n" (. point_string_type) "\n")
(= test_type (&:
	(&:
		float_type x
		float_type y
	) p
	int_type depth
))
(:> (. test_type [1 2] 3) "\n" v$x "\n" (: (. test_type [-1 -1]) "p") "\n")
(= new_point (. point_string_type [1 2] -5687.7))
(= p2 (: new_point))
(= p2$str "point-2")
(= new_point$p (. point_type 5 6))
(:> new_point "\n" p2 "\n" (<- 11111111 1 5) "\n")

(<- log$log "No Function")
(= test_log_func (,,, (<- log$log "Named Function")))
(<- test_log_func)
(<- (,,, (<- log$log "Anonymous Function")))

(:> (<- string$count_left "aaabcdefg" 'a') "\n" (<- string$count_right "abcdefggggg" 'g') "\n")

(= tm (<- time$time))
(= dt (<- date$from_time tm))
(:> dt "\n" (<- date$to_time dt) "\n" (- (<- date$to_time dt) tm) "\n")

(:> "Current PID: " process$PID "\n")
(<- process$shell "echo Shell!")
(:> (<- process$start [sys$EXECUTABLE "-V"]) "\n")

(:> sys$LIBRARY "\n")

(:> file$stdout "\n")

(= h (<- hash$md5$init))
(= h (<- hash$md5$update h "abc"))
(= h (<- hash$md5$update h "defg"))
(:> (<- hash$hexdigest (<- hash$md5$digest h)) "\n7ac66c0f148de9519b8bd264312c4d64\n")

(= h (<- hash$sha1$init))
(= h (<- hash$sha1$update h "abc"))
(= h (<- hash$sha1$update h "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABC"))
(:> (<- hash$hexdigest (<- hash$sha1$digest h)) "\n7c79894450f353c7108e70f45776ee6772947e0d\n")

(= h (<- hash$sha224$init))
(= h (<- hash$sha224$update h "Hello World!"))
(:> (<- hash$hexdigest (<- hash$sha224$digest h)) "\n4575bb4ec129df6380cedde6d71217fe0536f8ffc4e18bca530a7a1b\n")

(= h (<- hash$sha256$init))
(= h (<- hash$sha256$update h "aBcDeFgHi"))
(:> (<- hash$hexdigest (<- hash$sha256$digest h)) "\n5ba40d59ca7520b5f8a6eb48be70f9c6e8d0f30490d859ea860aa0d8fe5578b6\n")

(= h (<- hash$sha384$init))
(= h (<- hash$sha384$update h "Example Message"))
(:> (<- hash$hexdigest (<- hash$sha384$digest h)) "\n007bd747919d9fd354ba252a15f06136cb2783c08e57069f629accff0553eddd123e148395b99a39959c7daf04d66c81\n")

(= h (<- hash$sha512$init))
(= h (<- hash$sha512$update h "sha-512 test"))
(:> (<- hash$hexdigest (<- hash$sha512$digest h)) "\n00f3c0160c8e98c2e6617333bc8b3778d69e020e138204016100f89551995215d5790fbe410cb46dc84d90a3c53701aece1953f975a587eaa6c9745b705f3f81\n")

(-> (= i 1) (<= i 20) {
	(? (&& (! (% i 2)) (! (% i 3))) {
		(:> "Multiple of 6: " i "\n")
	})
	(? (|| (! (% i 3)) (! (% i 5))) {
		(:> "Multiple of 3 or 5: " i "\n")
	})
	(++ i)
})

(= ū̆́ẗᶂ―⓼ (<- (,,, (@@ 4.5))))
(= str "ū̆́ẗᶂ―⓼")
(:> ū̆́ẗᶂ―⓼ "\n" str ", " [str] "\n")

(:> "Checksum of 'abc': " (<- string$checksum "abc") "\n")

(:> (<- base64$encode "Example message to encode") "\nRXhhbXBsZSBtZXNzYWdlIHRvIGVuY29kZQ==\n")
(:> (<- base64$decode "RXhhbXBsZSBtZXNzYWdlIHRvIGVuY29kZQ==") "\nExample message to encode\n")

(:> (<- json$stringify (<- json$parse JSON_STRING)) "\n")

(:> math "\n")
(:> (<- math$combinations 5 3) "\n")

(:> (<- int$to_bin -4657) "\n" (<- int$to_oct -4657) "\n" (<- int$to_hex -4657) "\n" (<- int$to_dec -4657) "\n")

(:> (<- http:mime$get_type "file.css") ", " (<- http:mime$get_ext "application/javascript") "\n")

(--- "path/to/nonexistent/file.sll")

(:> ([> (= i 0) (< i 10) (= o i) (++ i) o) "\n")
(:> ({< (= i 0) (< i 26) (++ i) (:: (+ i 64) char_type) (:: (+ i 96) char_type)) "\n")

(= str (<- string$upper_case "The quick brown fox jumps over the dog"))
(-> (= i 0) (< i 26) {
	(= ch (:: (+ i 'A') 2))
	(? (|: str ch) {
		(:> "Contains letter '" ch "'\n")
	} {
		(:> "Doesn't contains letter '" ch "'\n")
	})
	(++ i)
})

(:> sys$CPU_COUNT "\n")

(= extra_func_type (&:
	(,,, a {
		(:> "[init: \"" a "\"]")
	}) @@init@@
	(,,, a {
		(= a$count (+ a$count 1))
		(:> "[copy: \"" a "\"]")
	}) @@copy@@
	(,,, a {
		(@@ (<- string$format "<counter=%u>" a$count))
	}) @@string@@
	(,,, a {
		(:> "[delete: \"" a "\"]")
	}) @@delete@@
	int_type count
))

(= test (. extra_func_type))
(= test-2 (: (: test)))
(:> test-2 "\n")

(-> (= i 0) (< i 10) {
	(:> [(<- random$get_int 0 100) (<- random$get_float) (<- random$get_char 65 90) (<- random$get_string 5)] "\n")
	(++ i)
})

(= fl (<- math$factors 1269774))
(= n 1)
(-> (= i 0) (< i ($ fl)) {
	(= f (: fl i))
	(= n (* n (<- math$int_pow f$prime f$power)))
	(++ i)
})
(:> (<- string$join '*' fl) ", " n "\n" (<- math$euler_phi 20) "\n")

(= arr [0 1 2 3 4 5])
(<- array$push arr 6)
(:> arr "\n")
(<- array$remove arr 0)
(:> arr "\n")
(<- array$extend arr [7 8 9])
(:> arr "\n")
(= arr (<- array$split arr 5))
(:> arr "\n")
(= arr (<- array$join arr 5))
(:> arr "\n")
(:> (<- array$pop arr) ", " arr "\n")
(:> (<- array$shift arr) ", " arr "\n")
(<- array$unshift arr 1)
(:> arr "\n")

(:> (<- string$pad "> Title <" 15 '=') "\n")

(:> [(<- string$trim_left " \t\n\r\vLeft \t\n")] "\n")
(:> [(<- string$trim_right " \t\n\r\vRight \t\n")] "\n")
(:> [(<- string$trim " \t\n\r\vBoth \t\n")] "\n")

(:> sys$VERSION ", " (?: ($ sys$VERSION$commit)
	(<- string$format "commit/%s [%s]" sys$VERSION$commit sys$VERSION$url)
	"local"
) ", " sys$VERSION$time "\n")

(:> (<- uuid$uuid3 uuid$NAMESPACE_DNS "123") "\n")
(:> (<- uuid$uuid4) "\n")
(:> (<- uuid$uuid5 uuid$NAMESPACE_URL "abc") "\n")

(= buffer (<- file$from_data "Abcdefghijklmnopqrstuvwxyz"))
(:> buffer "\n")
(:> (<- file$read buffer 15) " (" (<- file$peek buffer) ")\n")
(:> (<- file$read buffer 15) " (" (<- file$peek buffer) ")\n")

(:> sys$ENVIRONMENT "\n")
(:> (<- sys$get_env "A" "<No value>") "\n")
(<- sys$set_env "A" "0123456789")
(:> (<- sys$get_env "A" "<No value>") "\n")
(<- sys$remove_env "A")
(:> (<- sys$get_env "A" "<No value>") "\n")

(:> file$TEMP_FILE_PATH "\n")

(<- file$rename "build/hello.txt" "build/hello-rename.txt")

(<- file$copy "build/hello-rename.txt" "build/new-hello.txt")

(= f (<- file$from_data "" file$FLAG_WRITE))
(<- file$write f "abc")
(<- file$write f '#')
(:> (<- file$get_buffer f) "\n")
(<- file$close f)

(= tmp (<- file$from_data "" file$FLAG_WRITE))
(<- serial$encode tmp <"#a" 56 "very-long-key" JSON_STRING [44 -0.0505e7]>)
(= enc (<- file$get_buffer tmp))
(<- file$close tmp)
(:> [enc] "\n")
(= tmp (<- file$from_data enc file$FLAG_READ))
(= obj (<- serial$decode tmp))
(<- file$close tmp)
(:> obj "\n")

(:> (<- sys$get_sandbox_flags) "\n")

(= var_arg_func (,,, x y @@extra@@
	(:> x ", " y ", " @@extra@@ "\n")
))
(<- var_arg_func)
(<- var_arg_func 1 2 3 4 5)
(<- var_arg_func 1 2 [3 4 5] 6 7)

(= lock (<- thread$create_lock))
(<- thread$acquire_lock lock)
(:> lock "\n")
(= thr (<- thread$start (,,,
	(-> (= idx 0) (< idx 30) {
		(<- thread$acquire_lock lock)
		(? (=== idx 1) (:> lock "\n"))
		(:> "thread-1: " idx "\n")
		(<- thread$release_lock lock)
		(++ idx)
	})
	(:> (+ "thread-0-state: " (:: (<- thread$get 0) string_type) "\n"))
)))
(= thr2 (<- thread$start (,,,
	(-> (= idx 0) (< idx 20) {
		(<- thread$acquire_lock lock)
		(:> "thread-2: " idx "\n")
		(<- thread$release_lock lock)
		(++ idx)
	})
)))
(:> [thr thr2] "\n")
(<- thread$release_lock lock)
(<- thread$join thr)
(:> thr "\n")

(<- file$delete "build/new-hello.txt")

(<- path$mkdir "build/test")

(= f (<- file$open "this/file/does/not/exist.txt"))
(:> f$error_data "\n" f "\n")

(= arr [[1 2] [3 4]])
(= n_arr (:! arr))
(= (: (: arr 0) 0) 'A')
(:> arr ", " n_arr "\n")

(= s (<- struct$create "HIhd"))
(= enc (<- struct$encode s 0x1234 0xff77ff77 -0x5678 123.456e7))
(:> s ", " s$size ", " s$data_size ", " [enc] ", " (<- struct$decode s enc) "\n")

(:> (<- base64$decode "A") "\n")
(:> (<- base64$decode "MT!z") "\n")

(:> (<- hash$hexdigest (<- hmac$hmac hash$sha1 "VERY-SECRET-KEY" "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")) "\na6b10d9db5f817a532f3065892ecf309d7660d7a\n")

(:> "File: " @@file@@ ", Line: " @@line@@  "\n")

(:> (.? hash$hexdigest) ", " (.? hash) ", " (&:? hash$hash_type) ", " (&:? array_type) "\n")

(= str (+ "prefix_" (<- (,,, (@@ "test_string")))) (:> (<- vm$get_ref_count str) "\n"))
(:> "String: " str " (RC: " (<- vm$get_ref_count str) ")\n")
(:> "String: " str "\n")
(:> (<- vm$get_ref_count str) "\n")
(= x [5 10])
(= y x)
(:> "Array: " x " (RC: " (<- vm$get_ref_count x) ")\n")
(:> (<- vm$get_ref_count x) ", " (<- vm$get_ref_count y) "\n")

(= start (<- vm$get_instruction_count))
(-> (= ii 0) (< ii 100) {
	(++ ii)
	(? (== ii 5) (<<<))
	(:> "II=" ii "\n")
	(? (=== ii 10) (@))
})
(= end (<- vm$get_instruction_count))
(:> "Loop executed " (- end start) " instruction(s).\n")

(:> (<- vm$get_config) "\n")

(:> (<- vm$get_location) "\n")
(<- (,,, (:> (<- vm$get_location) "\n")))
(:> (<- vm$get_location (- (<- vm$get_instruction_index) 50)) "\n")

(:> (<- error$get_call_stack) "\n")
(= test_func (,,, (:> (<- error$get_call_stack) "\n")))
(<- test_func)
(<- (,,, (:> (<- error$get_call_stack) "\n")))
(<- (,,, (<- test_func)))

(= arr [0 1 2 3 4 5 6 7 8 9])
(<- random$shuffle arr)
(:> arr ", " (<- random$choice arr) "\n")

(<- thread$start (,,,
	(-> (= tmp-idx 0) (< tmp-idx 2000) (++ tmp-idx))
	(= b_thr (<- thread$get 0))
	(<- thread$suspend b_thr)
	(:> "Call stack of main thread: " (<- error$get_call_stack 0 b_thr) "\nInternal data of main thread: " (<- thread$get_internal_data b_thr) '\n')
	(<- thread$start b_thr)
))
(-> (= idx 0) (< idx 100)
	(? (! (% idx 10)) (:> idx "%...\n"))
	(<- (,,, proxy_func
		(@@ (<- proxy_func))
	) (,,,
		(-> (= tmp-idx 0) (< tmp-idx 100) (++ tmp-idx))
		(@@ -1)
	))
	(++ idx)
)

; (:> "CHAR: " (,
; 	(<- file$flush file$stdout)
; 	(<- file$read_char file$stdin)
; ) "\n")

(:> `Raw String\\n ` "\a\n")
|#|
(<- sys$set_sandbox_flags "file-delete")
(:> (<- sys$get_sandbox_flags) "\n")
(<- thread$join (<- thread$start (,,,
	(<- sys$set_sandbox_flags "no-environment")
	(:> "Thread flags: " (<- sys$get_sandbox_flags) "\n")
)))
(:> (<- sys$get_sandbox_flags) "\n")

(= !tls_var 8)
(<- thread$join (<- thread$start (,,,
	(:> "TLS value: " tls_var "\n")
)))
(:> tls_var "\n")

(:> (<- object$new "[][1]cM<>[Zf <i A> s]0 a mO" 'x' 0.5 45 "abcdefg" [0 1 2 3 4 5 6 7 8 9] <1 2 3 4 5 6> log) "\n")

(= obj [1 2 3])
(= weak_reference (<- weakref$ref obj))
(<- array$push weak_reference$callbacks (,,, obj weak_reference
	(:> (<- string$format "<<< object '%S' (from weak reference '%p') has been deleted >>>" obj weak_reference))
))
(:> "Weakref: " (<- weakref$get weak_reference) "\n")
(:> "Delete: " obj "\n")
(:> "Weakref: " weak_reference "\n")

(<- atexit$register (,,, a b
	(:> "End: " a ", " b "\n")
) 3 ['a' 'b' 'c'])

(= tmp_fn (,,, (:> "Not a real function!\n")))

(<- atexit$register tmp_fn)
(:> (<- atexit$unregister tmp_fn) "\n")
(:> (<- atexit$unregister tmp_fn) "\n")

(<- audit$register tmp_fn)
(<- audit$unregister tmp_fn)

(:> (<- statistics$mean [1 2 3 4 4]) ", 2.8\n")
(:> (<- statistics$mode [1 1 2 3 3 3 3 4]) ", 3\n")
(:> (<- statistics$median [1 3 5]) ", 3\n")
(:> (<- statistics$median_low [1 3 5]) ", 3\n")
(:> (<- statistics$median_high [1 3 5]) ", 3\n")
(:> (<- statistics$median [1 3 5 7]) ", 4\n")
(:> (<- statistics$median_low [1 3 5 7]) ", 3\n")
(:> (<- statistics$median_high [1 3 5 7]) ", 5\n")
(:> (<- statistics$geometric_mean [54 24 36]) ", 36\n")
(:> (<- statistics$harmonic_mean [40 60]) ", 48\n")

(:> (<- statistics$linear_regression [
	1
	2
	3
	4
	5
] [
	4.8559
	7.8271
	10.8887
	14.702
	16.8724
]) ", y=x*3.0908+1.7569\n")

(= x [1 2 3 4 5 6 7 8 9])
(= y [9 8 7 6 5 4 3 2 1])
(:> (<- statistics$correlation x x) ", 1\n")
(:> (<- statistics$correlation x y) ", -1\n")

(:> (<- statistics$quantiles
	[1 2 5 6 7 8 10 11]
	5
) ", [1.8 5.6 7.4 10.2]\n")

(:> (<- statistics$variance [3 1 6 7 8 1]) ", 7.8888888888888893\n")
(:> (<- statistics$stddev [3 1 6 7 8 1]) ", 2.8087165910587863\n")

(:> [0.0i 0b111i 1e4-3e4i +5.4] "\n")

; (<- sys$set_sandbox_flags "no-path")

(:> (<- path$mkdir "abc/abc/abc") "\n")

(= func (,,, a b
	"Adds the numbers `a` and `b` and returns the result."
	(@@ (+ a b))
))
(:> (<- func 1 2) "\n")

(:> `Backick: `` Newline:
abc` '\n')

(:> (<- math$sin math$PI) ", 0.0\n")
(:> (<- math$sin 2i) ", 3.6268604078470186i\n")
(:> (<- math$abs -58) "\n")

(= thr (<- thread$start (,,,
	(= LETTERS "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
	(= i 0)
	(-> nil (< i ($ LETTERS))
		(:> (: LETTERS i) '\n')
		(? (=== i 16) (<- thread$exit i))
		(++ i)
	)
	(@@ i)
)))
(<- thread$join thr)
(:> thr$return_value "\n" "")

(:> clib:library$SLL_LIBRARY '\n')

(:> (<- clib:library$load "unknown/library/file.dll") '\n')

(= c_stdlib (<- clib:library$load (: <
	"darwin" "libSystem.dylib"
	"linux" "libc.so.6"
	"windows" "msvcrt.dll"
> sys$PLATFORM)))
(:> c_stdlib '\n')
(= time_fn (<- clib:library$lookup_symbol c_stdlib "time"))
(:> time_fn '\n')

(:> (<- clib:library$get_loaded_libraries) '\n')

(= time_fn$arguments [clib:types$void*])
(= time_fn$return clib:types$unsigned_long_long_int)
(:> (<- clib:function$declaration time_fn) ";\n")

(:> (<- clib:function$call time_fn nil) '\n')

(<- (,,,
	(<- (,,,
		(:> "Nested!\n")
	))
))

(:> (<- path$relative "src/sll/gc.c" "src/_build") '\n')

; (:> (<- window_manager:display$enumerate) '\n')

; (= window (<- window_manager:window$create [0 0 900 600] nil "Example Window" true))
; (<- window_manager:window$set_geometry window [300 300 1024 1024])
; (<- window_manager:window$set_size_constraints window [300 900] [300 600])
; (= cursor_list [window_manager:cursor$CURSOR_HIDDEN window_manager:cursor$CURSOR_DEFAULT window_manager:cursor$CURSOR_CROSS window_manager:cursor$CURSOR_I_BEAM window_manager:cursor$CURSOR_WAIT window_manager:cursor$CURSOR_BUSY window_manager:cursor$CURSOR_FORBIDDEN window_manager:cursor$CURSOR_POINTER window_manager:cursor$CURSOR_RESIZE_VERTICAL window_manager:cursor$CURSOR_RESIZE_HORIZONTAL window_manager:cursor$CURSOR_RESIZE_DIAGONAL_BT window_manager:cursor$CURSOR_RESIZE_DIAGONAL_TB window_manager:cursor$CURSOR_RESIZE_ALL window_manager:cursor$CURSOR_HELP])
; (= cursor_list_index 1)
; (= example_icon (. window_manager:image$window_manager_image_type
; 	2
; 	2
; 	"\xff\x00\x00\xff\x00\xff\x00\xff\x00\x00\xff\xff\xff\xff\x00\xff"
; ))
; (= window$callbacks$key_down (,,, window key
; 	(?? key
; 		window_manager:keyboard$KEY_ESCAPE (<- window_manager:window$destroy window)
; 		'1' (<- window_manager:window$set_state window window_manager:window$STATE_MINIMIZED)
; 		'2' (<- window_manager:window$set_state window window_manager:window$STATE_NORMAL)
; 		'3' (<- window_manager:window$set_state window window_manager:window$STATE_MAXIMIZED)
; 		'4' (<- window_manager:window$set_state window window_manager:window$STATE_FULLSCREEN)
; 		'C' (:> (<- window_manager:cursor$get) '\n')
; 		'D' (<- window_manager:cursor$center window)
; 		'K' (<- window_manager:window$set_icon window example_icon)
; 		'L' (<- window_manager:window$set_icon window nil)
; 		'S' (<- window_manager:cursor$center)
; 		window_manager:keyboard$KEY_LEFT {
; 			(? (! cursor_list_index) (= cursor_list_index ($ cursor_list)))
; 			(-- cursor_list_index)
; 			(<- window_manager:window$set_cursor window (: cursor_list cursor_list_index))
; 		}
; 		window_manager:keyboard$KEY_RIGHT {
; 			(++ cursor_list_index)
; 			(? (=== cursor_list_index ($ cursor_list)) (= cursor_list_index 0))
; 			(<- window_manager:window$set_cursor window (: cursor_list cursor_list_index))
; 		}
; 	)
; ))
; (-> nil (! (& window$flags window_manager:window$FLAG_CLOSED))
; 	(<- window_manager:event$poll true)
; )
; (:> window '\n')
(:> [. . . . . . . .] '\n')
(:> "AAA" "B" '\n')
(:> '#' "$\n")
(= i 0)
(= arg 1)
(><
	(? (=== i 10) (@))
	(++ i)
	(= arg (* arg i))
)
(:> arg '\n')

; (= address_info (<- socket$getaddrinfo "www.example.com" 80 nil socket$SOCK_STREAM))
; (:> address_info '\n')
; (= sock nil)
; (-> (= i 0) (< i ($ address_info))
; 	(= data (: address_info i))
; 	(++ i)
; 	(= sock (<- socket$create data$address_family data$type data$protocol))
; 	(?
; 		(!== (:? sock) socket$socket_type) (<<<)
; 		(! (<- socket$connect sock data$address)) (@)
; 	)
; 	(= sock nil)
; )
; (? sock {
; 	(:> sock '\n')
; 	(<- file$write sock "GET / HTTP/1.0\r\nHost: www.example.com\r\n\r\n")
; })

(= example_type (&:
	"comment"
	`next line`
	(~ int_type) x
	int_type y
))
(= point (. example_type -1 22))
(:> point '\n')

; (:> (<- gfx:vulkan$get_version) '\n')
; (:> (<- gfx:vulkan$get_extensions) '\n')

; (= window (<- window_manager:window$create [0 0 900 600] nil "Example GFX Window" true))
; (= ctx (<- gfx:context$create window true))
; (= window$callbacks$key_down (,,, window key
; 	(?? key
; 		window_manager:keyboard$KEY_ESCAPE (<- window_manager:window$destroy window)
; 	)
; ))
; (= vertex_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_VERTEX gfx:buffer$DATA_TYPE_FLOAT32 [
; 	+0.5 +0.5 +0.0 1.0 1.0 1.0 0.0 0.0
; 	-0.5 +0.5 +0.333 1.0 1.0 1.0 2.0 0.0
; 	-0.5 -0.5 +0.666 1.0 1.0 1.0 2.0 2.0
; 	+0.5 -0.5 +1.0 1.0 1.0 1.0 0.0 2.0
; 	+1.0 +1.0 +0.5 1.0 0.0 0.0 0.0 0.0
; 	-1.0 +1.0 +0.5 0.0 1.0 0.0 1.0 0.0
; 	-1.0 -1.0 +0.5 0.0 0.0 1.0 1.0 1.0
; 	+1.0 -1.0 +0.5 1.0 0.0 1.0 0.0 1.0
; ]))
; (<- gfx:buffer$hint_update_frequency vertex_buffer gfx:buffer$FREQUENCY_HIGH)
; (= index_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_INDEX gfx:buffer$DATA_TYPE_UINT16 [
; 	0 1 2
; 	0 2 3
; 	4 5 6
; 	4 6 7
; ]))
; (= uniform_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_UNIFORM gfx:buffer$DATA_TYPE_FLOAT32 [
; 	1.0 0.5 0.3
; ] true))
; (= texture_buffer (<- gfx:buffer$create ctx gfx:buffer$TYPE_TEXTURE gfx:buffer$DATA_TYPE_UINT32 [
; 	0xffff0000 0xff00ff00 0xffff00ff
; 	0xff0000ff 0xffffff00 0xff00ffff
; ] true))
; (= texture (<- gfx:texture$create ctx [3 2] (| gfx:data_type$SIZE_8BIT gfx:data_type$COUNT_4 gfx:data_type$TYPE_COLOR_UNORM) texture_buffer))
; (= sampler (<- gfx:sampler$create ctx (. gfx:sampler$gfx_sampler_config_type
; 	gfx:sampler$FILTER_NEAREST
; 	gfx:sampler$FILTER_NEAREST
; 	gfx:sampler$ADDRESS_MODE_TYPE_REPEAT
; 	gfx:sampler$ADDRESS_MODE_TYPE_CLAMP
; 	gfx:sampler$ADDRESS_MODE_TYPE_REPEAT
; )))
; (= pipeline (<- gfx:pipeline$create ctx (. gfx:pipeline$gfx_pipeline_config_type
; 	gfx:pipeline$TOPOLOGY_TRIANGLE_LIST
; 	[
; 		[
; 			[
; 				0
; 				0
; 				0
; 				(| gfx:data_type$SIZE_32BIT gfx:data_type$COUNT_3 gfx:data_type$TYPE_FLOAT)
; 			]
; 			[
; 				0
; 				1
; 				12
; 				(| gfx:data_type$SIZE_32BIT gfx:data_type$COUNT_3 gfx:data_type$TYPE_FLOAT)
; 			]
; 			[
; 				0
; 				2
; 				24
; 				(| gfx:data_type$SIZE_32BIT gfx:data_type$COUNT_2 gfx:data_type$TYPE_FLOAT)
; 			]
; 		]
; 		32
; 	]
; 	[
; 		[
; 			gfx:pipeline$DESCRIPTOR_TYPE_UNIFORM_BUFFER
; 			0
; 			gfx:stage$STAGE_FRAGMENT
; 			uniform_buffer
; 		]
; 		[
; 			gfx:pipeline$DESCRIPTOR_TYPE_SAMPLER
; 			1
; 			gfx:stage$STAGE_FRAGMENT
; 			[
; 				texture
; 				sampler
; 			]
; 		]
; 	]
; 	[
; 		gfx:pipeline$POLYGON_MODE_FILL
; 		gfx:pipeline$FRONT_FACE_COUNTER_CLOCKWISE
; 		gfx:pipeline$CULL_MODE_FRONT
; 	]
; 	[
; 		(<- gfx:shader$create
; 			ctx
; 			"\x03\x02#\x07\x00\x00\x01\x00\n\x00\x08\x00%\x00\x00\x00\x00\x00\x00\x00\x11\x00\x02\x00\x01\x00\x00\x00\x0b\x00\x06\x00\x01\x00\x00\x00GLSL.std.450\x00\x00\x00\x00\x0e\x00\x03\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x0b\x00\x00\x00\x00\x00\x04\x00\x00\x00main\x00\x00\x00\x00\r\x00\x00\x00\x12\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00!\x00\x00\x00#\x00\x00\x00H\x00\x05\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00H\x00\x05\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00H\x00\x05\x00\x0b\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x03\x00\x00\x00H\x00\x05\x00\x0b\x00\x00\x00\x03\x00\x00\x00\x0b\x00\x00\x00\x04\x00\x00\x00G\x00\x03\x00\x0b\x00\x00\x00\x02\x00\x00\x00G\x00\x04\x00\x12\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\x1c\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00G\x00\x04\x00!\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00G\x00\x04\x00#\x00\x00\x00\x1e\x00\x00\x00\x02\x00\x00\x00\x13\x00\x02\x00\x02\x00\x00\x00!\x00\x03\x00\x03\x00\x00\x00\x02\x00\x00\x00\x16\x00\x03\x00\x06\x00\x00\x00 \x00\x00\x00\x17\x00\x04\x00\x07\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00\x15\x00\x04\x00\x08\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00+\x00\x04\x00\x08\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x04\x00\n\x00\x00\x00\x06\x00\x00\x00\t\x00\x00\x00\x1e\x00\x06\x00\x0b\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00 \x00\x04\x00\x0c\x00\x00\x00\x03\x00\x00\x00\x0b\x00\x00\x00;\x00\x04\x00\x0c\x00\x00\x00\r\x00\x00\x00\x03\x00\x00\x00\x15\x00\x04\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00+\x00\x04\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x17\x00\x04\x00\x10\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00 \x00\x04\x00\x11\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00;\x00\x04\x00\x11\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00+\x00\x04\x00\x06\x00\x00\x00\x14\x00\x00\x00\x00\x00\x80? \x00\x04\x00\x19\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00 \x00\x04\x00\x1b\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00;\x00\x04\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x03\x00\x00\x00;\x00\x04\x00\x11\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x17\x00\x04\x00\x1f\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00 \x00\x04\x00 \x00\x00\x00\x03\x00\x00\x00\x1f\x00\x00\x00;\x00\x04\x00 \x00\x00\x00!\x00\x00\x00\x03\x00\x00\x00 \x00\x04\x00\"\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00;\x00\x04\x00\"\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x006\x00\x05\x00\x02\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xf8\x00\x02\x00\x05\x00\x00\x00=\x00\x04\x00\x10\x00\x00\x00\x13\x00\x00\x00\x12\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x15\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x16\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x17\x00\x00\x00\x13\x00\x00\x00\x02\x00\x00\x00P\x00\x07\x00\x07\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x14\x00\x00\x00A\x00\x05\x00\x19\x00\x00\x00\x1a\x00\x00\x00\r\x00\x00\x00\x0f\x00\x00\x00>\x00\x03\x00\x1a\x00\x00\x00\x18\x00\x00\x00=\x00\x04\x00\x10\x00\x00\x00\x1e\x00\x00\x00\x1d\x00\x00\x00>\x00\x03\x00\x1c\x00\x00\x00\x1e\x00\x00\x00=\x00\x04\x00\x1f\x00\x00\x00$\x00\x00\x00#\x00\x00\x00>\x00\x03\x00!\x00\x00\x00$\x00\x00\x00\xfd\x00\x01\x008\x00\x01\x00"
; 			gfx:stage$STAGE_VERTEX
; 			"main"
; 		)
; 		(<- gfx:shader$create
; 			ctx
; 			"\x03\x02#\x07\x00\x00\x01\x00\n\x00\x08\x00*\x00\x00\x00\x00\x00\x00\x00\x11\x00\x02\x00\x01\x00\x00\x00\x0b\x00\x06\x00\x01\x00\x00\x00GLSL.std.450\x00\x00\x00\x00\x0e\x00\x03\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x08\x00\x04\x00\x00\x00\x04\x00\x00\x00main\x00\x00\x00\x00\t\x00\x00\x00\x16\x00\x00\x00&\x00\x00\x00\x10\x00\x03\x00\x04\x00\x00\x00\x07\x00\x00\x00G\x00\x04\x00\t\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00H\x00\x05\x00\x0b\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00G\x00\x03\x00\x0b\x00\x00\x00\x02\x00\x00\x00G\x00\x04\x00\r\x00\x00\x00\"\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\r\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\x16\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\"\x00\x00\x00\"\x00\x00\x00\x00\x00\x00\x00G\x00\x04\x00\"\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00G\x00\x04\x00&\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x13\x00\x02\x00\x02\x00\x00\x00!\x00\x03\x00\x03\x00\x00\x00\x02\x00\x00\x00\x16\x00\x03\x00\x06\x00\x00\x00 \x00\x00\x00\x17\x00\x04\x00\x07\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00 \x00\x04\x00\x08\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00;\x00\x04\x00\x08\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00\x17\x00\x04\x00\n\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00\x1e\x00\x03\x00\x0b\x00\x00\x00\n\x00\x00\x00 \x00\x04\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00;\x00\x04\x00\x0c\x00\x00\x00\r\x00\x00\x00\x02\x00\x00\x00\x15\x00\x04\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00+\x00\x04\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00 \x00\x04\x00\x10\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00+\x00\x04\x00\x06\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00? \x00\x04\x00\x15\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00;\x00\x04\x00\x15\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00+\x00\x04\x00\x06\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x80?\x19\x00\t\x00\x1f\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x03\x00 \x00\x00\x00\x1f\x00\x00\x00 \x00\x04\x00!\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00;\x00\x04\x00!\x00\x00\x00\"\x00\x00\x00\x00\x00\x00\x00\x17\x00\x04\x00$\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00 \x00\x04\x00%\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00;\x00\x04\x00%\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x006\x00\x05\x00\x02\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xf8\x00\x02\x00\x05\x00\x00\x00A\x00\x05\x00\x10\x00\x00\x00\x11\x00\x00\x00\r\x00\x00\x00\x0f\x00\x00\x00=\x00\x04\x00\n\x00\x00\x00\x12\x00\x00\x00\x11\x00\x00\x00\x8e\x00\x05\x00\n\x00\x00\x00\x14\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00=\x00\x04\x00\n\x00\x00\x00\x17\x00\x00\x00\x16\x00\x00\x00\x8e\x00\x05\x00\n\x00\x00\x00\x18\x00\x00\x00\x17\x00\x00\x00\x13\x00\x00\x00\x81\x00\x05\x00\n\x00\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00\x18\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x1b\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x1c\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00Q\x00\x05\x00\x06\x00\x00\x00\x1d\x00\x00\x00\x19\x00\x00\x00\x02\x00\x00\x00P\x00\x07\x00\x07\x00\x00\x00\x1e\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1a\x00\x00\x00=\x00\x04\x00 \x00\x00\x00#\x00\x00\x00\"\x00\x00\x00=\x00\x04\x00$\x00\x00\x00\'\x00\x00\x00&\x00\x00\x00W\x00\x05\x00\x07\x00\x00\x00(\x00\x00\x00#\x00\x00\x00\'\x00\x00\x00\x85\x00\x05\x00\x07\x00\x00\x00)\x00\x00\x00\x1e\x00\x00\x00(\x00\x00\x00>\x00\x03\x00\t\x00\x00\x00)\x00\x00\x00\xfd\x00\x01\x008\x00\x01\x00"
; 			gfx:stage$STAGE_FRAGMENT
; 			"main"
; 		)
; 	]
; ))
; (-> nil (! (& window$flags window_manager:window$FLAG_CLOSED))
; 	(-> (= i 2) (< i 34)
; 		(= value (- (: vertex_buffer$data i) ctx$delta_time))
; 		(? (< value 0) (= value (+ value 1)))
; 		(= (: vertex_buffer$data i) value)
; 		(= i (+ i 8))
; 	)
; 	(<- gfx:buffer$sync vertex_buffer)
; 	(<- gfx:pipeline$use pipeline)
; 	(<- gfx:buffer$use vertex_buffer)
; 	(<- gfx:buffer$use index_buffer)
; 	(<- gfx:buffer$draw index_buffer)
; 	(<- window_manager:event$poll false)
; 	(<- gfx:context$render ctx)
; )

(= data nil)
(? 1 {
(= ui_window (<- ui:core$create (<- window_manager:window$create [0 0 900 600] nil "Example Window" true) true))
(<- ui:core$set_background_color ui_window [0.5 0.1 0.8])
(= rectangle (<- ui:element:color$create
	ui_window
	[
		(<- ui:layout$create_filter_layout ui:layout$FILTER_HIGHEST [
			(<- ui:layout$create_standard_layout 0.5 -400)
			(<- ui:layout$create_standard_layout 0 20)
		])
		(<- ui:layout$create_standard_layout 0 20)
		(<- ui:layout$create_standard_layout 0 240)
		(<- ui:layout$create_range_layout
			(<- ui:layout$create_standard_layout 0 100)
			(<- ui:layout$create_standard_layout 0.5 0)
			(<- ui:layout$create_standard_layout 0 750)
		)
	]
	ui_window$root
))
(= button (<- ui:element:button$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 20)
		(<- ui:layout$create_standard_layout 0 20)
		(<- ui:layout$create_standard_layout 0 200)
		(<- ui:layout$create_filter_layout ui:layout$FILTER_LOWEST [
			(<- ui:layout$create_standard_layout 0 200)
			(<- ui:layout$create_standard_layout 1 -40)
		])
	]
	rectangle
))
(= rectangle2 (<- ui:element:color$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 1 0)
	]
	button
	[
		[0.8 0.09 0.22]
		[0.22 0.8 0.09]
		[0.09 0.22 0.8]
		[0.8 0.22 0.8]
	]
))
(= texture_buffer (<- gfx:buffer$create ui_window$context gfx:buffer$TYPE_TEXTURE gfx:buffer$DATA_TYPE_UINT32 [
	0xffff0000 0xff00ff00 0xffff00ff
	0xff0000ff 0xffffff00 0xff00ffff
] true))
(= texture (<- ui:texture$create
	ui_window
	(<- gfx:texture$create ui_window$context [3 2] (| gfx:data_type$SIZE_8BIT gfx:data_type$COUNT_4 gfx:data_type$TYPE_COLOR_UNORM) texture_buffer)
	(<- gfx:sampler$create ui_window$context (. gfx:sampler$gfx_sampler_config_type
		gfx:sampler$FILTER_NEAREST
		gfx:sampler$FILTER_NEAREST
		gfx:sampler$ADDRESS_MODE_TYPE_REPEAT
		gfx:sampler$ADDRESS_MODE_TYPE_CLAMP
		gfx:sampler$ADDRESS_MODE_TYPE_REPEAT
	)
)))
(= slider (<- ui:element:slider$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0.5 0)
		(<- ui:layout$create_standard_layout 0 50)
		(<- ui:layout$create_standard_layout 0 200)
		(<- ui:layout$create_standard_layout 0 100)
	]
	ui_window$root
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 0 0)
	]
	7
	0
))
(= rectangle3 (<- ui:element:texture$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 1 0)
	]
	slider
	texture
	[0.0 0.0 0.8 1.0]
))
(= handle (<- ui:element:button$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 -15)
		(<- ui:layout$create_standard_layout 0 -10)
		(<- ui:layout$create_standard_layout 0 30)
		(<- ui:layout$create_standard_layout 1 20)
	]
	slider
))
(= rectangle4 (<- ui:element:color$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 1 0)
	]
	handle
	[0.72 0.67 0.3]
))
(<- ui:element:slider$set_slider_element slider handle)
(= slider2 (<- ui:element:slider$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0.5 0)
		(<- ui:layout$create_standard_layout 0.5 0)
		(<- ui:layout$create_standard_layout 0 300)
		(<- ui:layout$create_standard_layout 0 200)
	]
	ui_window$root
	[
		(<- ui:layout$create_standard_layout 0 15)
		(<- ui:layout$create_standard_layout 0 15)
		(<- ui:layout$create_standard_layout 1 -30)
		(<- ui:layout$create_standard_layout 1 -30)
	]
	0
	0
	nil
	true
))
(= rectangle5 (<- ui:element:gradient$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 1 0)
	]
	slider2
	0.93
	[
		[0.0 0.0 0.0]
		[1.0 1.0 1.0]
	]
))
(= handle2 (<- ui:element:button$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 -15)
		(<- ui:layout$create_standard_layout 0 -15)
		(<- ui:layout$create_standard_layout 0 30)
		(<- ui:layout$create_standard_layout 0 30)
	]
	slider2
))
(= rectangle6 (<- ui:element:color$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 1 0)
	]
	handle2
	[0.8 0.5 0.13]
))
(= font_file_path (<- font:true_type$find "consolas" "monospace"))
(= font (<- font:true_type$create
	(<- file$read (<- file$open font_file_path "r"))
))
; (= atlas (<- font:true_type$create_atlas ui_window$context))
; (<- font:true_type$add_font atlas font)
; (<- ui:element:texture$create
; 	ui_window
; 	[
; 		(<- ui:layout$create_standard_layout 0 0)
; 		(<- ui:layout$create_standard_layout 0 0)
; 		(<- ui:layout$create_standard_layout 1 0)
; 		(<- ui:layout$create_standard_layout 1 0)
; 	]
; 	ui_window$root
; 	(<- ui:texture$create
; 		ui_window
; 		atlas$texture
; 		atlas$sampler
; 	)
; 	[0.0 0.0 1.0 1.0]
; )
(= text (<- ui:element:text$create
	ui_window
	[
		(<- ui:layout$create_standard_layout 0 0)
		(<- ui:layout$create_standard_layout 1 -50)
		(<- ui:layout$create_standard_layout 1 0)
		(<- ui:layout$create_standard_layout 0 50)
	]
	ui_window$root
	font
	"The quick brown fox jumps over the lazy dog"
))
(<- ui:element:slider$set_slider_element slider2 handle2)
(<- ui:element$set_name button "left-button")
(<- ui:element$set_name rectangle2 "left-button-color")
(<- ui:element$set_name slider "top-slider")
(<- ui:element$set_name rectangle3 "top-slider-bg")
(<- ui:element$set_name handle "top-slider-handle")
(<- ui:element$set_name slider2 "bottom-slider")
(<- ui:element$set_name rectangle5 "bottom-slider-bg")
(<- ui:element$set_name handle2 "bottom-slider-handle")
(= data (<- ui:serialize$serialize ui_window))
(:> [data ($ data)] '\n')
(<- window_manager:window$destroy ui_window$window)
})
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(= ui_window (<- ui:serialize$deserialize data true))
(= left-button (<- ui:element$get ui_window "left-button"))
(= left-button-color (<- ui:element$get ui_window "left-button-color"))
(= top-slider (<- ui:element$get ui_window "top-slider"))
(= top-slider-bg (<- ui:element$get ui_window "top-slider-bg"))
(= top-slider-handle (<- ui:element$get ui_window "top-slider-handle"))
(= bottom-slider (<- ui:element$get ui_window "bottom-slider"))
(= bottom-slider-bg (<- ui:element$get ui_window "bottom-slider-bg"))
(= bottom-slider-handle (<- ui:element$get ui_window "bottom-slider-handle"))
(= left-button$callback (,,,
	(:> "Click!\n")
	(<- ui:element:color$set_color left-button-color (+ (>> left-button-color$colors 1) [(: left-button-color$colors 0)]))
))
(= top-slider$callback (,,, _ x y
	(:> [x y] '\n')
))
(= top-slider-handle$callback (,,,
	(<- ui:element:top-slider$set_focus top-slider true)
))
(= bottom-slider-handle$callback (,,,
	(<- ui:element:slider$set_focus bottom-slider true)
))
(= ui_window$window$callbacks$key_down (,,, window key
	(?? key
		window_manager:keyboard$KEY_ESCAPE (<- window_manager:window$destroy window)
		'D' (:> (<- ui:element:slider$get_position top-slider) '\n')
		'S' (<- ui:element:slider$set_position top-slider 4 0)
	)
))
(= texture top-slider-bg$texture$texture)
(= texture_buffer texture$buffer)
(<- gfx:buffer$hint_update_frequency texture_buffer gfx:buffer$FREQUENCY_HIGH)
(= color_red 0.0)
(-> nil (! (& ui_window$window$flags window_manager:window$FLAG_CLOSED))
	(= color_red (% (+ color_red ui_window$context$delta_time) 1))
	(= color (|
		(& (: texture_buffer$data 0) 0xffffff00)
		(:: (* color_red 255) int_type)
	))
	(= (: texture_buffer$data 0) color)
	(<- gfx:buffer$sync texture_buffer)
	(<- gfx:texture$sync texture)
	(<- ui:element:gradient$set_angle bottom-slider-bg (+ bottom-slider-bg$angle ui_window$context$delta_time))
	(<- ui:core$update ui_window false)
)

(= devices (<- ds4:device$list))
(:> devices '\n')
(? devices {
	(= device (<- ds4:device$create (: devices 0)))
	(:> device '\n')
	(= device$controls$red 0xff)
	(= device$controls$led_on 10)
	(= device$controls$led_off 20)
	(-> nil (! (& device$buttons ds4:device$BUTTON_LOGO))
		(:> device '\n')
		(= device$controls$green (+ device$controls$green 1))
		(<- ds4:device$update device)
		(<- time$sleep (/ 1 60))
	)
})
