(# time sleep open close write platform argc argv get_ref_count parse read_url)
(? 1 (-- "time.sll" "file.sll" "sys.sll" "util.sll" "json.sll" "url.sll"))
(-> (= i 1) (< i 11) {
	(-> (= j 1) (< j 11) {
		(:> i '*' j " is equal to " (* i j) "\n")
		(= j (+ j 1))
	})
	(= i (+ i 1))
})
(= func (,,, x y {
	(:> "(Function Args: {x, y} = {" x ", " y "}) ")
	(@@ (* x y))
}))
(= FACTORIAL 10)
(= i 1 (:> "After Var Init (i=" i ")\n"))
(-> (= j 2) (<= j FACTORIAL) {
	(? (< j 5) {
		(:> "Small: " i "\n")
	}
	(< j 8) {
		(:> "Medium: " i "\n")
	} {
		(:> "End: " i " (j=" j ")\n")
	})
	(= i (* i j))
	(? (< j 5) (:> j "! = " i "\n"))
	(= j (+ j 1))
	(? (> 3 10 -5) (:> "This will Never Execute\n"))
})
(:> FACTORIAL "! = " i '\n')
(< 10 5 (:> "This Should Never Happen"))
(? 1 (-- "import.sll"))
(:> "Call: " (<- func 10 2) "\n")
(:> "Current Time (Internal Call): " (<- time) "\n")
(? true nil 2 (:> "Dead Code") (@@@ 128 "False Exit"))
(= f (<- open "build/hello.txt" "wb"))
(? f {
	(<- write f "Hello!\n")
	(:> "ABC\n")
	(:> f ", " (+ f 1) ", " (<< 2 (+ f 1)) "\n")
	|# (<- close f); Automatic Cleanup #|
} {
	(:> "Unable to open file!\n")
} )
(<- write stdout "Argument Count: " argc "\n")
(-> (= i 0) (< i argc) (:> "[" i "] = " (<- argv i) "\n") (= i (+ i 1)))
(:> "Platform: " platform "\n")
(= string (+ "prefix_" (<- (,,, (@@ "test_string")))) (:> (<- get_ref_count string) "\n"))
(:> "String: " string " (RC: " (<- get_ref_count string) ")\n")
(:> "String: " string "\n")
(:> (<- get_ref_count string) "\n")
(= x [5 10 x ["Abc" 148] ["Def" (<- time)]])
(= y x)
(:> "Array: " x " (RC: " (<- get_ref_count x) ")\n")
(:> (<- get_ref_count x) ", " (<- get_ref_count y) "\n")
(= st (<- time))
(= tm (<- sleep 0.1))
(= et (<- time))
(:> "Delta Time: " (- et st) "s (" tm "s)\n")
(= z z z z z z z z z)
(= factorial (,,, n
	(? (< n 3)
		(@@ n)
	)
	(@@ (* n (<- factorial (- n 1))))
))
(:> "Recursive Factorial: 10! = " (<- factorial 10) "\n")
(= arr [1 2 3 4 5 6 7 8 9 10])
(:> "Array: " arr ", (Length: " ($ arr) ")\n")
(= print_array (,,, a
	(:> "[")
	(-> (= idx 0) (< idx ($ a))
		(? idx (:> ", "))
		(:> (: a idx))
		(= idx (+ idx 1))
	)
	(:> "]")
))
(:> "Array: ") (<- print_array arr) (:> "\n" "")
(= map <1 "a" 2 "b" 3>)
(:> "Map: " map "\n")
(= print_map (,,, m
	(:> "<")
	(= k (:: m map_key_type))
	(-> (= idx 0) (< idx ($ m))
		(? idx (:> ", "))
		(:> (: k idx) ": " (: m (: k idx)))
		(= idx (+ idx 1))
	)
	(:> ">")
))
(:> "Map: ") (<- print_map map) (:> "\n")
(:> "Map: " map " Keys: " (:: map map_key_type) " Values: " (:: map map_value_type) "\n")
(:> "Parsed: " (<- parse "{\"key\":[\"value\",10,0.555,-842.9e-5,{\"a\":[\"c\",30,\"d\",\"\\t€\"],\"other\":\"else\"},true,false,null,[],{}]}") "\n")
; (:> "URL: " (<- read_url "GET" "example.com" "/" <> "") "\n")
(= v 5.943)
(:> "Round Down: " v " -> " (:: v int_type) "\n")
(:> "€\n")
(:> (+ "test-" 2) ", " (+ [2 3 4] <1> "a" [5 6 7]) ", " (+ <1 2> <3 4> "a") "\n")
(:> (, (:> "A") 0 1) "\n")
(<- (,,, f (<- f)) (,,, (:> "Inner Call\n")))
(-> (= ii 0) (< ii 100) {
	(= ii (+ ii 1))
	(? (== ii 5) (<<<))
	(:> "II=" ii "\n")
	(? (== ii 10) (@))
})
(:> "A: " (+ 1 2) "\n")
(? (! FACTORIAL) nil {
	(:> "Early Exit\n")
	(@@@ false)
})
(:> "Useless Code")
(@@@ 1)
