%YAML 1.2
name: Sll
file_extensions:
  - sll
scope: source.sll
version: 2
variables:
  not_identifier_chars: '\s$\(\);<>\[\]\{\}'
  identifier: '[^{{not_identifier_chars}}]+'
  identifier_access: '(?:{{identifier}}\$)*{{identifier}}'
  not_identifier_start: '(?<=[{{not_identifier_chars}}])'
  not_identifier_end: '(?=[{{not_identifier_chars}}])'
  full_identifier: '{{not_identifier_start}}{{identifier_access}}{{not_identifier_end}}'
contexts:
  main:
    - include: comments
    - match: '(\()\s*(?:(<-\*?)\s*?((?:{{identifier}}\$))*({{identifier}}))(?=\s|\))'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll meta.function-call.sll
        2: keyword.control.call.sll
        3: variable.other.sll
        4: variable.function.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          pop: true
        - include: main
    - match: '(\()\s*(?:(=)\s*?({{identifier_access}})\s*?(\())(,,,)(?=\s|\))'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll meta.function.sll
        2: keyword.operator.assignment.sll
        3: entity.name.function.sll
        4: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        5: keyword.declaration.function.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - include: comments
        - match: '{{full_identifier}}'
          scope: variable.parameter.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          set:
            - match: '\)'
              scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
              pop: true
            - include: main
        - include: main
    - match: '(\()\s*(?:(=)\s*?({{identifier_access}})\s*?(\())(\.\.\.)(?=\s|\))'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll meta.function.sll
        2: keyword.operator.assignment.sll
        3: entity.name.function.sll
        4: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        5: keyword.declaration.function.internal.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          set:
            - meta_scope: meta.group.sll meta.parens.sll
            - match: '\)'
              scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
              pop: true
            - include: main
        - include: main
    - match: '(\()\s*(,,,)\s+'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        2: keyword.declaration.function.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - include: comments
        - match: '{{full_identifier}}'
          scope: variable.parameter.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          pop: true
        - include: main
    - match: '(\()\s*(?:(=)\s*?({{identifier_access}})\s*?(\())(&:)(?=\s|\))'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        2: keyword.operator.assignment.sll
        3: entity.name.type.sll
        4: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        5: keyword.declaration.type.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          set:
            - meta_scope: meta.group.sll meta.parens.sll
            - match: '\)'
              scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
              pop: true
        - include: main
    - match: '(\()\s*(\.)\s+({{identifier}})'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        2: keyword.control.new.sll
        3: storage.type.custom.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          pop: true
        - include: main
    - match: '(\()\s*(?:(\?|->|>-|><|\?:|\?\?)|(&&|\|\||\!{1,2}||\|:)|([&\|\^\~]|<<|>>)|([\*_]\/\/|\/[\/%]|\*[\*\/]|_\/|[\+\-\*\/%]|\+\+|\-\-)|(>=|<=|==|!=|>|<|===|!==)|(=)|(---)|(,,,)|(:>)|(<-\*?)|(@)|(@@)|(\.\.\.)|(##)|(#)|(\$)|(:)|(::)|(:\?)|(,)|(<<<)|(%%)|(\*\*\*)|(&:)|(\.)|([\[\{][<>])|(!\.)|(!<[<\*\+\=>])|(:!))(?=\s|\))'
      captures:
        1: punctuation.section.group.begin.sll punctuation.section.parens.begin.sll
        2: keyword.control.conditional.sll
        3: keyword.operator.logical.sll
        4: keyword.operator.bitwise.sll
        5: keyword.operator.arithmetic.sll
        6: keyword.operator.comparison.sll
        7: keyword.operator.assignment.sll
        8: keyword.control.import.sll
        9: keyword.declaration.function.sll
        10: support.function.builtin.io.sll
        11: keyword.control.call.sll
        12: keyword.control.break.sll
        13: keyword.control.return.sll
        14: keyword.declaration.function.internal.sll
        15: storage.modifier.export.sll
        16: keyword.declaration.sll
        17: support.function.builtin.length.sll
        18: support.function.builtin.access.sll
        19: keyword.operator.cast.sll
        20: keyword.operator.typeof.sll
        21: punctuation.separator.sll
        22: keyword.control.continue.sll
        23: keyword.operator.reference.sll
        24: keyword.declaration.function.inline.sll
        25: keyword.declaration.type.sll
        26: keyword.control.new.sll
        27: keyword.control.conditional.generator.sll
        28: support.function.builtin.thread.id.sll
        29: support.function.builtin.thread.function.sll
        30: support.function.builtin.deep-copy.sll
      push:
        - meta_scope: meta.group.sll meta.parens.sll
        - match: '\)'
          scope: punctuation.section.group.end.sll punctuation.section.parens.end.sll
          pop: true
        - include: main
    - match: '\('
      push:
        - meta_scope: invalid.illegal.unknown-operator.sll
        - match: '\)'
          pop: true
        - include: object_no_highlight
    - match: '\)'
      scope: invalid.illegal.stray-bracket-end.sll
    - match: '\{'
      scope: punctuation.section.block.begin.sll punctuation.section.braces.begin.sll
      push:
        - meta_scope: meta.block.sll meta.braces.sll
        - match: '\}'
          scope: punctuation.section.block.end.sll punctuation.section.braces.end.sll
          pop: true
        - include: main
    - match: '\}'
      scope: invalid.illegal.stray-bracket-end.sll
    - match: '\['
      scope: punctuation.section.sequence.begin.sll
      push:
        - meta_scope: meta.sequence.list.sll
        - match: '\]'
          scope: punctuation.section.sequence.end.sll
          pop: true
        - include: main
    - match: '\]'
      scope: invalid.illegal.stray-bracket-end.sll
    - match: '<'
      scope: punctuation.section.sequence.begin.sll
      push:
        - meta_scope: meta.sequence.map.sll
        - match: '>'
          scope: punctuation.section.sequence.end.sll
          pop: true
        - include: main
    - match: '>'
      scope: invalid.illegal.stray-bracket-end.sll
    - match: '{{not_identifier_start}}[\+-]?0[bB][01][01_]*{{not_identifier_end}}'
      scope: constant.numeric.integer.binary.sll
    - match: '{{not_identifier_start}}[\+-]?0[oO][0-7][0-7_]*{{not_identifier_end}}'
      scope: constant.numeric.integer.octal.sll
    - match: '{{not_identifier_start}}[\+-]?0[xX][0-9a-fA-F][0-9a-fA-F_]*{{not_identifier_end}}'
      scope: constant.numeric.integer.hexadecimal.sll
    - match: '{{not_identifier_start}}[\+-]?(?:[0-9][0-9_]*\.[0-9_]*|\.[0-9_]+)(?:[eE][\+\-]?[0-9][0-9_]*)?{{not_identifier_end}}'
      scope: constant.numeric.float.sll
    - match: '{{not_identifier_start}}[\+-]?[0-9][0-9_]*{{not_identifier_end}}'
      scope: constant.numeric.integer.decimal.sll
    - match: '\'''
      scope: punctuation.definition.string.begin.sll
      push:
        - meta_scope: string.quoted.single.sll
        - match: '\\(?:[\\tnvfr"'']|x[0-9a-fA-F]{2})'
          scope: constant.character.escape.sll
        - match: '\'''
          scope: punctuation.definition.string.end.sll
          pop: true
        - match: '\\.'
          scope: invalid.illegal.escape.sll
    - match: '"'
      scope: punctuation.definition.string.begin.sll
      push:
        - meta_scope: string.quoted.double.sll
        - match: '\\x[0-9a-fA-F]{2}|\\[\\tnvfr"'']'
          scope: constant.character.escape.sll
        - match: '%[0+ -#]*([0-9]+|\*)?(\.([0-9]+|\*))?(h{1,2}|l{1,2})?[%csdouxX]'
          scope: constant.other.placeholder.sll
        - match: '"'
          scope: punctuation.definition.string.end.sll
          pop: true
        - match: '\\.'
          scope: invalid.illegal.escape.sll
    - match: '{{not_identifier_start}}(nil|true|false){{not_identifier_end}}'
      scope: constant.language.sll
    - match: '{{not_identifier_start}}(int_type|func_type|type_type|float_type|char_type|string_type|array_type|map_type|map_key_type|map_value_type|object_type){{not_identifier_end}}'
      scope: storage.type.builtin.sll
    - match: '{{not_identifier_start}}@@(copy|delete|init|string)@@{{not_identifier_end}}'
      scope: support.function.special.sll
    - match: '{{full_identifier}}'
      scope: variable.other.sll
  comments:
    - match: '\|#'
      scope: punctuation.definition.comment.begin.sll
      push:
        - meta_scope: comment.block.sll
        - match: '#\|'
          scope: punctuation.definition.comment.end.sll
          pop: true
    - match: '#\|'
      scope: invalid.illegal.stray-comment-end.sll
    - match: '(;).*$'
      scope: comment.line.sll
      captures:
        1: punctuation.definition.comment.sll
  object_no_highlight:
    - match: '\('
      push:
        - match: '\)'
          pop: true
        - include: object_no_highlight
