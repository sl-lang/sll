(---
	"@test/_common.sll"
	"types.sll"
)



(= test_vector_type (&:
	object_type input
	object_type output
))



(= TEST_VECTORS [
	(. test_vector_type
		false
		true
	)
	(. test_vector_type
		nil
		true
	)
	(. test_vector_type
		true
		false
	)
	(. test_vector_type
		0
		true
	)
	(. test_vector_type
		+987
		false
	)
	(. test_vector_type
		-579
		false
	)
	(. test_vector_type
		0.0
		true
	)
	(. test_vector_type
		123.456
		false
	)
	(. test_vector_type
		-3.1415926
		false
	)
	(. test_vector_type
		'\x00'
		true
	)
	(. test_vector_type
		'A'
		false
	)
	(. test_vector_type
		0i
		true
	)
	(. test_vector_type
		1.0+0.0i
		false
	)
	(. test_vector_type
		-1.0+0.0i
		false
	)
	(. test_vector_type
		0.0+1.0i
		false
	)
	(. test_vector_type
		0.0-1.0i
		false
	)
	(. test_vector_type
		""
		true
	)
	(. test_vector_type
		"\x00"
		false
	)
	(. test_vector_type
		"zero"
		false
	)
	(. test_vector_type
		[]
		true
	)
	(. test_vector_type
		[false]
		false
	)
	(. test_vector_type
		[1.2+3.4i 'a' 'b' 'c']
		false
	)
	(. test_vector_type
		<>
		true
	)
	(. test_vector_type
		<false false>
		false
	)
	(. test_vector_type
		<1.2+3.4i 'a' 'b' 'c'>
		false
	)
])



(= test_no_operands (,,,
	(<- expect (!) 0)
))

(= test_one_operand (,,,
	(-> (= i 0) (< i ($ TEST_VECTORS))
		(= vec (: TEST_VECTORS i))
		(<- expect (! vec$input) vec$output [vec$input])
		(++ i)
	)
))

(= test_multple_operands (,,,
	(-> (= i 0) (< i ($ TEST_VECTORS))
		(= vec (: TEST_VECTORS i))
		(-> (= j 0) (< j ($ TEST_VECTORS))
			(= vec2 (: TEST_VECTORS i))
			(<- expect (! vec$input vec2$input) vec$output [vec$input vec2$input])
			(++ j)
		)
		(++ i)
	)
))



(<- run "Inverse boolean predicate operator (!)" (,,,
	(<- test_no_operands)
	(<- test_one_operand)
	(<- test_multple_operands)
))
