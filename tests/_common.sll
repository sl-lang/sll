(--- "json.sll" "file.sll" "sys.sll" "path.sll" "string.sll" "time.sll" "error.sll" "array.sll" "serial.sll" "base64.sll" "types.sll" "audit.sll" "math.sll")



(= _gh_actions (!! (: sys$ENVIRONMENT "GITHUB_ACTIONS")))
(= _test_data nil)
(= _test_results nil)
(= _last_group nil)
(= _err_output "")
(= _audit_event_data <>)



(= _handle_audit_event (,,, name data
	(= (: _audit_event_data name) data)
))

(= _encode_object (,,, obj
	(= f (<- file$from_data "" file$FLAG_WRITE))
	(<- serial$encode f obj)
	(= out (<- file$get_buffer f))
	(@@ (<- base64$encode out))
))

(= _flush_group (,,,
	(? _last_group (:> '\n' _err_output))
	(= _last_group nil)
	(= _err_output "")
))

(= _expect_raw (,,, error_data error_string
	(? (=== _test_results nil) {
		(:> "Function 'expect_XXX' executed outside of function 'run'!\n")
		(@@)
	})
	(= func_group (: (: (: (<- error$get_call_stack) -2) "return") "function"))
	(? (=== (: func_group 0) '@') {
		(:> "Function 'expect_XXX' executed outside of function prefixed with 'test_'!\n")
		(@@)
	})
	(= func_group (<- string$lower_case (<- string$replace
		(?: (<- string$starts func_group "test_") (>> func_group 5) func_group)
		'_'
		' '
	)))
	(= (: func_group 0) (: (<- string$upper_case (: func_group 0 1)) 0))
	(? (!== _last_group func_group) {
		(<- _flush_group)
		(= _last_group func_group)
		(:> func_group ": ")
	})
	(? (=== error_data nil) {
		(= _test_data$success (+ _test_data$success 1))
		(:> "+")
	} {
		(:> "-")
		(= loc (: (: (<- error$get_call_stack) -1) "return"))
		(= error_data (:! error_data))
		(= (: error_data "group") func_group)
		(= (: error_data "file") loc$file)
		(= (: error_data "line") loc$line)
		(= (: error_data "function") loc$function)
		(<- array$push _test_data$error error_data)
		(= _err_output (+ _err_output (?: _gh_actions
			(<- string$format "::warning file=%s,line=%u,title=%s%3A %s%3A %s::%s\n" loc$file loc$line (<- string$title_case sys$PLATFORM) _test_data$name (<- string$replace (<- string$replace func_group "," "%2C") ":" "%3A") error_string)
			(+ "  " error_string '\n')
		)))
	})
))

(= expect (,,, result value flt_err
	(? (||
			(!== (:? result) (:? value))
			(?: (=== (:? value) float_type)
				(> (<- math$abs (- value result)) flt_err)
				(!== result value)
			)
		)
		(<- _expect_raw <
			"output" (<- _encode_object result)
			"target" (<- _encode_object value)
		> (+ "Expected " (<- string$str value) ", got " (<- string$str result)))
		(<- _expect_raw nil nil)
	)
))

(= expect_audit_event (,,, name data keys_to_check
	(= recv_data (: _audit_event_data name))
	(? (=== data nil) {
		(? recv_data
			(<- _expect_raw <
				"recived_event" recv_data
			> (+ "Expected no event, got " (<- string$str recv_data)))
			(<- _expect_raw nil nil)
		)
		(@@)
	})
	(= expected_evt_data (<- _encode_object <
		"name" name
		"data" data
	>))
	(= evt_data (?: recv_data (<- _encode_object <
		"name" name
		"data" recv_data
	>) nil))
	(? (!== keys_to_check nil) {
		(= old_recv_data (: recv_data))
		(= old_data (: data))
		(= recv_data <>)
		(= data <>)
		(-> (= i 0) (< i ($ keys_to_check))
			(= key (: keys_to_check i))
			(= (: recv_data key) (: old_recv_data key))
			(= (: data key) (: old_data key))
			(++ i)
		)
	})
	(?
		(=== recv_data nil) (<- _expect_raw <
			"target_event" expected_evt_data
		> (+ "Expected audit event " name))
		(!== recv_data data) (<- _expect_raw <
			"recived_event" evt_data
			"target_event" expected_evt_data
		> (+ "Expected " (<- string$str data) ", got " (<- string$str recv_data)))
		(<- _expect_raw nil nil)
	)
	(= (: _audit_event_data name) nil)
))

(= expect_error (,,, result value
	(?
		(!== (:? result) error$error_type) (<- _expect_raw <
			"output" (<- _encode_object result)
		> (+ "Expected an error, got " (.? result)))
		(!== (:? result$error_data) (:? value)) (<- _expect_raw <
			"output" (<- _encode_object result)
			"target_error" (<- _encode_object value)
		> (+ "Expected error type " (.? value) ", got " (.? result$error_data)))
		(!== result$error_data value) (<- _expect_raw <
			"output" (<- _encode_object result)
			"target_error" (<- _encode_object value)
		> (+ "Expected " (:: value map_type string_type) ", got " (:: result$error_data map_type string_type)))
		(<- _expect_raw nil nil)
	)
))

(= run (,,, name fn
	(? (!== _test_results nil) {
		(:> "Function 'run' executed more than once!\n")
		(@@)
	})
	(= name (:: name string_type))
	(= fn (:: fn func_type))
	(= _test_results <>)
	(= f (<- file$open "build/test_results.json" "r"))
	(? (=== f$error_data nil) {
		(= bf (<- file$read f))
		(<- file$close f)
		(? bf (= _test_results (<- json$parse bf)))
	})
	(= id (: (<- string$split (: (<- path$split (: sys$ARGV 0)) 1) ".") 0))
	(= _test_data <
		"name" name
		"file" (<- string$replace (: (: (: (<- error$get_call_stack) -1) "return") "file") '\\' '/')
		"success" 0
		"error" []
		"time" 0
	>)
	(= (: _test_results id) _test_data)
	(= file_name (: (: (:
		(<- error$get_call_stack)
		-1)
		"return")
		"file"
	))
	(? _gh_actions {
		(:> "::group::" name " (" file_name ")\n")
	} {
		(:> ">>> " name " (" file_name ")\n")
	})
	(= start_time (<- time$time))
	(<- audit$register _handle_audit_event)
	(<- fn)
	(= _test_data$time (- (<- time$time) start_time))
	(<- audit$unregister _handle_audit_event)
	(<- _flush_group)
	(? _gh_actions {
		(:> "::endgroup::\n")
	})
	(= f (<- file$open "build/test_results.json" "w"))
	(<- file$write f (<- json$stringify _test_results))
	(<- file$close f)
))



(## expect expect_audit_event expect_error run)
