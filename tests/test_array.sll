(--- "_common.sll" "array.sll")



(= test_item_count (,,,
	(<- expect (<- array$count [] -1) 0 "Empty array")
	(= arr [1 2 4 1 2 1 2])
	(<- expect (<- array$count arr 0) 0 "Non-existent element")
	(<- expect (<- array$count arr 4) 1 "Normal element (Single)")
	(<- expect (<- array$count arr 2) 3 "Normal element (Multiple)")
))

(= test_create (,,,
	(<- expect (<- array$create 0) [] "Zero length")
	(<- expect (<- array$create -2) [] "Negative length")
	(<- expect (<- array$create 12) [0 0 0 0 0 0 0 0 0 0 0 0] "Positive length")
))

(= test_extend (,,,
	(<- expect (,
		(= src [])
		(<- array$extend src [])
		src
	) [] "Empty source and target")
	(<- expect (,
		(= src [])
		(<- array$extend src [4 5 6])
		src
	) [4 5 6] "Empty source, normal target")
	(<- expect (,
		(= src [1 2 3])
		(<- array$extend src [])
		src
	) [1 2 3] "Normal source, empty target")
	(<- expect (,
		(= src [1 2 3])
		(<- array$extend src [4 5 6])
		src
	) [1 2 3 4 5 6] "Normal source and target")
))

(= test_join (,,,
	(<- expect (<- array$join [] 1.2) [] "Empty source")
	(<- expect (<- array$join [[1] [2] [3]] "STRING") [1 "STRING" 2 "STRING" 3] "One-length elements")
	(<- expect (<- array$join [[1] [2 3] [4 5 6]] ["Array"]) [1 ["Array"] 2 3 ["Array"] 4 5 6] "Normal elements")
))

(= test_pop (,,,
	(= arr [1 2])
	(<- expect (<- array$pop arr) 2 "Last element")
	(<- expect (<- array$pop arr) 1 "First element")
	(<- expect (<- array$pop arr) nil "Empty array")
	(<- expect arr [] "Cleared array")
))

(= test_push (,,,
	(<- expect (,
		(= arr [])
		(<- array$push arr 1)
		arr
	) [1] "Empty array")
	(<- expect (,
		(= arr [1])
		(<- array$push arr 2)
		(<- array$push arr 3)
		arr
	) [1 2 3] "Normal array")
))

(= test_remove (,,,
	(= arr [1 2 3 3 4])
	(<- array$remove arr -1)
	(<- expect arr [1 2 3 3 4] "Non-existent element")
	(<- array$remove arr 2)
	(<- expect arr [1 3 3 4] "Single element")
	(<- array$remove arr 3)
	(<- expect arr [1 4] "Multiple elements")
))

(= test_replace (,,,
	(<- expect (<- array$replace [] 1 2) [] "Empty array")
	(<- expect (<- array$replace [1 2 3] "key" "value") [1 2 3] "Non-existent key")
	(<- expect (<- array$replace [1 2 3] 2 "value") [1 "value" 3] "Normal key")
))

(= test_reverse (,,,
	(<- expect (<- array$reverse []) [] "Empty array")
	(<- expect (<- array$reverse [1 2 3]) [3 2 1] "Normal array")
))

(= test_shift (,,,
	(= arr [1 2])
	(<- expect (<- array$shift arr) 1 "First element")
	(<- expect (<- array$shift arr) 2 "Last element")
	(<- expect (<- array$shift arr) nil "Empty array")
	(<- expect arr [] "Cleared array")
))

(= test_unshift (,,,
	(<- expect (,
		(= arr [])
		(<- array$unshift arr 1)
		arr
	) [1] "Empty array")
	(<- expect (,
		(= arr [3])
		(<- array$unshift arr 2)
		(<- array$unshift arr 1)
		arr
	) [1 2 3] "Normal array")
))



(<- run "Array module" (,,,
	(<- test_item_count)
	(<- test_create)
	(<- test_extend)
	(<- test_join)
	(<- test_pop)
	(<- test_push)
	(<- test_remove)
	(<- test_replace)
	(<- test_reverse)
	(<- test_shift)
	(<- test_unshift)
))
