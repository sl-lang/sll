(--- "_common.sll")

(= test_access (,,,
	(<- expect (: [1 2 3 4] 0) 1)
	(<- expect (: [1 2 3 4] -1) 4)
	(<- expect (: [1 2 3 4] 4) nil)
	(<- expect (: [1 2 3 4] -5) nil)
))

(= test_access_range (,,,
	(<- expect (: [1 2 3 4] 1 3) [2 3])
	(<- expect (: [1 2 3 4] 1 -1) [2 3])
))

(= test_access_range_step (,,,
	(<- expect (: [1 2 3 4] 0 3 2) [1 3])
))

(= test_add (,,,
	(<- expect (+ [1 2 3] 4) [1 2 3 4] )
	(<- expect (+ [1 2 3] 4.1) [1 2 3 4.1])
	(<- expect (+ [1 2 3] '4') [1 2 3 '4'])
	(<- expect (+ [1 2 3] "4") [1 2 3 "4"])
	(<- expect (+ [1 2 3] [4 5]) [1 2 3 4 5])
	(<- expect (+ [1 2 3] <4 5>) [1 2 3 <4 5>])
))

(= test_bitwise_and (,,,
	(<- expect (& [1 2 3] 2) [0 2 2])
	(<- expect (& [1 2.0 3] 2.0) [0.0 2.0 0.0])
	(<- expect (& [1 2 3] '2') [0 2 2])
	(<- expect (& [1 2 3] "\x01\x02\x00") [1 2 0])
	(<- expect (& [1 2 3] [2 4 5]) [2])
	(<- expect (& [1 2 3] <4 5 2 3>) <2 6>)
))

(= test_assign (,,,
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr 1) 'b')
		arr
	) [1 'b' 3])
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr -3) 'a')
		arr
	) ['a' 2 3])
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr 11) 'c')
		arr
	) [1 2 'c'])
))

(= test_assign_range (,,,
))

(= test_assign_range_step (,,,
))

(= test_bool (,,,
	(<- expect (!! []) 0)
	(<- expect (!! [1]) 1)
))

(= test_decrement (,,,
	(<- expect (,
		(= arr [1 2 3])
		(-- arr)
		arr
	) [2 3])
))

(= test_division (,,,
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 2)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) 0)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 2)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) 4)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) 1)
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1)
))

(= test_copy (,,,
	(<- expect (,
		(= arr [1 2 3])
		(= new (: arr))
		(= (: new 0) "A")
		arr
	) [1 2 3])
	(<- expect (,
		(= arr [[1 2] [3 4]])
		(= new (: arr))
		(= (: (: new 0) 0) 'A')
		(= (: new 1) [5 6])
		arr
	) [['A' 2] [3 4]])
))

(= test_deep_copy (,,,
	(<- expect (,
		(= arr [[1 2] [3 4]])
		(= new (:! arr))
		(= (: (: new 0) 0) 'A')
		arr
	) [[1 2] [3 4]])
))

(= test_equality (,,,
	(<- expect (== [1 2 3 4] 4) 1)
	(<- expect (== [1 2 3 4] 4.0) 1)
	(<- expect (== [1 2 3 4] '\x04') 1)
	(<- expect (== [1 2 3 4] "\x01\x02\x03\x04") 1)
	(<- expect (== [1 2 3 4] [1 2 3 4]) 1)
	(<- expect (== [1 2 3 4] <0 1 1 2 2 3 3 4>) 1)
))

(= test_floored_division (,,,
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 2)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) 0)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 2)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) 4)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) 1)
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1)
))

(= test_increment (,,,
	(<- expect (,
		(= arr [1 2 3])
		(++ arr)
		arr
	) [1 2 3 1])
))

(= test_membership (,,,
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 1)
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 2.0) 1)
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1)
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 1)
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [3 1 4]) 1)
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1)
))

(= test_inversion (,,,
	(<- expect (~ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>]) [-2 -3.0 "\xcc" -2 '\x9e' "\xcc" [-4 -2 -5] <"A" '\x9e'>])
))

(= test_length (,,,
	(<- expect ($ []) 0)
	(<- expect ($ [1 2 3 4 5]) 5)
	(<- expect ($ [[1 2 3]]) 1)
))

(= test_modulo (,,,
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 3) [1 2.0 ['\x02'] 1 '\x01' ['\x02'] [0 1 1] <"A" '\x01'>]r")
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 2.5) [0.0 2.0 [0.5] 1.0 2.0 [0.5] [0.5 1.0 1.5] <"A" 2.0>])
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 'a') [3 2.0 ["5"] 1 '\x00' ["5"] [3 1 4] <"A" '\x00'>])
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] "3") [49 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>])
	; (<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] [3 1 4]) nil)
	; (<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] <"A" 'a'>) nil)
))

(= test_multiplication (,,,
	(<- expect (* [1 2 3 4] 1) [1 2 3 4] )
	(<- expect (* [1 2 3 4] -2) [4 3 2 1 4 3 2 1] )
	(<- expect (* [1 2 3 4] 2.5) [1 2 3 4 1 2 3 4 1 2] )
	(<- expect (* [1 2 3 4] -1.25) [4 3 2 1 4] )
	(<- expect (* [1 2 3 4] '\x05') [1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4] )
	(<- expect (* [1 2 3 4] "ABC") [66 67 68 67 68 69 68 69 70 69 70 71])
	(<- expect (* [1 2 3 4] [3 1 4]) [4 2 5 5 3 6 6 4 7 7 5 8])
	(<- expect (* [1 2 3 4] <"A" 3.75>) <"A" [1 2 3 4 1 2 3 4 1 2 3 4 1 2 3]> )
))

(= test_bitwise_or (,,,
	(<- expect (| [1 2 3 4] 1) [1 3 3 5])
	(<- expect (| [1 2 3 4] 256.0) [256.0000000000000568 256.0000000000001137 256.0000000000001705 256.0000000000002274])
	(<- expect (| [1 2 3 4] '\x05') [5 7 7 5])
	(<- expect (| [1 2 3 4] "3Ab") [51 67 99 4])
	(<- expect (| [1 2 3 4] [0 3 1 4 5]) [1 2 3 4 0 5])
	(<- expect (| [1 2 3 4] <"A" 3.75 3 10>) <"A" 3.75 3 4 0 1 1 2 2 3>)
))

(= test_left_shift (,,,
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 5) [0 0 0 0 0 1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] -5) ["3" [3 1 4] <"A" 'a'>])
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 2.0) [0 0 1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] -2.0) ["3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] '\x03') [0 0 0 1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3\x02\x01") [0x8000000000000 8.0 "\x003" 1 'a' "3" [3 1 4] <"A" 'a'>])
	; (<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [3 1 4]) nil)
	; (<- expect (<< [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) nil)
))

(= test_right_shift (,,,
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 5) ["3" [3 1 4] <"A" 'a'>])
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] -5) [0 0 0 0 0 1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 2.0) ["3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] -2.0) [0 0 1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] '\x03') [1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3\x02\x01") [0 0.5 "" 1 'a' "3" [3 1 4] <"A" 'a'>])
	; (<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [3 1 4]) nil)
	; (<- expect (>> [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) nil)
))

(= test_strict_equality (,,,
	(<- expect (=== [1 2 3 4] 4) 0)
	(<- expect (!== [1 2 3 4] 4) 1)
	(<- expect (=== [1 2 3 4] 4.0) 0)
	(<- expect (!== [1 2 3 4] 4.0) 1)
	(<- expect (=== [1 2 3 4] '\x04') 0)
	(<- expect (!== [1 2 3 4] '\x04') 1)
	(<- expect (=== [1 2 3 4] "\x01\x02\x03\x04") 0)
	(<- expect (!== [1 2 3 4] "\x01\x02\x03\x04") 1)
	(<- expect (=== [1 2 3 4] [1 2 3 4]) 1)
	(<- expect (!== [1 2 3 4] [1 2 3 4]) 0)
	(<- expect (=== [1 2 3 4] <0 1 1 2 2 3 3 4>) 0)
	(<- expect (!== [1 2 3 4] <0 1 1 2 2 3 3 4>) 1)
))

(= test_subtraction (,,,
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) [2.0 "3" 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') [1 2.0 "3" 1 "3" [3 1 4] <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") [1 2.0 1 'a' [3 1 4] <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) ["3" "3" [3 1 4] <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) [1 2.0 "3" 1 'a' "3" <"A" 'a'>])
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) [1 2.0 "3" 1 'a' "3" [3 1 4]])
))

(= test_bitwise_exclusive_or (,,,
	(<- expect (^ [1 2 3 4] 1) [0 3 2 5])
	(<- expect (^ [1 2 3 4] 0.5) [0.5000000000000001 0.5000000000000002 0.5000000000000003 0.5000000000000004])
	(<- expect (^ [1 2 3 4] '\x05') [4 7 6 1])
	(<- expect (^ [1 2 3 4] "3Ab") [50 67 97 4])
	(<- expect (^ [1 2 3 4] [0 3 1 4 5]) [1 1 2 0 5])
	(<- expect (^ [1 2 3 4] <"A" 3.75 3 10>) <"A" 3.75 3 4 0 1 1 2 2 3>)
))

(<- run "Array operators" (,,,
	(<- test_access)
	(<- test_access_range)
	(<- test_access_range_step)
	(<- test_add)
	(<- test_bitwise_and)
	(<- test_assign)
	(<- test_assign_range)
	(<- test_assign_range_step)
	(<- test_bool)
	(<- test_decrement)
	(<- test_division)
	(<- test_copy)
	(<- test_deep_copy)
	(<- test_equality)
	(<- test_floored_division)
	(<- test_increment)
	(<- test_membership)
	(<- test_inversion)
	(<- test_length)
	(<- test_modulo)
	(<- test_multiplication)
	(<- test_bitwise_or)
	(<- test_left_shift)
	(<- test_right_shift)
	(<- test_strict_equality)
	(<- test_subtraction)
	(<- test_bitwise_exclusive_or)
))
