(--- "_common.sll")

(<- run "Array operators" (,,,
	; Access
	(<- expect (: [1 2 3 4] 0) 1 "Access")
	(<- expect (: [1 2 3 4] -1) 4 "Access from end")
	(<- expect (: [1 2 3 4] 4) 1 "Access out-of-bounds")
	(<- expect (: [1 2 3 4] -5) 4 "Access from end, out-of-bounds")
	; ; Access Range
	; (<- expect (: [1 2 3 4] 1 3) [2 3] "Access range")
	; (<- expect (: [1 2 3 4] 1 -1) [2 3] "Access range, index from end")
	; ; Access Range + Step
	; (<- expect (: [1 2 3 4] 0 3 2) [1 3] "Access range and step")
	; Add
	(<- expect (+ [1 2 3] 4) [1 2 3 4] "Add integer")
	(<- expect (+ [1 2 3] 4.1) [1 2 3 4.1] "Add float")
	(<- expect (+ [1 2 3] '4') [1 2 3 '4'] "Add char")
	(<- expect (+ [1 2 3] "4") [1 2 3 "4"] "Add string")
	(<- expect (+ [1 2 3] [4 5]) [1 2 3 4 5] "Add array")
	(<- expect (+ [1 2 3] <4 5>) [1 2 3 <4 5>] "Add map")
	; Bitwise AND / Intersection
	(<- expect (& [1 2 3] 2) [0 2 2] "Bitwise AND with integer")
	(<- expect (& [1 2.0 3] 2.0) [0.0 2.0 0.0] "Bitwise AND with float")
	(<- expect (& [1 2 3] '2') [0 2 2] "Bitwise AND with char")
	(<- expect (& [1 2 3] "\x01\x02\x00") [1 2 0] "Bitwise AND with string")
	(<- expect (& [1 2 3] [2 4 5]) [2] "Bitwise AND with array")
	(<- expect (& [1 2 3] <4 5 2 3>) <2 6> "Bitwise AND with map")
	; Assign
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr 1) 'b')
		arr
	) [1 'b' 3] "Assign value")
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr -3) 'a')
		arr
	) ['a' 2 3] "Assign value from end")
	(<- expect (,
		(= arr [1 2 3])
		(= (: arr 11) 'c')
		arr
	) [1 2 'c'] "Assign value out-of-bounds")
	; Assign Range
	|# TODO #|
	; Assign Range + Step
	|# TODO #|
	; Boolean / Truth value
	(<- expect (!! []) 0 "Truth value of empty array")
	(<- expect (!! [1]) 1 "Truth value of non-empty array")
	; Compare
	|# TODO #|
	; Decrement
	; (<- expect (-- [1 2 3]) [2 3] "Decrement array")
	; Element counting
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 2 "Count integer (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) 0 "Count float (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1 "Count char (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 2 "Count string (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) 4 "Count multiple (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) 1 "Count array (division)")
	(<- expect (/ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1 "Count map (division)")
	; Duplicate
	(<- expect (,
		(= arr [1 2 3])
		(= new (: arr))
		(= (: new 0) "A")
		arr
	) [1 2 3] "Duplication")
	; Equality
	(<- expect (== [1 2 3 4] 4) 1 "Equal to integer")
	(<- expect (== [1 2 3 4] 4.0) 1 "Equal to float")
	(<- expect (== [1 2 3 4] '\x04') 1 "Equal to char")
	(<- expect (== [1 2 3 4] "\x01\x02\x03\x04") 1 "Equal to string")
	(<- expect (== [1 2 3 4] [1 2 3 4]) 1 "Equal to array")
	(<- expect (== [1 2 3 4] <0 1 1 2 2 3 3 4>) 1 "Equal to map")
	; Element counting
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 2 "Count integer (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) 0 "Count float (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1 "Count char (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 2 "Count string (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) 4 "Count multiple (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) 1 "Count array (floored division)")
	(<- expect (// [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1 "Count map (floored division)")
	; Increment
	; (<- expect (++ [1 2 3]) [1 2 3 1] "Increment array")
	; Membership test
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) 1 "Inclusion of integer")
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 2.0) 1 "Inclusion of float")
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') 1 "Inclusion of char")
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") 1 "Inclusion of string")
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [3 1 4]) 1 "Inclusion of array")
	(<- expect (|: [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1 "Inclusion of map")
	; Element inversion
	(<- expect (~ [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>]) [-2 -3.0 "\xcc" -2 '\x9e' "\xcc" [-4 -2 -5] <"A" '\x9e'>] "Element inversion")
	; Length
	(<- expect ($ []) 0 "Length of empty array")
	(<- expect ($ [1 2 3 4 5]) 5 "Length of array")
	(<- expect ($ [[1 2 3]]) 1 "Length of nested array")
	; Element modulo
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 3) [1 2.0 ['\x02'] 1 '\x01' ['\x02'] [0 1 1] <"A" '\x01'>] "Modulo integer")
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 2.5) [0.0 2.0 [0.5] 1.0 2.0 [0.5] [0.5 1.0 1.5] <"A" 2.0>] "Modulo float")
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] 'a') [3 2.0 ["5"] 1 '\x00' ["5"] [3 1 4] <"A" '\x00'>] "Modulo char")
	(<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] "3") [49 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] "Modulo string")
	; (<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] [3 1 4]) 1 "Modulo array")
	; (<- expect (% [100 2.0 "5" 1 'a' "5" [3 1 4] <"A" 'a'>] <"A" 'a'>) 1 "Modulo map")
	; Multiplication / Combinations
	(<- expect (* [1 2 3 4] 1) [1 2 3 4] "Multiplication by integer")
	(<- expect (* [1 2 3 4] -2) [4 3 2 1 4 3 2 1] "Multiplication by negative integer")
	(<- expect (* [1 2 3 4] 2.5) [1 2 3 4 1 2 3 4 1 2] "Multiplication by float")
	(<- expect (* [1 2 3 4] -1.25) [4 3 2 1 4] "Multiplication by negative float")
	(<- expect (* [1 2 3 4] '\x05') [1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4] "Multiplication by char")
	(<- expect (* [1 2 3 4] "ABC") [66 67 68 67 68 69 68 69 70 69 70 71] "Combinations with string")
	(<- expect (* [1 2 3 4] [3 1 4]) [4 2 5 5 3 6 6 4 7 7 5 8] "Combinations with array")
	(<- expect (* [1 2 3 4] <"A" 3.75>) <"A" [1 2 3 4 1 2 3 4 1 2 3 4 1 2 3]> "Multiplication by map")
	; Bitwise OR
	(<- expect (| [1 2 3 4] 1) [1 3 3 5] "Bitwise OR with integer")
	(<- expect (| [1 2 3 4] 256.0) [256.0000000000000568 256.0000000000001137 256.0000000000001705 256.0000000000002274] "Bitwise OR with float")
	(<- expect (| [1 2 3 4] '\x05') [5 7 7 5] "Bitwise OR with char")
	(<- expect (| [1 2 3 4] "3Ab") [51 67 99 4] "Bitwise OR with string")
	(<- expect (| [1 2 3 4] [0 3 1 4 5]) [1 2 3 4 0 5] "Bitwise OR with array")
	(<- expect (| [1 2 3 4] <"A" 3.75 3 10>) <"A" 3.75 3 4 0 1 1 2 2 3> "Bitwise OR with map")
	; Left shift / Resize
	|# TODO #|
	; Right shift / Resize
	|# TODO #|
	; Strict equality
	(<- expect (=== [1 2 3 4] 4) 0 "Strict equal to integer")
	(<- expect (!== [1 2 3 4] 4) 1 "Strict not equal to integer")
	(<- expect (=== [1 2 3 4] 4.0) 0 "Strict equal to float")
	(<- expect (!== [1 2 3 4] 4.0) 1 "Strict not equal to float")
	(<- expect (=== [1 2 3 4] '\x04') 0 "Strict equal to char")
	(<- expect (!== [1 2 3 4] '\x04') 1 "Strict not equal to char")
	(<- expect (=== [1 2 3 4] "\x01\x02\x03\x04") 0 "Strict equal to string")
	(<- expect (!== [1 2 3 4] "\x01\x02\x03\x04") 1 "Strict not equal to string")
	(<- expect (=== [1 2 3 4] [1 2 3 4]) 1 "Strict equal to array")
	(<- expect (!== [1 2 3 4] [1 2 3 4]) 0 "Strict not equal to array")
	(<- expect (=== [1 2 3 4] <0 1 1 2 2 3 3 4>) 0 "Strict equal to map")
	(<- expect (!== [1 2 3 4] <0 1 1 2 2 3 3 4>) 1 "Strict not equal to map")
	; Subtraction / Element removing
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1) [2.0 "3" 'a' "3" [3 1 4] <"A" 'a'>] "Remove integer")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 1.0) [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "Remove float")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] 'a') [1 2.0 "3" 1 "3" [3 1 4] <"A" 'a'>] "Remove char")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] "3") [1 2.0 1 'a' [3 1 4] <"A" 'a'>] "Remove string")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [1 2.0 'a']) ["3" "3" [3 1 4] <"A" 'a'>] "Remove multiple")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] [[3 1 4]]) [1 2.0 "3" 1 'a' "3" <"A" 'a'>] "Remove array")
	(<- expect (- [1 2.0 "3" 1 'a' "3" [3 1 4] <"A" 'a'>] <"A" 'a'>) [1 2.0 "3" 1 'a' "3" [3 1 4]] "Remove map")
	; Bitwise Exclusive OR
	|# TODO #|
))
