(--- "_common.sll")

(<- run "Array operators" (,,,
	(<- expect (: [1 2 3 4] 0) 1 "Access array in-bounds")
	(<- expect (: [1 2 3 4] -1) 4 "Access array from end")
	(<- expect (: [1 2 3 4] 4) nil "Access array out-of-bounds")
	(<- expect (: [1 2 3 4] -5) nil "Access array from end, out-of-bounds")
	; (<- expect (: [1 2 3 4] 1 3) [2 3] "Access array range, in-bounds")
	; (<- expect (: [1 2 3 4] 1 -1) [2 3] "Access array range, index from end, in-bounds")
	; (<- expect (: [1 2 3 4] 0 3 2) [1 3] "Access array range and step, in-bounds")
	(<- expect (+ [1 2 3] 4) [1 2 3 4] "Add array and integer")
	(<- expect (+ [1 2 3] 4.1) [1 2 3 4.1] "Add array and float")
	(<- expect (+ [1 2 3] '4') [1 2 3 '4'] "Add array and char")
	(<- expect (+ [1 2 3] "4") [1 2 3 "4"] "Add array and string")
	(<- expect (+ [1 2 3] [4 5]) [1 2 3 4 5] "Add array and array")
	(<- expect (+ [1 2 3] <4 5>) [1 2 3 <4 5>] "Add array and map")
	(<- expect (& [1 2 3] 2) [0 2 2] "Bitwise AND of array and integer")
	(<- expect (& [1 2.0 3] 2.0) [0.0 2.0 0.0] "Bitwise AND of array and float")
	(<- expect (& [1 2 3] '2') [0 2 2] "Bitwise AND of array and char")
	(<- expect (& [1 2 3] "\x01\x02\x00") [1 2 0] "Bitwise AND of array and string")
	(<- expect (& [1 2 3] [2 4 5]) [2] "Bitwise AND of array and array")
	(<- expect (& [1 2 3] <4 5 2 3>) <2 6> "Bitwise AND of array and map")
	(<- expect ($ []) 0 "Length of empty array")
	(<- expect ($ [1 2 3 4 5]) 5 "Length of an array")
	(<- expect ($ [[1 2 3]]) 1 "Length of nested array")
))
