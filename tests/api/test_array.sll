(---
	"@test/_common.sll"
	"array.sll"
)



(= test_item_count (,,,
	(<- expect (<- array$count [] -1) 0)
	(= arr [1 2 4 1 2 1 2])
	(<- expect (<- array$count arr 0) 0)
	(<- expect (<- array$count arr 4) 1)
	(<- expect (<- array$count arr 2) 3)
))

(= test_create (,,,
	(<- expect (<- array$create 0) [])
	(<- expect (<- array$create -2) [])
	(<- expect (<- array$create 12) [0 0 0 0 0 0 0 0 0 0 0 0])
))

(= test_extend (,,,
	(<- expect (,
		(= src [])
		(<- array$extend src [])
		src
	) [])
	(<- expect (,
		(= src [])
		(<- array$extend src [4 5 6])
		src
	) [4 5 6])
	(<- expect (,
		(= src [1 2 3])
		(<- array$extend src [])
		src
	) [1 2 3])
	(<- expect (,
		(= src [1 2 3])
		(<- array$extend src [4 5 6])
		src
	) [1 2 3 4 5 6])
))

(= test_index (,,,
	(<- expect (<- array$index [] 123) -1)
	(<- expect (<- array$index ['a' 'b' 'c'] 'a') 0)
	(<- expect (<- array$index ['a' 'b' 'c' 'b'] 'b') 1)
	(<- expect (<- array$index ['a' 'b' 'c' 'b'] 123456.789) -1)
))

(= test_join (,,,
	(<- expect (<- array$join [] 1.2) [])
	(<- expect (<- array$join [[1] [2] [3]] "STRING") [1 "STRING" 2 "STRING" 3])
	(<- expect (<- array$join [[1] [2 3] [4 5 6]] ["Array"]) [1 ["Array"] 2 3 ["Array"] 4 5 6])
))

(= test_pop (,,,
	(= arr [1 2])
	(<- expect (<- array$pop arr) 2)
	(<- expect (<- array$pop arr) 1)
	(<- expect (<- array$pop arr) nil)
	(<- expect arr [])
))

(= test_push (,,,
	(<- expect (,
		(= arr [])
		(<- array$push arr 1)
		arr
	) [1])
	(<- expect (,
		(= arr [1])
		(<- array$push arr 2)
		(<- array$push arr 3)
		arr
	) [1 2 3])
))

(= test_remove (,,,
	(= arr [1 2 3 3 4])
	(<- array$remove arr -1)
	(<- expect arr [1 2 3 3 4])
	(<- array$remove arr 2)
	(<- expect arr [1 3 3 4])
	(<- array$remove arr 3)
	(<- expect arr [1 4])
))

(= test_replace (,,,
	(<- expect (<- array$replace [] 1 2) [])
	(<- expect (<- array$replace [1 2 3] "key" "value") [1 2 3])
	(<- expect (<- array$replace [1 2 3] 2 "value") [1 "value" 3])
))

(= test_reverse (,,,
	(<- expect (<- array$reverse []) [])
	(<- expect (<- array$reverse [1 2 3]) [3 2 1])
))

(= test_shift (,,,
	(= arr [1 2])
	(<- expect (<- array$shift arr) 1)
	(<- expect (<- array$shift arr) 2)
	(<- expect (<- array$shift arr) nil)
	(<- expect arr [])
))

(= test_split (,,,
	(<- expect (<- array$split [] "abc") [[]])
	(<- expect (<- array$split [1 2 "abc" 3 4] "abc") [[1 2] [3 4]])
	(<- expect (<- array$split [1 2 -0.5 3 4 -0.5 5 6] -0.5) [[1 2] [3 4] [5 6]])
	(<- expect (<- array$split [1 2 3 4 5] "abc") [[1 2 3 4 5]])
))

(= test_unshift (,,,
	(<- expect (,
		(= arr [])
		(<- array$unshift arr 1)
		arr
	) [1])
	(<- expect (,
		(= arr [3])
		(<- array$unshift arr 2)
		(<- array$unshift arr 1)
		arr
	) [1 2 3])
))



(<- run "Array module" (,,,
	(<- test_item_count)
	(<- test_create)
	(<- test_extend)
	(<- test_index)
	(<- test_join)
	(<- test_pop)
	(<- test_push)
	(<- test_remove)
	(<- test_replace)
	(<- test_reverse)
	(<- test_shift)
	(<- test_split)
	(<- test_unshift)
))
